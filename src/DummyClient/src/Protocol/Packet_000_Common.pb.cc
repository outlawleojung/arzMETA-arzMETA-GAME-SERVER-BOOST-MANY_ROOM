// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_000_Common.proto

#include "Packet_000_Common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_ENTER::C_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sessionid_)*/0
  , /*decltype(_impl_.isobserver_)*/false
  , /*decltype(_impl_.isexpose_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTERDefaultTypeInternal() {}
  union {
    C_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTERDefaultTypeInternal _C_ENTER_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER::S_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTERDefaultTypeInternal() {}
  union {
    S_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTERDefaultTypeInternal _S_ENTER_default_instance_;
PROTOBUF_CONSTEXPR C_REENTER::C_REENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_REENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_REENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_REENTERDefaultTypeInternal() {}
  union {
    C_REENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_REENTERDefaultTypeInternal _C_REENTER_default_instance_;
PROTOBUF_CONSTEXPR S_REENTER::S_REENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_REENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_REENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_REENTERDefaultTypeInternal() {}
  union {
    S_REENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_REENTERDefaultTypeInternal _S_REENTER_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE::C_LEAVE(
    ::_pbi::ConstantInitialized) {}
struct C_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVEDefaultTypeInternal() {}
  union {
    C_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVEDefaultTypeInternal _C_LEAVE_default_instance_;
PROTOBUF_CONSTEXPR C_GET_CLIENT::C_GET_CLIENT(
    ::_pbi::ConstantInitialized) {}
struct C_GET_CLIENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_GET_CLIENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_GET_CLIENTDefaultTypeInternal() {}
  union {
    C_GET_CLIENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GET_CLIENTDefaultTypeInternal _C_GET_CLIENT_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_CLIENT_ClientInfo::S_ADD_CLIENT_ClientInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statemessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_CLIENT_ClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_CLIENT_ClientInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_CLIENT_ClientInfoDefaultTypeInternal() {}
  union {
    S_ADD_CLIENT_ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_CLIENT_ClientInfoDefaultTypeInternal _S_ADD_CLIENT_ClientInfo_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_CLIENT::S_ADD_CLIENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientinfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_CLIENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_CLIENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_CLIENTDefaultTypeInternal() {}
  union {
    S_ADD_CLIENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_CLIENTDefaultTypeInternal _S_ADD_CLIENT_default_instance_;
PROTOBUF_CONSTEXPR S_REMOVE_CLIENT::S_REMOVE_CLIENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_REMOVE_CLIENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_REMOVE_CLIENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_REMOVE_CLIENTDefaultTypeInternal() {}
  union {
    S_REMOVE_CLIENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_REMOVE_CLIENTDefaultTypeInternal _S_REMOVE_CLIENT_default_instance_;
PROTOBUF_CONSTEXPR C_SET_NICKNAME::C_SET_NICKNAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SET_NICKNAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SET_NICKNAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SET_NICKNAMEDefaultTypeInternal() {}
  union {
    C_SET_NICKNAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SET_NICKNAMEDefaultTypeInternal _C_SET_NICKNAME_default_instance_;
PROTOBUF_CONSTEXPR S_SET_NICKNAME::S_SET_NICKNAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SET_NICKNAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SET_NICKNAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SET_NICKNAMEDefaultTypeInternal() {}
  union {
    S_SET_NICKNAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SET_NICKNAMEDefaultTypeInternal _S_SET_NICKNAME_default_instance_;
PROTOBUF_CONSTEXPR S_SET_NICKNAME_NOTICE::S_SET_NICKNAME_NOTICE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SET_NICKNAME_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SET_NICKNAME_NOTICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SET_NICKNAME_NOTICEDefaultTypeInternal() {}
  union {
    S_SET_NICKNAME_NOTICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SET_NICKNAME_NOTICEDefaultTypeInternal _S_SET_NICKNAME_NOTICE_default_instance_;
PROTOBUF_CONSTEXPR C_CHAT::C_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHAT::S_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_DISCONNECT::S_DISCONNECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DISCONNECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DISCONNECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DISCONNECTDefaultTypeInternal() {}
  union {
    S_DISCONNECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DISCONNECTDefaultTypeInternal _S_DISCONNECT_default_instance_;
PROTOBUF_CONSTEXPR C_WILDCARD::C_WILDCARD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_WILDCARDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_WILDCARDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_WILDCARDDefaultTypeInternal() {}
  union {
    C_WILDCARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_WILDCARDDefaultTypeInternal _C_WILDCARD_default_instance_;
PROTOBUF_CONSTEXPR S_WILDCARD::S_WILDCARD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_WILDCARDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_WILDCARDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_WILDCARDDefaultTypeInternal() {}
  union {
    S_WILDCARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_WILDCARDDefaultTypeInternal _S_WILDCARD_default_instance_;
PROTOBUF_CONSTEXPR C_WILDCARD_MAP_DataEntry_DoNotUse::C_WILDCARD_MAP_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct C_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    C_WILDCARD_MAP_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal _C_WILDCARD_MAP_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR C_WILDCARD_MAP::C_WILDCARD_MAP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_WILDCARD_MAPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_WILDCARD_MAPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_WILDCARD_MAPDefaultTypeInternal() {}
  union {
    C_WILDCARD_MAP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_WILDCARD_MAPDefaultTypeInternal _C_WILDCARD_MAP_default_instance_;
PROTOBUF_CONSTEXPR S_WILDCARD_MAP_DataEntry_DoNotUse::S_WILDCARD_MAP_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct S_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    S_WILDCARD_MAP_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_WILDCARD_MAP_DataEntry_DoNotUseDefaultTypeInternal _S_WILDCARD_MAP_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR S_WILDCARD_MAP::S_WILDCARD_MAP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_WILDCARD_MAPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_WILDCARD_MAPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_WILDCARD_MAPDefaultTypeInternal() {}
  union {
    S_WILDCARD_MAP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_WILDCARD_MAPDefaultTypeInternal _S_WILDCARD_MAP_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Packet_5f000_5fCommon_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_5f000_5fCommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_5f000_5fCommon_2eproto = nullptr;

const uint32_t TableStruct_Packet_5f000_5fCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.isobserver_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.isexpose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_REENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_REENTER, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_REENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_REENTER, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GET_CLIENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_CLIENT_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_CLIENT_ClientInfo, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_CLIENT_ClientInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_CLIENT_ClientInfo, _impl_.statemessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_CLIENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_CLIENT, _impl_.clientinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_REMOVE_CLIENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_REMOVE_CLIENT, _impl_.clientids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_NICKNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_NICKNAME, _impl_.nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_NICKNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_NICKNAME, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_NICKNAME_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_NICKNAME_NOTICE, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_NICKNAME_NOTICE, _impl_.nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DISCONNECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DISCONNECT, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WILDCARD_MAP, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WILDCARD_MAP, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_ENTER)},
  { 13, -1, -1, sizeof(::Protocol::S_ENTER)},
  { 20, -1, -1, sizeof(::Protocol::C_REENTER)},
  { 27, -1, -1, sizeof(::Protocol::S_REENTER)},
  { 34, -1, -1, sizeof(::Protocol::C_LEAVE)},
  { 40, -1, -1, sizeof(::Protocol::C_GET_CLIENT)},
  { 46, -1, -1, sizeof(::Protocol::S_ADD_CLIENT_ClientInfo)},
  { 55, -1, -1, sizeof(::Protocol::S_ADD_CLIENT)},
  { 62, -1, -1, sizeof(::Protocol::S_REMOVE_CLIENT)},
  { 69, -1, -1, sizeof(::Protocol::C_SET_NICKNAME)},
  { 76, -1, -1, sizeof(::Protocol::S_SET_NICKNAME)},
  { 83, -1, -1, sizeof(::Protocol::S_SET_NICKNAME_NOTICE)},
  { 91, -1, -1, sizeof(::Protocol::C_CHAT)},
  { 98, -1, -1, sizeof(::Protocol::S_CHAT)},
  { 106, -1, -1, sizeof(::Protocol::S_DISCONNECT)},
  { 113, -1, -1, sizeof(::Protocol::C_WILDCARD)},
  { 121, -1, -1, sizeof(::Protocol::S_WILDCARD)},
  { 129, 137, -1, sizeof(::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse)},
  { 139, -1, -1, sizeof(::Protocol::C_WILDCARD_MAP)},
  { 147, 155, -1, sizeof(::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse)},
  { 157, -1, -1, sizeof(::Protocol::S_WILDCARD_MAP)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_ENTER_default_instance_._instance,
  &::Protocol::_S_ENTER_default_instance_._instance,
  &::Protocol::_C_REENTER_default_instance_._instance,
  &::Protocol::_S_REENTER_default_instance_._instance,
  &::Protocol::_C_LEAVE_default_instance_._instance,
  &::Protocol::_C_GET_CLIENT_default_instance_._instance,
  &::Protocol::_S_ADD_CLIENT_ClientInfo_default_instance_._instance,
  &::Protocol::_S_ADD_CLIENT_default_instance_._instance,
  &::Protocol::_S_REMOVE_CLIENT_default_instance_._instance,
  &::Protocol::_C_SET_NICKNAME_default_instance_._instance,
  &::Protocol::_S_SET_NICKNAME_default_instance_._instance,
  &::Protocol::_S_SET_NICKNAME_NOTICE_default_instance_._instance,
  &::Protocol::_C_CHAT_default_instance_._instance,
  &::Protocol::_S_CHAT_default_instance_._instance,
  &::Protocol::_S_DISCONNECT_default_instance_._instance,
  &::Protocol::_C_WILDCARD_default_instance_._instance,
  &::Protocol::_S_WILDCARD_default_instance_._instance,
  &::Protocol::_C_WILDCARD_MAP_DataEntry_DoNotUse_default_instance_._instance,
  &::Protocol::_C_WILDCARD_MAP_default_instance_._instance,
  &::Protocol::_S_WILDCARD_MAP_DataEntry_DoNotUse_default_instance_._instance,
  &::Protocol::_S_WILDCARD_MAP_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_5f000_5fCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027Packet_000_Common.proto\022\010Protocol\"\210\001\n\007"
  "C_ENTER\022\016\n\006roomId\030\001 \001(\t\022\020\n\010clientId\030\002 \001("
  "\t\022\021\n\tsessionId\030\003 \001(\005\022\020\n\010password\030\004 \001(\t\022\022"
  "\n\nisObserver\030\005 \001(\010\022\020\n\010nickname\030\006 \001(\t\022\020\n\010"
  "isExpose\030\007 \001(\010\"\031\n\007S_ENTER\022\016\n\006result\030\001 \001("
  "\t\"\035\n\tC_REENTER\022\020\n\010clientId\030\001 \001(\t\"\034\n\tS_RE"
  "ENTER\022\017\n\007success\030\001 \001(\010\"\t\n\007C_LEAVE\"\016\n\014C_G"
  "ET_CLIENT\"\216\001\n\014S_ADD_CLIENT\0226\n\013clientInfo"
  "s\030\001 \003(\0132!.Protocol.S_ADD_CLIENT.ClientIn"
  "fo\032F\n\nClientInfo\022\020\n\010clientId\030\001 \001(\t\022\020\n\010ni"
  "ckname\030\002 \001(\t\022\024\n\014stateMessage\030\003 \001(\t\"$\n\017S_"
  "REMOVE_CLIENT\022\021\n\tclientIds\030\001 \003(\t\"\"\n\016C_SE"
  "T_NICKNAME\022\020\n\010nickname\030\001 \001(\t\"!\n\016S_SET_NI"
  "CKNAME\022\017\n\007success\030\001 \001(\010\";\n\025S_SET_NICKNAM"
  "E_NOTICE\022\020\n\010clientId\030\001 \001(\t\022\020\n\010nickname\030\002"
  " \001(\t\"\026\n\006C_CHAT\022\014\n\004chat\030\001 \001(\t\"(\n\006S_CHAT\022\020"
  "\n\010clientId\030\001 \001(\t\022\014\n\004chat\030\002 \001(\t\"\034\n\014S_DISC"
  "ONNECT\022\014\n\004code\030\001 \001(\t\"(\n\nC_WILDCARD\022\014\n\004co"
  "de\030\001 \001(\005\022\014\n\004data\030\002 \001(\t\"(\n\nS_WILDCARD\022\014\n\004"
  "code\030\001 \001(\005\022\014\n\004data\030\002 \001(\t\"}\n\016C_WILDCARD_M"
  "AP\022\014\n\004code\030\001 \001(\005\0220\n\004data\030\002 \003(\0132\".Protoco"
  "l.C_WILDCARD_MAP.DataEntry\032+\n\tDataEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"}\n\016S_WIL"
  "DCARD_MAP\022\014\n\004code\030\001 \001(\005\0220\n\004data\030\002 \003(\0132\"."
  "Protocol.S_WILDCARD_MAP.DataEntry\032+\n\tDat"
  "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_Packet_5f000_5fCommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_5f000_5fCommon_2eproto = {
    false, false, 1046, descriptor_table_protodef_Packet_5f000_5fCommon_2eproto,
    "Packet_000_Common.proto",
    &descriptor_table_Packet_5f000_5fCommon_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct_Packet_5f000_5fCommon_2eproto::offsets,
    file_level_metadata_Packet_5f000_5fCommon_2eproto, file_level_enum_descriptors_Packet_5f000_5fCommon_2eproto,
    file_level_service_descriptors_Packet_5f000_5fCommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_5f000_5fCommon_2eproto_getter() {
  return &descriptor_table_Packet_5f000_5fCommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_5f000_5fCommon_2eproto(&descriptor_table_Packet_5f000_5fCommon_2eproto);
namespace Protocol {

// ===================================================================

class C_ENTER::_Internal {
 public:
};

C_ENTER::C_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER)
}
C_ENTER::C_ENTER(const C_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.isobserver_){}
    , decltype(_impl_.isexpose_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    _this->_impl_.roomid_.Set(from._internal_roomid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sessionid_, &from._impl_.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isexpose_) -
    reinterpret_cast<char*>(&_impl_.sessionid_)) + sizeof(_impl_.isexpose_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER)
}

inline void C_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.sessionid_){0}
    , decltype(_impl_.isobserver_){false}
    , decltype(_impl_.isexpose_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_ENTER::~C_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roomid_.Destroy();
  _impl_.clientid_.Destroy();
  _impl_.password_.Destroy();
  _impl_.nickname_.Destroy();
}

void C_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_.ClearToEmpty();
  _impl_.clientid_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  ::memset(&_impl_.sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isexpose_) -
      reinterpret_cast<char*>(&_impl_.sessionid_)) + sizeof(_impl_.isexpose_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER.roomId"));
        } else
          goto handle_unusual;
        continue;
      // string clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER.clientId"));
        } else
          goto handle_unusual;
        continue;
      // int32 sessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER.password"));
        } else
          goto handle_unusual;
        continue;
      // bool isObserver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isobserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER.nickname"));
        } else
          goto handle_unusual;
        continue;
      // bool isExpose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isexpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER.roomId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomid(), target);
  }

  // string clientId = 2;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER.clientId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // int32 sessionId = 3;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sessionid(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // bool isObserver = 5;
  if (this->_internal_isobserver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isobserver(), target);
  }

  // string nickname = 6;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER.nickname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nickname(), target);
  }

  // bool isExpose = 7;
  if (this->_internal_isexpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isexpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER)
  return target;
}

size_t C_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string clientId = 2;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string nickname = 6;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 sessionId = 3;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sessionid());
  }

  // bool isObserver = 5;
  if (this->_internal_isobserver() != 0) {
    total_size += 1 + 1;
  }

  // bool isExpose = 7;
  if (this->_internal_isexpose() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER::GetClassData() const { return &_class_data_; }


void C_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER*>(&to_msg);
  auto& from = static_cast<const C_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_sessionid() != 0) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_isobserver() != 0) {
    _this->_internal_set_isobserver(from._internal_isobserver());
  }
  if (from._internal_isexpose() != 0) {
    _this->_internal_set_isexpose(from._internal_isexpose());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER::CopyFrom(const C_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER::IsInitialized() const {
  return true;
}

void C_ENTER::InternalSwap(C_ENTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomid_, lhs_arena,
      &other->_impl_.roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ENTER, _impl_.isexpose_)
      + sizeof(C_ENTER::_impl_.isexpose_)
      - PROTOBUF_FIELD_OFFSET(C_ENTER, _impl_.sessionid_)>(
          reinterpret_cast<char*>(&_impl_.sessionid_),
          reinterpret_cast<char*>(&other->_impl_.sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[0]);
}

// ===================================================================

class S_ENTER::_Internal {
 public:
};

S_ENTER::S_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER)
}
S_ENTER::S_ENTER(const S_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER)
}

inline void S_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_ENTER::~S_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void S_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ENTER.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER)
  return target;
}

size_t S_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER::GetClassData() const { return &_class_data_; }


void S_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER*>(&to_msg);
  auto& from = static_cast<const S_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER::CopyFrom(const S_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER::IsInitialized() const {
  return true;
}

void S_ENTER::InternalSwap(S_ENTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[1]);
}

// ===================================================================

class C_REENTER::_Internal {
 public:
};

C_REENTER::C_REENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_REENTER)
}
C_REENTER::C_REENTER(const C_REENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_REENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_REENTER)
}

inline void C_REENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_REENTER::~C_REENTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_REENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_REENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void C_REENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_REENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_REENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_REENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_REENTER.clientId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_REENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_REENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_REENTER.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_REENTER)
  return target;
}

size_t C_REENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_REENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_REENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_REENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_REENTER::GetClassData() const { return &_class_data_; }


void C_REENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_REENTER*>(&to_msg);
  auto& from = static_cast<const C_REENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_REENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_REENTER::CopyFrom(const C_REENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_REENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_REENTER::IsInitialized() const {
  return true;
}

void C_REENTER::InternalSwap(C_REENTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_REENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[2]);
}

// ===================================================================

class S_REENTER::_Internal {
 public:
};

S_REENTER::S_REENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_REENTER)
}
S_REENTER::S_REENTER(const S_REENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_REENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_REENTER)
}

inline void S_REENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_REENTER::~S_REENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_REENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_REENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_REENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_REENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_REENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_REENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_REENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_REENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_REENTER)
  return target;
}

size_t S_REENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_REENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_REENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_REENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_REENTER::GetClassData() const { return &_class_data_; }


void S_REENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_REENTER*>(&to_msg);
  auto& from = static_cast<const S_REENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_REENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_REENTER::CopyFrom(const S_REENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_REENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_REENTER::IsInitialized() const {
  return true;
}

void S_REENTER::InternalSwap(S_REENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_REENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[3]);
}

// ===================================================================

class C_LEAVE::_Internal {
 public:
};

C_LEAVE::C_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE)
}
C_LEAVE::C_LEAVE(const C_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LEAVE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[4]);
}

// ===================================================================

class C_GET_CLIENT::_Internal {
 public:
};

C_GET_CLIENT::C_GET_CLIENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_GET_CLIENT)
}
C_GET_CLIENT::C_GET_CLIENT(const C_GET_CLIENT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_GET_CLIENT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_GET_CLIENT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GET_CLIENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_GET_CLIENT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_GET_CLIENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[5]);
}

// ===================================================================

class S_ADD_CLIENT_ClientInfo::_Internal {
 public:
};

S_ADD_CLIENT_ClientInfo::S_ADD_CLIENT_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_CLIENT.ClientInfo)
}
S_ADD_CLIENT_ClientInfo::S_ADD_CLIENT_ClientInfo(const S_ADD_CLIENT_ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_CLIENT_ClientInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.statemessage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.statemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statemessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statemessage().empty()) {
    _this->_impl_.statemessage_.Set(from._internal_statemessage(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_CLIENT.ClientInfo)
}

inline void S_ADD_CLIENT_ClientInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.statemessage_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.statemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statemessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_ADD_CLIENT_ClientInfo::~S_ADD_CLIENT_ClientInfo() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_CLIENT.ClientInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_CLIENT_ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.statemessage_.Destroy();
}

void S_ADD_CLIENT_ClientInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_CLIENT_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_CLIENT.ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.statemessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_CLIENT_ClientInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ADD_CLIENT.ClientInfo.clientId"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ADD_CLIENT.ClientInfo.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string stateMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_statemessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ADD_CLIENT.ClientInfo.stateMessage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_CLIENT_ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_CLIENT.ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ADD_CLIENT.ClientInfo.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ADD_CLIENT.ClientInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string stateMessage = 3;
  if (!this->_internal_statemessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statemessage().data(), static_cast<int>(this->_internal_statemessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ADD_CLIENT.ClientInfo.stateMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_statemessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_CLIENT.ClientInfo)
  return target;
}

size_t S_ADD_CLIENT_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_CLIENT.ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string stateMessage = 3;
  if (!this->_internal_statemessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statemessage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_CLIENT_ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_CLIENT_ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_CLIENT_ClientInfo::GetClassData() const { return &_class_data_; }


void S_ADD_CLIENT_ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_CLIENT_ClientInfo*>(&to_msg);
  auto& from = static_cast<const S_ADD_CLIENT_ClientInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_CLIENT.ClientInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_statemessage().empty()) {
    _this->_internal_set_statemessage(from._internal_statemessage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_CLIENT_ClientInfo::CopyFrom(const S_ADD_CLIENT_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_CLIENT.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_CLIENT_ClientInfo::IsInitialized() const {
  return true;
}

void S_ADD_CLIENT_ClientInfo::InternalSwap(S_ADD_CLIENT_ClientInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.statemessage_, lhs_arena,
      &other->_impl_.statemessage_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_CLIENT_ClientInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[6]);
}

// ===================================================================

class S_ADD_CLIENT::_Internal {
 public:
};

S_ADD_CLIENT::S_ADD_CLIENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_CLIENT)
}
S_ADD_CLIENT::S_ADD_CLIENT(const S_ADD_CLIENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_CLIENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfos_){from._impl_.clientinfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_CLIENT)
}

inline void S_ADD_CLIENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ADD_CLIENT::~S_ADD_CLIENT() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_CLIENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_CLIENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientinfos_.~RepeatedPtrField();
}

void S_ADD_CLIENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_CLIENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_CLIENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientinfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_CLIENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.S_ADD_CLIENT.ClientInfo clientInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clientinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_CLIENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_CLIENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.S_ADD_CLIENT.ClientInfo clientInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clientinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_clientinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_CLIENT)
  return target;
}

size_t S_ADD_CLIENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_CLIENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.S_ADD_CLIENT.ClientInfo clientInfos = 1;
  total_size += 1UL * this->_internal_clientinfos_size();
  for (const auto& msg : this->_impl_.clientinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_CLIENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_CLIENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_CLIENT::GetClassData() const { return &_class_data_; }


void S_ADD_CLIENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_CLIENT*>(&to_msg);
  auto& from = static_cast<const S_ADD_CLIENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_CLIENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clientinfos_.MergeFrom(from._impl_.clientinfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_CLIENT::CopyFrom(const S_ADD_CLIENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_CLIENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_CLIENT::IsInitialized() const {
  return true;
}

void S_ADD_CLIENT::InternalSwap(S_ADD_CLIENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clientinfos_.InternalSwap(&other->_impl_.clientinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_CLIENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[7]);
}

// ===================================================================

class S_REMOVE_CLIENT::_Internal {
 public:
};

S_REMOVE_CLIENT::S_REMOVE_CLIENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_REMOVE_CLIENT)
}
S_REMOVE_CLIENT::S_REMOVE_CLIENT(const S_REMOVE_CLIENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_REMOVE_CLIENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientids_){from._impl_.clientids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_REMOVE_CLIENT)
}

inline void S_REMOVE_CLIENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_REMOVE_CLIENT::~S_REMOVE_CLIENT() {
  // @@protoc_insertion_point(destructor:Protocol.S_REMOVE_CLIENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_REMOVE_CLIENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientids_.~RepeatedPtrField();
}

void S_REMOVE_CLIENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_REMOVE_CLIENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_REMOVE_CLIENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_REMOVE_CLIENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string clientIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clientids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_REMOVE_CLIENT.clientIds"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_REMOVE_CLIENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_REMOVE_CLIENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string clientIds = 1;
  for (int i = 0, n = this->_internal_clientids_size(); i < n; i++) {
    const auto& s = this->_internal_clientids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_REMOVE_CLIENT.clientIds");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_REMOVE_CLIENT)
  return target;
}

size_t S_REMOVE_CLIENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_REMOVE_CLIENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string clientIds = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.clientids_.size());
  for (int i = 0, n = _impl_.clientids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.clientids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_REMOVE_CLIENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_REMOVE_CLIENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_REMOVE_CLIENT::GetClassData() const { return &_class_data_; }


void S_REMOVE_CLIENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_REMOVE_CLIENT*>(&to_msg);
  auto& from = static_cast<const S_REMOVE_CLIENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_REMOVE_CLIENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clientids_.MergeFrom(from._impl_.clientids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_REMOVE_CLIENT::CopyFrom(const S_REMOVE_CLIENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_REMOVE_CLIENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_REMOVE_CLIENT::IsInitialized() const {
  return true;
}

void S_REMOVE_CLIENT::InternalSwap(S_REMOVE_CLIENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clientids_.InternalSwap(&other->_impl_.clientids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_REMOVE_CLIENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[8]);
}

// ===================================================================

class C_SET_NICKNAME::_Internal {
 public:
};

C_SET_NICKNAME::C_SET_NICKNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SET_NICKNAME)
}
C_SET_NICKNAME::C_SET_NICKNAME(const C_SET_NICKNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SET_NICKNAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SET_NICKNAME)
}

inline void C_SET_NICKNAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_SET_NICKNAME::~C_SET_NICKNAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_SET_NICKNAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SET_NICKNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void C_SET_NICKNAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SET_NICKNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SET_NICKNAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SET_NICKNAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_SET_NICKNAME.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SET_NICKNAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SET_NICKNAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_SET_NICKNAME.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SET_NICKNAME)
  return target;
}

size_t C_SET_NICKNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SET_NICKNAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SET_NICKNAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SET_NICKNAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SET_NICKNAME::GetClassData() const { return &_class_data_; }


void C_SET_NICKNAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SET_NICKNAME*>(&to_msg);
  auto& from = static_cast<const C_SET_NICKNAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SET_NICKNAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SET_NICKNAME::CopyFrom(const C_SET_NICKNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SET_NICKNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SET_NICKNAME::IsInitialized() const {
  return true;
}

void C_SET_NICKNAME::InternalSwap(C_SET_NICKNAME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SET_NICKNAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[9]);
}

// ===================================================================

class S_SET_NICKNAME::_Internal {
 public:
};

S_SET_NICKNAME::S_SET_NICKNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SET_NICKNAME)
}
S_SET_NICKNAME::S_SET_NICKNAME(const S_SET_NICKNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SET_NICKNAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SET_NICKNAME)
}

inline void S_SET_NICKNAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SET_NICKNAME::~S_SET_NICKNAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_SET_NICKNAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SET_NICKNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SET_NICKNAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SET_NICKNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SET_NICKNAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SET_NICKNAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SET_NICKNAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SET_NICKNAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SET_NICKNAME)
  return target;
}

size_t S_SET_NICKNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SET_NICKNAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SET_NICKNAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SET_NICKNAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SET_NICKNAME::GetClassData() const { return &_class_data_; }


void S_SET_NICKNAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SET_NICKNAME*>(&to_msg);
  auto& from = static_cast<const S_SET_NICKNAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SET_NICKNAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SET_NICKNAME::CopyFrom(const S_SET_NICKNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SET_NICKNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SET_NICKNAME::IsInitialized() const {
  return true;
}

void S_SET_NICKNAME::InternalSwap(S_SET_NICKNAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SET_NICKNAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[10]);
}

// ===================================================================

class S_SET_NICKNAME_NOTICE::_Internal {
 public:
};

S_SET_NICKNAME_NOTICE::S_SET_NICKNAME_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SET_NICKNAME_NOTICE)
}
S_SET_NICKNAME_NOTICE::S_SET_NICKNAME_NOTICE(const S_SET_NICKNAME_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SET_NICKNAME_NOTICE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SET_NICKNAME_NOTICE)
}

inline void S_SET_NICKNAME_NOTICE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_SET_NICKNAME_NOTICE::~S_SET_NICKNAME_NOTICE() {
  // @@protoc_insertion_point(destructor:Protocol.S_SET_NICKNAME_NOTICE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SET_NICKNAME_NOTICE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.nickname_.Destroy();
}

void S_SET_NICKNAME_NOTICE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SET_NICKNAME_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SET_NICKNAME_NOTICE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SET_NICKNAME_NOTICE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_SET_NICKNAME_NOTICE.clientId"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_SET_NICKNAME_NOTICE.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SET_NICKNAME_NOTICE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SET_NICKNAME_NOTICE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_SET_NICKNAME_NOTICE.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_SET_NICKNAME_NOTICE.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SET_NICKNAME_NOTICE)
  return target;
}

size_t S_SET_NICKNAME_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SET_NICKNAME_NOTICE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SET_NICKNAME_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SET_NICKNAME_NOTICE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SET_NICKNAME_NOTICE::GetClassData() const { return &_class_data_; }


void S_SET_NICKNAME_NOTICE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SET_NICKNAME_NOTICE*>(&to_msg);
  auto& from = static_cast<const S_SET_NICKNAME_NOTICE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SET_NICKNAME_NOTICE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SET_NICKNAME_NOTICE::CopyFrom(const S_SET_NICKNAME_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SET_NICKNAME_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SET_NICKNAME_NOTICE::IsInitialized() const {
  return true;
}

void S_SET_NICKNAME_NOTICE::InternalSwap(S_SET_NICKNAME_NOTICE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SET_NICKNAME_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[11]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    _this->_impl_.chat_.Set(from._internal_chat(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

inline void C_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_.Destroy();
}

void C_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat = 1;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.chat");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat = 1;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT::GetClassData() const { return &_class_data_; }


void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHAT*>(&to_msg);
  auto& from = static_cast<const C_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat().empty()) {
    _this->_internal_set_chat(from._internal_chat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_, lhs_arena,
      &other->_impl_.chat_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[12]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.chat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    _this->_impl_.chat_.Set(from._internal_chat(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

inline void S_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.chat_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.chat_.Destroy();
}

void S_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.chat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.clientId"));
        } else
          goto handle_unusual;
        continue;
      // string chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string chat = 2;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.chat");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string chat = 2;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT::GetClassData() const { return &_class_data_; }


void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CHAT*>(&to_msg);
  auto& from = static_cast<const S_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_chat().empty()) {
    _this->_internal_set_chat(from._internal_chat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_, lhs_arena,
      &other->_impl_.chat_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[13]);
}

// ===================================================================

class S_DISCONNECT::_Internal {
 public:
};

S_DISCONNECT::S_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DISCONNECT)
}
S_DISCONNECT::S_DISCONNECT(const S_DISCONNECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DISCONNECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DISCONNECT)
}

inline void S_DISCONNECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_DISCONNECT::~S_DISCONNECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_DISCONNECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DISCONNECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void S_DISCONNECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DISCONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DISCONNECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DISCONNECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_DISCONNECT.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DISCONNECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DISCONNECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_DISCONNECT.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DISCONNECT)
  return target;
}

size_t S_DISCONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DISCONNECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DISCONNECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DISCONNECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DISCONNECT::GetClassData() const { return &_class_data_; }


void S_DISCONNECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DISCONNECT*>(&to_msg);
  auto& from = static_cast<const S_DISCONNECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DISCONNECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DISCONNECT::CopyFrom(const S_DISCONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DISCONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DISCONNECT::IsInitialized() const {
  return true;
}

void S_DISCONNECT::InternalSwap(S_DISCONNECT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DISCONNECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[14]);
}

// ===================================================================

class C_WILDCARD::_Internal {
 public:
};

C_WILDCARD::C_WILDCARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_WILDCARD)
}
C_WILDCARD::C_WILDCARD(const C_WILDCARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_WILDCARD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_WILDCARD)
}

inline void C_WILDCARD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_WILDCARD::~C_WILDCARD() {
  // @@protoc_insertion_point(destructor:Protocol.C_WILDCARD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_WILDCARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void C_WILDCARD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_WILDCARD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_WILDCARD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_WILDCARD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_WILDCARD.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_WILDCARD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_WILDCARD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_WILDCARD.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_WILDCARD)
  return target;
}

size_t C_WILDCARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_WILDCARD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_WILDCARD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_WILDCARD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_WILDCARD::GetClassData() const { return &_class_data_; }


void C_WILDCARD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_WILDCARD*>(&to_msg);
  auto& from = static_cast<const C_WILDCARD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_WILDCARD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_WILDCARD::CopyFrom(const C_WILDCARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_WILDCARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_WILDCARD::IsInitialized() const {
  return true;
}

void C_WILDCARD::InternalSwap(C_WILDCARD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_WILDCARD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[15]);
}

// ===================================================================

class S_WILDCARD::_Internal {
 public:
};

S_WILDCARD::S_WILDCARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_WILDCARD)
}
S_WILDCARD::S_WILDCARD(const S_WILDCARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_WILDCARD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_WILDCARD)
}

inline void S_WILDCARD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_WILDCARD::~S_WILDCARD() {
  // @@protoc_insertion_point(destructor:Protocol.S_WILDCARD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_WILDCARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void S_WILDCARD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_WILDCARD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_WILDCARD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_WILDCARD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_WILDCARD.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_WILDCARD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_WILDCARD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_WILDCARD.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_WILDCARD)
  return target;
}

size_t S_WILDCARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_WILDCARD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_WILDCARD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_WILDCARD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_WILDCARD::GetClassData() const { return &_class_data_; }


void S_WILDCARD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_WILDCARD*>(&to_msg);
  auto& from = static_cast<const S_WILDCARD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_WILDCARD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_WILDCARD::CopyFrom(const S_WILDCARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_WILDCARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_WILDCARD::IsInitialized() const {
  return true;
}

void S_WILDCARD::InternalSwap(S_WILDCARD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_WILDCARD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[16]);
}

// ===================================================================

C_WILDCARD_MAP_DataEntry_DoNotUse::C_WILDCARD_MAP_DataEntry_DoNotUse() {}
C_WILDCARD_MAP_DataEntry_DoNotUse::C_WILDCARD_MAP_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void C_WILDCARD_MAP_DataEntry_DoNotUse::MergeFrom(const C_WILDCARD_MAP_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata C_WILDCARD_MAP_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[17]);
}

// ===================================================================

class C_WILDCARD_MAP::_Internal {
 public:
};

C_WILDCARD_MAP::C_WILDCARD_MAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &C_WILDCARD_MAP::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.C_WILDCARD_MAP)
}
C_WILDCARD_MAP::C_WILDCARD_MAP(const C_WILDCARD_MAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_WILDCARD_MAP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_WILDCARD_MAP)
}

inline void C_WILDCARD_MAP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_WILDCARD_MAP::~C_WILDCARD_MAP() {
  // @@protoc_insertion_point(destructor:Protocol.C_WILDCARD_MAP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void C_WILDCARD_MAP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
}

void C_WILDCARD_MAP::ArenaDtor(void* object) {
  C_WILDCARD_MAP* _this = reinterpret_cast< C_WILDCARD_MAP* >(object);
  _this->_impl_.data_.Destruct();
}
void C_WILDCARD_MAP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_WILDCARD_MAP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_WILDCARD_MAP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_WILDCARD_MAP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_WILDCARD_MAP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_WILDCARD_MAP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // map<string, string> data = 2;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = C_WILDCARD_MAP_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Protocol.C_WILDCARD_MAP.DataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Protocol.C_WILDCARD_MAP.DataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_WILDCARD_MAP)
  return target;
}

size_t C_WILDCARD_MAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_WILDCARD_MAP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += C_WILDCARD_MAP_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_WILDCARD_MAP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_WILDCARD_MAP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_WILDCARD_MAP::GetClassData() const { return &_class_data_; }


void C_WILDCARD_MAP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_WILDCARD_MAP*>(&to_msg);
  auto& from = static_cast<const C_WILDCARD_MAP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_WILDCARD_MAP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_WILDCARD_MAP::CopyFrom(const C_WILDCARD_MAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_WILDCARD_MAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_WILDCARD_MAP::IsInitialized() const {
  return true;
}

void C_WILDCARD_MAP::InternalSwap(C_WILDCARD_MAP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_WILDCARD_MAP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[18]);
}

// ===================================================================

S_WILDCARD_MAP_DataEntry_DoNotUse::S_WILDCARD_MAP_DataEntry_DoNotUse() {}
S_WILDCARD_MAP_DataEntry_DoNotUse::S_WILDCARD_MAP_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void S_WILDCARD_MAP_DataEntry_DoNotUse::MergeFrom(const S_WILDCARD_MAP_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata S_WILDCARD_MAP_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[19]);
}

// ===================================================================

class S_WILDCARD_MAP::_Internal {
 public:
};

S_WILDCARD_MAP::S_WILDCARD_MAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &S_WILDCARD_MAP::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.S_WILDCARD_MAP)
}
S_WILDCARD_MAP::S_WILDCARD_MAP(const S_WILDCARD_MAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_WILDCARD_MAP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_WILDCARD_MAP)
}

inline void S_WILDCARD_MAP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_WILDCARD_MAP::~S_WILDCARD_MAP() {
  // @@protoc_insertion_point(destructor:Protocol.S_WILDCARD_MAP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void S_WILDCARD_MAP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
}

void S_WILDCARD_MAP::ArenaDtor(void* object) {
  S_WILDCARD_MAP* _this = reinterpret_cast< S_WILDCARD_MAP* >(object);
  _this->_impl_.data_.Destruct();
}
void S_WILDCARD_MAP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_WILDCARD_MAP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_WILDCARD_MAP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_WILDCARD_MAP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_WILDCARD_MAP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_WILDCARD_MAP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // map<string, string> data = 2;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = S_WILDCARD_MAP_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Protocol.S_WILDCARD_MAP.DataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Protocol.S_WILDCARD_MAP.DataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_WILDCARD_MAP)
  return target;
}

size_t S_WILDCARD_MAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_WILDCARD_MAP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += S_WILDCARD_MAP_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_WILDCARD_MAP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_WILDCARD_MAP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_WILDCARD_MAP::GetClassData() const { return &_class_data_; }


void S_WILDCARD_MAP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_WILDCARD_MAP*>(&to_msg);
  auto& from = static_cast<const S_WILDCARD_MAP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_WILDCARD_MAP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_WILDCARD_MAP::CopyFrom(const S_WILDCARD_MAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_WILDCARD_MAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_WILDCARD_MAP::IsInitialized() const {
  return true;
}

void S_WILDCARD_MAP::InternalSwap(S_WILDCARD_MAP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_WILDCARD_MAP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f000_5fCommon_2eproto_getter, &descriptor_table_Packet_5f000_5fCommon_2eproto_once,
      file_level_metadata_Packet_5f000_5fCommon_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_REENTER*
Arena::CreateMaybeMessage< ::Protocol::C_REENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_REENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_REENTER*
Arena::CreateMaybeMessage< ::Protocol::S_REENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_REENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_GET_CLIENT*
Arena::CreateMaybeMessage< ::Protocol::C_GET_CLIENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_GET_CLIENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_CLIENT_ClientInfo*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_CLIENT_ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_CLIENT_ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_CLIENT*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_CLIENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_CLIENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_REMOVE_CLIENT*
Arena::CreateMaybeMessage< ::Protocol::S_REMOVE_CLIENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_REMOVE_CLIENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SET_NICKNAME*
Arena::CreateMaybeMessage< ::Protocol::C_SET_NICKNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SET_NICKNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SET_NICKNAME*
Arena::CreateMaybeMessage< ::Protocol::S_SET_NICKNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SET_NICKNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SET_NICKNAME_NOTICE*
Arena::CreateMaybeMessage< ::Protocol::S_SET_NICKNAME_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SET_NICKNAME_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DISCONNECT*
Arena::CreateMaybeMessage< ::Protocol::S_DISCONNECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DISCONNECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_WILDCARD*
Arena::CreateMaybeMessage< ::Protocol::C_WILDCARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_WILDCARD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_WILDCARD*
Arena::CreateMaybeMessage< ::Protocol::S_WILDCARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_WILDCARD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_WILDCARD_MAP_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_WILDCARD_MAP*
Arena::CreateMaybeMessage< ::Protocol::C_WILDCARD_MAP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_WILDCARD_MAP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_WILDCARD_MAP_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_WILDCARD_MAP*
Arena::CreateMaybeMessage< ::Protocol::S_WILDCARD_MAP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_WILDCARD_MAP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
