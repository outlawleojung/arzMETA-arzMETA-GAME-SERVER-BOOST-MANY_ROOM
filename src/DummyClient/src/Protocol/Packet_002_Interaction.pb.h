// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_002_Interaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fInteraction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fInteraction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f002_5fInteraction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f002_5fInteraction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f002_5fInteraction_2eproto;
namespace Protocol {
class C_INTERACTION_GET_ITEMS;
struct C_INTERACTION_GET_ITEMSDefaultTypeInternal;
extern C_INTERACTION_GET_ITEMSDefaultTypeInternal _C_INTERACTION_GET_ITEMS_default_instance_;
class C_INTERACTION_REMOVE_ITEM;
struct C_INTERACTION_REMOVE_ITEMDefaultTypeInternal;
extern C_INTERACTION_REMOVE_ITEMDefaultTypeInternal _C_INTERACTION_REMOVE_ITEM_default_instance_;
class C_INTERACTION_SET_ITEM;
struct C_INTERACTION_SET_ITEMDefaultTypeInternal;
extern C_INTERACTION_SET_ITEMDefaultTypeInternal _C_INTERACTION_SET_ITEM_default_instance_;
class S_INTERACTION_GET_ITEMS;
struct S_INTERACTION_GET_ITEMSDefaultTypeInternal;
extern S_INTERACTION_GET_ITEMSDefaultTypeInternal _S_INTERACTION_GET_ITEMS_default_instance_;
class S_INTERACTION_GET_ITEMS_Item;
struct S_INTERACTION_GET_ITEMS_ItemDefaultTypeInternal;
extern S_INTERACTION_GET_ITEMS_ItemDefaultTypeInternal _S_INTERACTION_GET_ITEMS_Item_default_instance_;
class S_INTERACTION_REMOVE_ITEM;
struct S_INTERACTION_REMOVE_ITEMDefaultTypeInternal;
extern S_INTERACTION_REMOVE_ITEMDefaultTypeInternal _S_INTERACTION_REMOVE_ITEM_default_instance_;
class S_INTERACTION_REMOVE_ITEM_NOTICE;
struct S_INTERACTION_REMOVE_ITEM_NOTICEDefaultTypeInternal;
extern S_INTERACTION_REMOVE_ITEM_NOTICEDefaultTypeInternal _S_INTERACTION_REMOVE_ITEM_NOTICE_default_instance_;
class S_INTERACTION_SET_ITEM;
struct S_INTERACTION_SET_ITEMDefaultTypeInternal;
extern S_INTERACTION_SET_ITEMDefaultTypeInternal _S_INTERACTION_SET_ITEM_default_instance_;
class S_INTERACTION_SET_ITEM_NOTICE;
struct S_INTERACTION_SET_ITEM_NOTICEDefaultTypeInternal;
extern S_INTERACTION_SET_ITEM_NOTICEDefaultTypeInternal _S_INTERACTION_SET_ITEM_NOTICE_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_INTERACTION_GET_ITEMS* Arena::CreateMaybeMessage<::Protocol::C_INTERACTION_GET_ITEMS>(Arena*);
template<> ::Protocol::C_INTERACTION_REMOVE_ITEM* Arena::CreateMaybeMessage<::Protocol::C_INTERACTION_REMOVE_ITEM>(Arena*);
template<> ::Protocol::C_INTERACTION_SET_ITEM* Arena::CreateMaybeMessage<::Protocol::C_INTERACTION_SET_ITEM>(Arena*);
template<> ::Protocol::S_INTERACTION_GET_ITEMS* Arena::CreateMaybeMessage<::Protocol::S_INTERACTION_GET_ITEMS>(Arena*);
template<> ::Protocol::S_INTERACTION_GET_ITEMS_Item* Arena::CreateMaybeMessage<::Protocol::S_INTERACTION_GET_ITEMS_Item>(Arena*);
template<> ::Protocol::S_INTERACTION_REMOVE_ITEM* Arena::CreateMaybeMessage<::Protocol::S_INTERACTION_REMOVE_ITEM>(Arena*);
template<> ::Protocol::S_INTERACTION_REMOVE_ITEM_NOTICE* Arena::CreateMaybeMessage<::Protocol::S_INTERACTION_REMOVE_ITEM_NOTICE>(Arena*);
template<> ::Protocol::S_INTERACTION_SET_ITEM* Arena::CreateMaybeMessage<::Protocol::S_INTERACTION_SET_ITEM>(Arena*);
template<> ::Protocol::S_INTERACTION_SET_ITEM_NOTICE* Arena::CreateMaybeMessage<::Protocol::S_INTERACTION_SET_ITEM_NOTICE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_INTERACTION_GET_ITEMS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_INTERACTION_GET_ITEMS) */ {
 public:
  inline C_INTERACTION_GET_ITEMS() : C_INTERACTION_GET_ITEMS(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_INTERACTION_GET_ITEMS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INTERACTION_GET_ITEMS(const C_INTERACTION_GET_ITEMS& from);
  C_INTERACTION_GET_ITEMS(C_INTERACTION_GET_ITEMS&& from) noexcept
    : C_INTERACTION_GET_ITEMS() {
    *this = ::std::move(from);
  }

  inline C_INTERACTION_GET_ITEMS& operator=(const C_INTERACTION_GET_ITEMS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INTERACTION_GET_ITEMS& operator=(C_INTERACTION_GET_ITEMS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INTERACTION_GET_ITEMS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INTERACTION_GET_ITEMS* internal_default_instance() {
    return reinterpret_cast<const C_INTERACTION_GET_ITEMS*>(
               &_C_INTERACTION_GET_ITEMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_INTERACTION_GET_ITEMS& a, C_INTERACTION_GET_ITEMS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INTERACTION_GET_ITEMS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INTERACTION_GET_ITEMS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INTERACTION_GET_ITEMS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INTERACTION_GET_ITEMS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_INTERACTION_GET_ITEMS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_INTERACTION_GET_ITEMS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INTERACTION_GET_ITEMS";
  }
  protected:
  explicit C_INTERACTION_GET_ITEMS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_INTERACTION_GET_ITEMS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class S_INTERACTION_GET_ITEMS_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INTERACTION_GET_ITEMS.Item) */ {
 public:
  inline S_INTERACTION_GET_ITEMS_Item() : S_INTERACTION_GET_ITEMS_Item(nullptr) {}
  ~S_INTERACTION_GET_ITEMS_Item() override;
  explicit PROTOBUF_CONSTEXPR S_INTERACTION_GET_ITEMS_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INTERACTION_GET_ITEMS_Item(const S_INTERACTION_GET_ITEMS_Item& from);
  S_INTERACTION_GET_ITEMS_Item(S_INTERACTION_GET_ITEMS_Item&& from) noexcept
    : S_INTERACTION_GET_ITEMS_Item() {
    *this = ::std::move(from);
  }

  inline S_INTERACTION_GET_ITEMS_Item& operator=(const S_INTERACTION_GET_ITEMS_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INTERACTION_GET_ITEMS_Item& operator=(S_INTERACTION_GET_ITEMS_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INTERACTION_GET_ITEMS_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INTERACTION_GET_ITEMS_Item* internal_default_instance() {
    return reinterpret_cast<const S_INTERACTION_GET_ITEMS_Item*>(
               &_S_INTERACTION_GET_ITEMS_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_INTERACTION_GET_ITEMS_Item& a, S_INTERACTION_GET_ITEMS_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INTERACTION_GET_ITEMS_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INTERACTION_GET_ITEMS_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INTERACTION_GET_ITEMS_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INTERACTION_GET_ITEMS_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INTERACTION_GET_ITEMS_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INTERACTION_GET_ITEMS_Item& from) {
    S_INTERACTION_GET_ITEMS_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INTERACTION_GET_ITEMS_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INTERACTION_GET_ITEMS.Item";
  }
  protected:
  explicit S_INTERACTION_GET_ITEMS_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INTERACTION_GET_ITEMS.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class S_INTERACTION_GET_ITEMS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INTERACTION_GET_ITEMS) */ {
 public:
  inline S_INTERACTION_GET_ITEMS() : S_INTERACTION_GET_ITEMS(nullptr) {}
  ~S_INTERACTION_GET_ITEMS() override;
  explicit PROTOBUF_CONSTEXPR S_INTERACTION_GET_ITEMS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INTERACTION_GET_ITEMS(const S_INTERACTION_GET_ITEMS& from);
  S_INTERACTION_GET_ITEMS(S_INTERACTION_GET_ITEMS&& from) noexcept
    : S_INTERACTION_GET_ITEMS() {
    *this = ::std::move(from);
  }

  inline S_INTERACTION_GET_ITEMS& operator=(const S_INTERACTION_GET_ITEMS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INTERACTION_GET_ITEMS& operator=(S_INTERACTION_GET_ITEMS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INTERACTION_GET_ITEMS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INTERACTION_GET_ITEMS* internal_default_instance() {
    return reinterpret_cast<const S_INTERACTION_GET_ITEMS*>(
               &_S_INTERACTION_GET_ITEMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_INTERACTION_GET_ITEMS& a, S_INTERACTION_GET_ITEMS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INTERACTION_GET_ITEMS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INTERACTION_GET_ITEMS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INTERACTION_GET_ITEMS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INTERACTION_GET_ITEMS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INTERACTION_GET_ITEMS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INTERACTION_GET_ITEMS& from) {
    S_INTERACTION_GET_ITEMS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INTERACTION_GET_ITEMS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INTERACTION_GET_ITEMS";
  }
  protected:
  explicit S_INTERACTION_GET_ITEMS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_INTERACTION_GET_ITEMS_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .Protocol.S_INTERACTION_GET_ITEMS.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::S_INTERACTION_GET_ITEMS_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_INTERACTION_GET_ITEMS_Item >*
      mutable_items();
  private:
  const ::Protocol::S_INTERACTION_GET_ITEMS_Item& _internal_items(int index) const;
  ::Protocol::S_INTERACTION_GET_ITEMS_Item* _internal_add_items();
  public:
  const ::Protocol::S_INTERACTION_GET_ITEMS_Item& items(int index) const;
  ::Protocol::S_INTERACTION_GET_ITEMS_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_INTERACTION_GET_ITEMS_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_INTERACTION_GET_ITEMS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_INTERACTION_GET_ITEMS_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class C_INTERACTION_SET_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INTERACTION_SET_ITEM) */ {
 public:
  inline C_INTERACTION_SET_ITEM() : C_INTERACTION_SET_ITEM(nullptr) {}
  ~C_INTERACTION_SET_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_INTERACTION_SET_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INTERACTION_SET_ITEM(const C_INTERACTION_SET_ITEM& from);
  C_INTERACTION_SET_ITEM(C_INTERACTION_SET_ITEM&& from) noexcept
    : C_INTERACTION_SET_ITEM() {
    *this = ::std::move(from);
  }

  inline C_INTERACTION_SET_ITEM& operator=(const C_INTERACTION_SET_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INTERACTION_SET_ITEM& operator=(C_INTERACTION_SET_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INTERACTION_SET_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INTERACTION_SET_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_INTERACTION_SET_ITEM*>(
               &_C_INTERACTION_SET_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_INTERACTION_SET_ITEM& a, C_INTERACTION_SET_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INTERACTION_SET_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INTERACTION_SET_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INTERACTION_SET_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INTERACTION_SET_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_INTERACTION_SET_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_INTERACTION_SET_ITEM& from) {
    C_INTERACTION_SET_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INTERACTION_SET_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INTERACTION_SET_ITEM";
  }
  protected:
  explicit C_INTERACTION_SET_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_INTERACTION_SET_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class S_INTERACTION_SET_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INTERACTION_SET_ITEM) */ {
 public:
  inline S_INTERACTION_SET_ITEM() : S_INTERACTION_SET_ITEM(nullptr) {}
  ~S_INTERACTION_SET_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_INTERACTION_SET_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INTERACTION_SET_ITEM(const S_INTERACTION_SET_ITEM& from);
  S_INTERACTION_SET_ITEM(S_INTERACTION_SET_ITEM&& from) noexcept
    : S_INTERACTION_SET_ITEM() {
    *this = ::std::move(from);
  }

  inline S_INTERACTION_SET_ITEM& operator=(const S_INTERACTION_SET_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INTERACTION_SET_ITEM& operator=(S_INTERACTION_SET_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INTERACTION_SET_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INTERACTION_SET_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_INTERACTION_SET_ITEM*>(
               &_S_INTERACTION_SET_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_INTERACTION_SET_ITEM& a, S_INTERACTION_SET_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INTERACTION_SET_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INTERACTION_SET_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INTERACTION_SET_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INTERACTION_SET_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INTERACTION_SET_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INTERACTION_SET_ITEM& from) {
    S_INTERACTION_SET_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INTERACTION_SET_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INTERACTION_SET_ITEM";
  }
  protected:
  explicit S_INTERACTION_SET_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INTERACTION_SET_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class S_INTERACTION_SET_ITEM_NOTICE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INTERACTION_SET_ITEM_NOTICE) */ {
 public:
  inline S_INTERACTION_SET_ITEM_NOTICE() : S_INTERACTION_SET_ITEM_NOTICE(nullptr) {}
  ~S_INTERACTION_SET_ITEM_NOTICE() override;
  explicit PROTOBUF_CONSTEXPR S_INTERACTION_SET_ITEM_NOTICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INTERACTION_SET_ITEM_NOTICE(const S_INTERACTION_SET_ITEM_NOTICE& from);
  S_INTERACTION_SET_ITEM_NOTICE(S_INTERACTION_SET_ITEM_NOTICE&& from) noexcept
    : S_INTERACTION_SET_ITEM_NOTICE() {
    *this = ::std::move(from);
  }

  inline S_INTERACTION_SET_ITEM_NOTICE& operator=(const S_INTERACTION_SET_ITEM_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INTERACTION_SET_ITEM_NOTICE& operator=(S_INTERACTION_SET_ITEM_NOTICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INTERACTION_SET_ITEM_NOTICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INTERACTION_SET_ITEM_NOTICE* internal_default_instance() {
    return reinterpret_cast<const S_INTERACTION_SET_ITEM_NOTICE*>(
               &_S_INTERACTION_SET_ITEM_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_INTERACTION_SET_ITEM_NOTICE& a, S_INTERACTION_SET_ITEM_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INTERACTION_SET_ITEM_NOTICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INTERACTION_SET_ITEM_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INTERACTION_SET_ITEM_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INTERACTION_SET_ITEM_NOTICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INTERACTION_SET_ITEM_NOTICE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INTERACTION_SET_ITEM_NOTICE& from) {
    S_INTERACTION_SET_ITEM_NOTICE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INTERACTION_SET_ITEM_NOTICE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INTERACTION_SET_ITEM_NOTICE";
  }
  protected:
  explicit S_INTERACTION_SET_ITEM_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INTERACTION_SET_ITEM_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class C_INTERACTION_REMOVE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INTERACTION_REMOVE_ITEM) */ {
 public:
  inline C_INTERACTION_REMOVE_ITEM() : C_INTERACTION_REMOVE_ITEM(nullptr) {}
  ~C_INTERACTION_REMOVE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_INTERACTION_REMOVE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INTERACTION_REMOVE_ITEM(const C_INTERACTION_REMOVE_ITEM& from);
  C_INTERACTION_REMOVE_ITEM(C_INTERACTION_REMOVE_ITEM&& from) noexcept
    : C_INTERACTION_REMOVE_ITEM() {
    *this = ::std::move(from);
  }

  inline C_INTERACTION_REMOVE_ITEM& operator=(const C_INTERACTION_REMOVE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INTERACTION_REMOVE_ITEM& operator=(C_INTERACTION_REMOVE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INTERACTION_REMOVE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INTERACTION_REMOVE_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_INTERACTION_REMOVE_ITEM*>(
               &_C_INTERACTION_REMOVE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_INTERACTION_REMOVE_ITEM& a, C_INTERACTION_REMOVE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INTERACTION_REMOVE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INTERACTION_REMOVE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INTERACTION_REMOVE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INTERACTION_REMOVE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_INTERACTION_REMOVE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_INTERACTION_REMOVE_ITEM& from) {
    C_INTERACTION_REMOVE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INTERACTION_REMOVE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INTERACTION_REMOVE_ITEM";
  }
  protected:
  explicit C_INTERACTION_REMOVE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_INTERACTION_REMOVE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class S_INTERACTION_REMOVE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INTERACTION_REMOVE_ITEM) */ {
 public:
  inline S_INTERACTION_REMOVE_ITEM() : S_INTERACTION_REMOVE_ITEM(nullptr) {}
  ~S_INTERACTION_REMOVE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_INTERACTION_REMOVE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INTERACTION_REMOVE_ITEM(const S_INTERACTION_REMOVE_ITEM& from);
  S_INTERACTION_REMOVE_ITEM(S_INTERACTION_REMOVE_ITEM&& from) noexcept
    : S_INTERACTION_REMOVE_ITEM() {
    *this = ::std::move(from);
  }

  inline S_INTERACTION_REMOVE_ITEM& operator=(const S_INTERACTION_REMOVE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INTERACTION_REMOVE_ITEM& operator=(S_INTERACTION_REMOVE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INTERACTION_REMOVE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INTERACTION_REMOVE_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_INTERACTION_REMOVE_ITEM*>(
               &_S_INTERACTION_REMOVE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_INTERACTION_REMOVE_ITEM& a, S_INTERACTION_REMOVE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INTERACTION_REMOVE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INTERACTION_REMOVE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INTERACTION_REMOVE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INTERACTION_REMOVE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INTERACTION_REMOVE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INTERACTION_REMOVE_ITEM& from) {
    S_INTERACTION_REMOVE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INTERACTION_REMOVE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INTERACTION_REMOVE_ITEM";
  }
  protected:
  explicit S_INTERACTION_REMOVE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INTERACTION_REMOVE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// -------------------------------------------------------------------

class S_INTERACTION_REMOVE_ITEM_NOTICE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE) */ {
 public:
  inline S_INTERACTION_REMOVE_ITEM_NOTICE() : S_INTERACTION_REMOVE_ITEM_NOTICE(nullptr) {}
  ~S_INTERACTION_REMOVE_ITEM_NOTICE() override;
  explicit PROTOBUF_CONSTEXPR S_INTERACTION_REMOVE_ITEM_NOTICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INTERACTION_REMOVE_ITEM_NOTICE(const S_INTERACTION_REMOVE_ITEM_NOTICE& from);
  S_INTERACTION_REMOVE_ITEM_NOTICE(S_INTERACTION_REMOVE_ITEM_NOTICE&& from) noexcept
    : S_INTERACTION_REMOVE_ITEM_NOTICE() {
    *this = ::std::move(from);
  }

  inline S_INTERACTION_REMOVE_ITEM_NOTICE& operator=(const S_INTERACTION_REMOVE_ITEM_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INTERACTION_REMOVE_ITEM_NOTICE& operator=(S_INTERACTION_REMOVE_ITEM_NOTICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INTERACTION_REMOVE_ITEM_NOTICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INTERACTION_REMOVE_ITEM_NOTICE* internal_default_instance() {
    return reinterpret_cast<const S_INTERACTION_REMOVE_ITEM_NOTICE*>(
               &_S_INTERACTION_REMOVE_ITEM_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_INTERACTION_REMOVE_ITEM_NOTICE& a, S_INTERACTION_REMOVE_ITEM_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INTERACTION_REMOVE_ITEM_NOTICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INTERACTION_REMOVE_ITEM_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INTERACTION_REMOVE_ITEM_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INTERACTION_REMOVE_ITEM_NOTICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INTERACTION_REMOVE_ITEM_NOTICE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INTERACTION_REMOVE_ITEM_NOTICE& from) {
    S_INTERACTION_REMOVE_ITEM_NOTICE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INTERACTION_REMOVE_ITEM_NOTICE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE";
  }
  protected:
  explicit S_INTERACTION_REMOVE_ITEM_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fInteraction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_INTERACTION_GET_ITEMS

// -------------------------------------------------------------------

// S_INTERACTION_GET_ITEMS_Item

// string id = 1;
inline void S_INTERACTION_GET_ITEMS_Item::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& S_INTERACTION_GET_ITEMS_Item::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_GET_ITEMS.Item.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_INTERACTION_GET_ITEMS_Item::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_GET_ITEMS.Item.id)
}
inline std::string* S_INTERACTION_GET_ITEMS_Item::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_INTERACTION_GET_ITEMS.Item.id)
  return _s;
}
inline const std::string& S_INTERACTION_GET_ITEMS_Item::_internal_id() const {
  return _impl_.id_.Get();
}
inline void S_INTERACTION_GET_ITEMS_Item::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_INTERACTION_GET_ITEMS_Item::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_INTERACTION_GET_ITEMS_Item::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_INTERACTION_GET_ITEMS.Item.id)
  return _impl_.id_.Release();
}
inline void S_INTERACTION_GET_ITEMS_Item::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_INTERACTION_GET_ITEMS.Item.id)
}

// string state = 2;
inline void S_INTERACTION_GET_ITEMS_Item::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& S_INTERACTION_GET_ITEMS_Item::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_GET_ITEMS.Item.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_INTERACTION_GET_ITEMS_Item::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_GET_ITEMS.Item.state)
}
inline std::string* S_INTERACTION_GET_ITEMS_Item::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_INTERACTION_GET_ITEMS.Item.state)
  return _s;
}
inline const std::string& S_INTERACTION_GET_ITEMS_Item::_internal_state() const {
  return _impl_.state_.Get();
}
inline void S_INTERACTION_GET_ITEMS_Item::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* S_INTERACTION_GET_ITEMS_Item::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* S_INTERACTION_GET_ITEMS_Item::release_state() {
  // @@protoc_insertion_point(field_release:Protocol.S_INTERACTION_GET_ITEMS.Item.state)
  return _impl_.state_.Release();
}
inline void S_INTERACTION_GET_ITEMS_Item::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_INTERACTION_GET_ITEMS.Item.state)
}

// -------------------------------------------------------------------

// S_INTERACTION_GET_ITEMS

// repeated .Protocol.S_INTERACTION_GET_ITEMS.Item items = 1;
inline int S_INTERACTION_GET_ITEMS::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_INTERACTION_GET_ITEMS::items_size() const {
  return _internal_items_size();
}
inline void S_INTERACTION_GET_ITEMS::clear_items() {
  _impl_.items_.Clear();
}
inline ::Protocol::S_INTERACTION_GET_ITEMS_Item* S_INTERACTION_GET_ITEMS::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_INTERACTION_GET_ITEMS.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_INTERACTION_GET_ITEMS_Item >*
S_INTERACTION_GET_ITEMS::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_INTERACTION_GET_ITEMS.items)
  return &_impl_.items_;
}
inline const ::Protocol::S_INTERACTION_GET_ITEMS_Item& S_INTERACTION_GET_ITEMS::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Protocol::S_INTERACTION_GET_ITEMS_Item& S_INTERACTION_GET_ITEMS::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_GET_ITEMS.items)
  return _internal_items(index);
}
inline ::Protocol::S_INTERACTION_GET_ITEMS_Item* S_INTERACTION_GET_ITEMS::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Protocol::S_INTERACTION_GET_ITEMS_Item* S_INTERACTION_GET_ITEMS::add_items() {
  ::Protocol::S_INTERACTION_GET_ITEMS_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_INTERACTION_GET_ITEMS.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_INTERACTION_GET_ITEMS_Item >&
S_INTERACTION_GET_ITEMS::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_INTERACTION_GET_ITEMS.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// C_INTERACTION_SET_ITEM

// string id = 1;
inline void C_INTERACTION_SET_ITEM::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C_INTERACTION_SET_ITEM::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INTERACTION_SET_ITEM.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_INTERACTION_SET_ITEM::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_INTERACTION_SET_ITEM.id)
}
inline std::string* C_INTERACTION_SET_ITEM::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INTERACTION_SET_ITEM.id)
  return _s;
}
inline const std::string& C_INTERACTION_SET_ITEM::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C_INTERACTION_SET_ITEM::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_INTERACTION_SET_ITEM::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_INTERACTION_SET_ITEM::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_INTERACTION_SET_ITEM.id)
  return _impl_.id_.Release();
}
inline void C_INTERACTION_SET_ITEM::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INTERACTION_SET_ITEM.id)
}

// string state = 2;
inline void C_INTERACTION_SET_ITEM::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& C_INTERACTION_SET_ITEM::state() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INTERACTION_SET_ITEM.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_INTERACTION_SET_ITEM::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_INTERACTION_SET_ITEM.state)
}
inline std::string* C_INTERACTION_SET_ITEM::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INTERACTION_SET_ITEM.state)
  return _s;
}
inline const std::string& C_INTERACTION_SET_ITEM::_internal_state() const {
  return _impl_.state_.Get();
}
inline void C_INTERACTION_SET_ITEM::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* C_INTERACTION_SET_ITEM::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* C_INTERACTION_SET_ITEM::release_state() {
  // @@protoc_insertion_point(field_release:Protocol.C_INTERACTION_SET_ITEM.state)
  return _impl_.state_.Release();
}
inline void C_INTERACTION_SET_ITEM::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INTERACTION_SET_ITEM.state)
}

// -------------------------------------------------------------------

// S_INTERACTION_SET_ITEM

// bool success = 1;
inline void S_INTERACTION_SET_ITEM::clear_success() {
  _impl_.success_ = false;
}
inline bool S_INTERACTION_SET_ITEM::_internal_success() const {
  return _impl_.success_;
}
inline bool S_INTERACTION_SET_ITEM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_SET_ITEM.success)
  return _internal_success();
}
inline void S_INTERACTION_SET_ITEM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_INTERACTION_SET_ITEM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_SET_ITEM.success)
}

// -------------------------------------------------------------------

// S_INTERACTION_SET_ITEM_NOTICE

// string id = 1;
inline void S_INTERACTION_SET_ITEM_NOTICE::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& S_INTERACTION_SET_ITEM_NOTICE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_SET_ITEM_NOTICE.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_INTERACTION_SET_ITEM_NOTICE::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_SET_ITEM_NOTICE.id)
}
inline std::string* S_INTERACTION_SET_ITEM_NOTICE::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_INTERACTION_SET_ITEM_NOTICE.id)
  return _s;
}
inline const std::string& S_INTERACTION_SET_ITEM_NOTICE::_internal_id() const {
  return _impl_.id_.Get();
}
inline void S_INTERACTION_SET_ITEM_NOTICE::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_INTERACTION_SET_ITEM_NOTICE::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_INTERACTION_SET_ITEM_NOTICE::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_INTERACTION_SET_ITEM_NOTICE.id)
  return _impl_.id_.Release();
}
inline void S_INTERACTION_SET_ITEM_NOTICE::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_INTERACTION_SET_ITEM_NOTICE.id)
}

// string state = 2;
inline void S_INTERACTION_SET_ITEM_NOTICE::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& S_INTERACTION_SET_ITEM_NOTICE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_SET_ITEM_NOTICE.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_INTERACTION_SET_ITEM_NOTICE::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_SET_ITEM_NOTICE.state)
}
inline std::string* S_INTERACTION_SET_ITEM_NOTICE::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_INTERACTION_SET_ITEM_NOTICE.state)
  return _s;
}
inline const std::string& S_INTERACTION_SET_ITEM_NOTICE::_internal_state() const {
  return _impl_.state_.Get();
}
inline void S_INTERACTION_SET_ITEM_NOTICE::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* S_INTERACTION_SET_ITEM_NOTICE::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* S_INTERACTION_SET_ITEM_NOTICE::release_state() {
  // @@protoc_insertion_point(field_release:Protocol.S_INTERACTION_SET_ITEM_NOTICE.state)
  return _impl_.state_.Release();
}
inline void S_INTERACTION_SET_ITEM_NOTICE::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_INTERACTION_SET_ITEM_NOTICE.state)
}

// -------------------------------------------------------------------

// C_INTERACTION_REMOVE_ITEM

// string id = 1;
inline void C_INTERACTION_REMOVE_ITEM::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C_INTERACTION_REMOVE_ITEM::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INTERACTION_REMOVE_ITEM.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_INTERACTION_REMOVE_ITEM::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_INTERACTION_REMOVE_ITEM.id)
}
inline std::string* C_INTERACTION_REMOVE_ITEM::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INTERACTION_REMOVE_ITEM.id)
  return _s;
}
inline const std::string& C_INTERACTION_REMOVE_ITEM::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C_INTERACTION_REMOVE_ITEM::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_INTERACTION_REMOVE_ITEM::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_INTERACTION_REMOVE_ITEM::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_INTERACTION_REMOVE_ITEM.id)
  return _impl_.id_.Release();
}
inline void C_INTERACTION_REMOVE_ITEM::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INTERACTION_REMOVE_ITEM.id)
}

// -------------------------------------------------------------------

// S_INTERACTION_REMOVE_ITEM

// bool success = 1;
inline void S_INTERACTION_REMOVE_ITEM::clear_success() {
  _impl_.success_ = false;
}
inline bool S_INTERACTION_REMOVE_ITEM::_internal_success() const {
  return _impl_.success_;
}
inline bool S_INTERACTION_REMOVE_ITEM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_REMOVE_ITEM.success)
  return _internal_success();
}
inline void S_INTERACTION_REMOVE_ITEM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_INTERACTION_REMOVE_ITEM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_REMOVE_ITEM.success)
}

// -------------------------------------------------------------------

// S_INTERACTION_REMOVE_ITEM_NOTICE

// string id = 1;
inline void S_INTERACTION_REMOVE_ITEM_NOTICE::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& S_INTERACTION_REMOVE_ITEM_NOTICE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_INTERACTION_REMOVE_ITEM_NOTICE::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE.id)
}
inline std::string* S_INTERACTION_REMOVE_ITEM_NOTICE::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE.id)
  return _s;
}
inline const std::string& S_INTERACTION_REMOVE_ITEM_NOTICE::_internal_id() const {
  return _impl_.id_.Get();
}
inline void S_INTERACTION_REMOVE_ITEM_NOTICE::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_INTERACTION_REMOVE_ITEM_NOTICE::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_INTERACTION_REMOVE_ITEM_NOTICE::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE.id)
  return _impl_.id_.Release();
}
inline void S_INTERACTION_REMOVE_ITEM_NOTICE::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_INTERACTION_REMOVE_ITEM_NOTICE.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fInteraction_2eproto
