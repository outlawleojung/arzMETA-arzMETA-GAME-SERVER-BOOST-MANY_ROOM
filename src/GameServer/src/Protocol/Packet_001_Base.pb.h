// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_001_Base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f001_5fBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f001_5fBase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f001_5fBase_2eproto;
namespace Protocol {
class C_BASE_GET_OBJECT;
struct C_BASE_GET_OBJECTDefaultTypeInternal;
extern C_BASE_GET_OBJECTDefaultTypeInternal _C_BASE_GET_OBJECT_default_instance_;
class C_BASE_INSTANTIATE_OBJECT;
struct C_BASE_INSTANTIATE_OBJECTDefaultTypeInternal;
extern C_BASE_INSTANTIATE_OBJECTDefaultTypeInternal _C_BASE_INSTANTIATE_OBJECT_default_instance_;
class C_BASE_SET_ANIMATION;
struct C_BASE_SET_ANIMATIONDefaultTypeInternal;
extern C_BASE_SET_ANIMATIONDefaultTypeInternal _C_BASE_SET_ANIMATION_default_instance_;
class C_BASE_SET_ANIMATION_ONCE;
struct C_BASE_SET_ANIMATION_ONCEDefaultTypeInternal;
extern C_BASE_SET_ANIMATION_ONCEDefaultTypeInternal _C_BASE_SET_ANIMATION_ONCE_default_instance_;
class C_BASE_SET_OBJECT_DATA;
struct C_BASE_SET_OBJECT_DATADefaultTypeInternal;
extern C_BASE_SET_OBJECT_DATADefaultTypeInternal _C_BASE_SET_OBJECT_DATA_default_instance_;
class C_BASE_SET_SCENE;
struct C_BASE_SET_SCENEDefaultTypeInternal;
extern C_BASE_SET_SCENEDefaultTypeInternal _C_BASE_SET_SCENE_default_instance_;
class C_BASE_SET_TRANSFORM;
struct C_BASE_SET_TRANSFORMDefaultTypeInternal;
extern C_BASE_SET_TRANSFORMDefaultTypeInternal _C_BASE_SET_TRANSFORM_default_instance_;
class S_BASE_ADD_OBJECT;
struct S_BASE_ADD_OBJECTDefaultTypeInternal;
extern S_BASE_ADD_OBJECTDefaultTypeInternal _S_BASE_ADD_OBJECT_default_instance_;
class S_BASE_ADD_OBJECT_GameObjectInfo;
struct S_BASE_ADD_OBJECT_GameObjectInfoDefaultTypeInternal;
extern S_BASE_ADD_OBJECT_GameObjectInfoDefaultTypeInternal _S_BASE_ADD_OBJECT_GameObjectInfo_default_instance_;
class S_BASE_INSTANTIATE_OBJECT;
struct S_BASE_INSTANTIATE_OBJECTDefaultTypeInternal;
extern S_BASE_INSTANTIATE_OBJECTDefaultTypeInternal _S_BASE_INSTANTIATE_OBJECT_default_instance_;
class S_BASE_REMOVE_OBJECT;
struct S_BASE_REMOVE_OBJECTDefaultTypeInternal;
extern S_BASE_REMOVE_OBJECTDefaultTypeInternal _S_BASE_REMOVE_OBJECT_default_instance_;
class S_BASE_SET_ANIMATION;
struct S_BASE_SET_ANIMATIONDefaultTypeInternal;
extern S_BASE_SET_ANIMATIONDefaultTypeInternal _S_BASE_SET_ANIMATION_default_instance_;
class S_BASE_SET_ANIMATION_ONCE;
struct S_BASE_SET_ANIMATION_ONCEDefaultTypeInternal;
extern S_BASE_SET_ANIMATION_ONCEDefaultTypeInternal _S_BASE_SET_ANIMATION_ONCE_default_instance_;
class S_BASE_SET_OBJECT_DATA;
struct S_BASE_SET_OBJECT_DATADefaultTypeInternal;
extern S_BASE_SET_OBJECT_DATADefaultTypeInternal _S_BASE_SET_OBJECT_DATA_default_instance_;
class S_BASE_SET_OBJECT_DATA_NOTICE;
struct S_BASE_SET_OBJECT_DATA_NOTICEDefaultTypeInternal;
extern S_BASE_SET_OBJECT_DATA_NOTICEDefaultTypeInternal _S_BASE_SET_OBJECT_DATA_NOTICE_default_instance_;
class S_BASE_SET_SCENE;
struct S_BASE_SET_SCENEDefaultTypeInternal;
extern S_BASE_SET_SCENEDefaultTypeInternal _S_BASE_SET_SCENE_default_instance_;
class S_BASE_SET_TRANSFORM;
struct S_BASE_SET_TRANSFORMDefaultTypeInternal;
extern S_BASE_SET_TRANSFORMDefaultTypeInternal _S_BASE_SET_TRANSFORM_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_BASE_GET_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_BASE_GET_OBJECT>(Arena*);
template<> ::Protocol::C_BASE_INSTANTIATE_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_BASE_INSTANTIATE_OBJECT>(Arena*);
template<> ::Protocol::C_BASE_SET_ANIMATION* Arena::CreateMaybeMessage<::Protocol::C_BASE_SET_ANIMATION>(Arena*);
template<> ::Protocol::C_BASE_SET_ANIMATION_ONCE* Arena::CreateMaybeMessage<::Protocol::C_BASE_SET_ANIMATION_ONCE>(Arena*);
template<> ::Protocol::C_BASE_SET_OBJECT_DATA* Arena::CreateMaybeMessage<::Protocol::C_BASE_SET_OBJECT_DATA>(Arena*);
template<> ::Protocol::C_BASE_SET_SCENE* Arena::CreateMaybeMessage<::Protocol::C_BASE_SET_SCENE>(Arena*);
template<> ::Protocol::C_BASE_SET_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::C_BASE_SET_TRANSFORM>(Arena*);
template<> ::Protocol::S_BASE_ADD_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_BASE_ADD_OBJECT>(Arena*);
template<> ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* Arena::CreateMaybeMessage<::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo>(Arena*);
template<> ::Protocol::S_BASE_INSTANTIATE_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_BASE_INSTANTIATE_OBJECT>(Arena*);
template<> ::Protocol::S_BASE_REMOVE_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_BASE_REMOVE_OBJECT>(Arena*);
template<> ::Protocol::S_BASE_SET_ANIMATION* Arena::CreateMaybeMessage<::Protocol::S_BASE_SET_ANIMATION>(Arena*);
template<> ::Protocol::S_BASE_SET_ANIMATION_ONCE* Arena::CreateMaybeMessage<::Protocol::S_BASE_SET_ANIMATION_ONCE>(Arena*);
template<> ::Protocol::S_BASE_SET_OBJECT_DATA* Arena::CreateMaybeMessage<::Protocol::S_BASE_SET_OBJECT_DATA>(Arena*);
template<> ::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE* Arena::CreateMaybeMessage<::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE>(Arena*);
template<> ::Protocol::S_BASE_SET_SCENE* Arena::CreateMaybeMessage<::Protocol::S_BASE_SET_SCENE>(Arena*);
template<> ::Protocol::S_BASE_SET_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::S_BASE_SET_TRANSFORM>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_SET_SCENE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_SET_SCENE) */ {
 public:
  inline C_BASE_SET_SCENE() : C_BASE_SET_SCENE(nullptr) {}
  ~C_BASE_SET_SCENE() override;
  explicit PROTOBUF_CONSTEXPR C_BASE_SET_SCENE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_SET_SCENE(const C_BASE_SET_SCENE& from);
  C_BASE_SET_SCENE(C_BASE_SET_SCENE&& from) noexcept
    : C_BASE_SET_SCENE() {
    *this = ::std::move(from);
  }

  inline C_BASE_SET_SCENE& operator=(const C_BASE_SET_SCENE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_SET_SCENE& operator=(C_BASE_SET_SCENE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_SET_SCENE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_SET_SCENE* internal_default_instance() {
    return reinterpret_cast<const C_BASE_SET_SCENE*>(
               &_C_BASE_SET_SCENE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_BASE_SET_SCENE& a, C_BASE_SET_SCENE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_SET_SCENE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_SET_SCENE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_SET_SCENE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_SET_SCENE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BASE_SET_SCENE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BASE_SET_SCENE& from) {
    C_BASE_SET_SCENE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BASE_SET_SCENE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_SET_SCENE";
  }
  protected:
  explicit C_BASE_SET_SCENE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 1,
  };
  // string sceneId = 1;
  void clear_sceneid();
  const std::string& sceneid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sceneid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sceneid();
  PROTOBUF_NODISCARD std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_SET_SCENE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_SET_SCENE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_SET_SCENE) */ {
 public:
  inline S_BASE_SET_SCENE() : S_BASE_SET_SCENE(nullptr) {}
  ~S_BASE_SET_SCENE() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_SET_SCENE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_SET_SCENE(const S_BASE_SET_SCENE& from);
  S_BASE_SET_SCENE(S_BASE_SET_SCENE&& from) noexcept
    : S_BASE_SET_SCENE() {
    *this = ::std::move(from);
  }

  inline S_BASE_SET_SCENE& operator=(const S_BASE_SET_SCENE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_SET_SCENE& operator=(S_BASE_SET_SCENE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_SET_SCENE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_SET_SCENE* internal_default_instance() {
    return reinterpret_cast<const S_BASE_SET_SCENE*>(
               &_S_BASE_SET_SCENE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_BASE_SET_SCENE& a, S_BASE_SET_SCENE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_SET_SCENE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_SET_SCENE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_SET_SCENE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_SET_SCENE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_SET_SCENE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_SET_SCENE& from) {
    S_BASE_SET_SCENE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_SET_SCENE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_SET_SCENE";
  }
  protected:
  explicit S_BASE_SET_SCENE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_SET_SCENE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_INSTANTIATE_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_INSTANTIATE_OBJECT) */ {
 public:
  inline C_BASE_INSTANTIATE_OBJECT() : C_BASE_INSTANTIATE_OBJECT(nullptr) {}
  ~C_BASE_INSTANTIATE_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR C_BASE_INSTANTIATE_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_INSTANTIATE_OBJECT(const C_BASE_INSTANTIATE_OBJECT& from);
  C_BASE_INSTANTIATE_OBJECT(C_BASE_INSTANTIATE_OBJECT&& from) noexcept
    : C_BASE_INSTANTIATE_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_BASE_INSTANTIATE_OBJECT& operator=(const C_BASE_INSTANTIATE_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_INSTANTIATE_OBJECT& operator=(C_BASE_INSTANTIATE_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_INSTANTIATE_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_INSTANTIATE_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_BASE_INSTANTIATE_OBJECT*>(
               &_C_BASE_INSTANTIATE_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_BASE_INSTANTIATE_OBJECT& a, C_BASE_INSTANTIATE_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_INSTANTIATE_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_INSTANTIATE_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_INSTANTIATE_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_INSTANTIATE_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BASE_INSTANTIATE_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BASE_INSTANTIATE_OBJECT& from) {
    C_BASE_INSTANTIATE_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BASE_INSTANTIATE_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_INSTANTIATE_OBJECT";
  }
  protected:
  explicit C_BASE_INSTANTIATE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabNameFieldNumber = 3,
    kObjectDataFieldNumber = 4,
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // string prefabName = 3;
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // string objectData = 4;
  void clear_objectdata();
  const std::string& objectdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectdata();
  PROTOBUF_NODISCARD std::string* release_objectdata();
  void set_allocated_objectdata(std::string* objectdata);
  private:
  const std::string& _internal_objectdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectdata(const std::string& value);
  std::string* _internal_mutable_objectdata();
  public:

  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_INSTANTIATE_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectdata_;
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_INSTANTIATE_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_INSTANTIATE_OBJECT) */ {
 public:
  inline S_BASE_INSTANTIATE_OBJECT() : S_BASE_INSTANTIATE_OBJECT(nullptr) {}
  ~S_BASE_INSTANTIATE_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_INSTANTIATE_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_INSTANTIATE_OBJECT(const S_BASE_INSTANTIATE_OBJECT& from);
  S_BASE_INSTANTIATE_OBJECT(S_BASE_INSTANTIATE_OBJECT&& from) noexcept
    : S_BASE_INSTANTIATE_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_BASE_INSTANTIATE_OBJECT& operator=(const S_BASE_INSTANTIATE_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_INSTANTIATE_OBJECT& operator=(S_BASE_INSTANTIATE_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_INSTANTIATE_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_INSTANTIATE_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_BASE_INSTANTIATE_OBJECT*>(
               &_S_BASE_INSTANTIATE_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_BASE_INSTANTIATE_OBJECT& a, S_BASE_INSTANTIATE_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_INSTANTIATE_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_INSTANTIATE_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_INSTANTIATE_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_INSTANTIATE_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_INSTANTIATE_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_INSTANTIATE_OBJECT& from) {
    S_BASE_INSTANTIATE_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_INSTANTIATE_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_INSTANTIATE_OBJECT";
  }
  protected:
  explicit S_BASE_INSTANTIATE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 objectId = 2;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_INSTANTIATE_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_GET_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_GET_OBJECT) */ {
 public:
  inline C_BASE_GET_OBJECT() : C_BASE_GET_OBJECT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_BASE_GET_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_GET_OBJECT(const C_BASE_GET_OBJECT& from);
  C_BASE_GET_OBJECT(C_BASE_GET_OBJECT&& from) noexcept
    : C_BASE_GET_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_BASE_GET_OBJECT& operator=(const C_BASE_GET_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_GET_OBJECT& operator=(C_BASE_GET_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_GET_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_GET_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_BASE_GET_OBJECT*>(
               &_C_BASE_GET_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_BASE_GET_OBJECT& a, C_BASE_GET_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_GET_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_GET_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_GET_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_GET_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_BASE_GET_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_BASE_GET_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_GET_OBJECT";
  }
  protected:
  explicit C_BASE_GET_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_GET_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_ADD_OBJECT_GameObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo) */ {
 public:
  inline S_BASE_ADD_OBJECT_GameObjectInfo() : S_BASE_ADD_OBJECT_GameObjectInfo(nullptr) {}
  ~S_BASE_ADD_OBJECT_GameObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_ADD_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_ADD_OBJECT_GameObjectInfo(const S_BASE_ADD_OBJECT_GameObjectInfo& from);
  S_BASE_ADD_OBJECT_GameObjectInfo(S_BASE_ADD_OBJECT_GameObjectInfo&& from) noexcept
    : S_BASE_ADD_OBJECT_GameObjectInfo() {
    *this = ::std::move(from);
  }

  inline S_BASE_ADD_OBJECT_GameObjectInfo& operator=(const S_BASE_ADD_OBJECT_GameObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_ADD_OBJECT_GameObjectInfo& operator=(S_BASE_ADD_OBJECT_GameObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_ADD_OBJECT_GameObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_ADD_OBJECT_GameObjectInfo* internal_default_instance() {
    return reinterpret_cast<const S_BASE_ADD_OBJECT_GameObjectInfo*>(
               &_S_BASE_ADD_OBJECT_GameObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_BASE_ADD_OBJECT_GameObjectInfo& a, S_BASE_ADD_OBJECT_GameObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_ADD_OBJECT_GameObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_ADD_OBJECT_GameObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_ADD_OBJECT_GameObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_ADD_OBJECT_GameObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_ADD_OBJECT_GameObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_ADD_OBJECT_GameObjectInfo& from) {
    S_BASE_ADD_OBJECT_GameObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_ADD_OBJECT_GameObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo";
  }
  protected:
  explicit S_BASE_ADD_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabNameFieldNumber = 4,
    kObjectDataFieldNumber = 5,
    kOwnerIdFieldNumber = 6,
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
  };
  // string prefabName = 4;
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // string objectData = 5;
  void clear_objectdata();
  const std::string& objectdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectdata();
  PROTOBUF_NODISCARD std::string* release_objectdata();
  void set_allocated_objectdata(std::string* objectdata);
  private:
  const std::string& _internal_objectdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectdata(const std::string& value);
  std::string* _internal_mutable_objectdata();
  public:

  // string ownerId = 6;
  void clear_ownerid();
  const std::string& ownerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownerid();
  PROTOBUF_NODISCARD std::string* release_ownerid();
  void set_allocated_ownerid(std::string* ownerid);
  private:
  const std::string& _internal_ownerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownerid(const std::string& value);
  std::string* _internal_mutable_ownerid();
  public:

  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownerid_;
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_ADD_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_ADD_OBJECT) */ {
 public:
  inline S_BASE_ADD_OBJECT() : S_BASE_ADD_OBJECT(nullptr) {}
  ~S_BASE_ADD_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_ADD_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_ADD_OBJECT(const S_BASE_ADD_OBJECT& from);
  S_BASE_ADD_OBJECT(S_BASE_ADD_OBJECT&& from) noexcept
    : S_BASE_ADD_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_BASE_ADD_OBJECT& operator=(const S_BASE_ADD_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_ADD_OBJECT& operator=(S_BASE_ADD_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_ADD_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_ADD_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_BASE_ADD_OBJECT*>(
               &_S_BASE_ADD_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_BASE_ADD_OBJECT& a, S_BASE_ADD_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_ADD_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_ADD_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_ADD_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_ADD_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_ADD_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_ADD_OBJECT& from) {
    S_BASE_ADD_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_ADD_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_ADD_OBJECT";
  }
  protected:
  explicit S_BASE_ADD_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_BASE_ADD_OBJECT_GameObjectInfo GameObjectInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated .Protocol.S_BASE_ADD_OBJECT.GameObjectInfo gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* mutable_gameobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo >*
      mutable_gameobjects();
  private:
  const ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo& _internal_gameobjects(int index) const;
  ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* _internal_add_gameobjects();
  public:
  const ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo& gameobjects(int index) const;
  ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* add_gameobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo >&
      gameobjects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_ADD_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo > gameobjects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_REMOVE_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_REMOVE_OBJECT) */ {
 public:
  inline S_BASE_REMOVE_OBJECT() : S_BASE_REMOVE_OBJECT(nullptr) {}
  ~S_BASE_REMOVE_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_REMOVE_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_REMOVE_OBJECT(const S_BASE_REMOVE_OBJECT& from);
  S_BASE_REMOVE_OBJECT(S_BASE_REMOVE_OBJECT&& from) noexcept
    : S_BASE_REMOVE_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_BASE_REMOVE_OBJECT& operator=(const S_BASE_REMOVE_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_REMOVE_OBJECT& operator=(S_BASE_REMOVE_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_REMOVE_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_REMOVE_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_BASE_REMOVE_OBJECT*>(
               &_S_BASE_REMOVE_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_BASE_REMOVE_OBJECT& a, S_BASE_REMOVE_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_REMOVE_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_REMOVE_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_REMOVE_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_REMOVE_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_REMOVE_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_REMOVE_OBJECT& from) {
    S_BASE_REMOVE_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_REMOVE_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_REMOVE_OBJECT";
  }
  protected:
  explicit S_BASE_REMOVE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated int32 gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  private:
  int32_t _internal_gameobjects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gameobjects() const;
  void _internal_add_gameobjects(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gameobjects();
  public:
  int32_t gameobjects(int index) const;
  void set_gameobjects(int index, int32_t value);
  void add_gameobjects(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gameobjects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gameobjects();

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_REMOVE_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gameobjects_;
    mutable std::atomic<int> _gameobjects_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_SET_OBJECT_DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_SET_OBJECT_DATA) */ {
 public:
  inline C_BASE_SET_OBJECT_DATA() : C_BASE_SET_OBJECT_DATA(nullptr) {}
  ~C_BASE_SET_OBJECT_DATA() override;
  explicit PROTOBUF_CONSTEXPR C_BASE_SET_OBJECT_DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_SET_OBJECT_DATA(const C_BASE_SET_OBJECT_DATA& from);
  C_BASE_SET_OBJECT_DATA(C_BASE_SET_OBJECT_DATA&& from) noexcept
    : C_BASE_SET_OBJECT_DATA() {
    *this = ::std::move(from);
  }

  inline C_BASE_SET_OBJECT_DATA& operator=(const C_BASE_SET_OBJECT_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_SET_OBJECT_DATA& operator=(C_BASE_SET_OBJECT_DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_SET_OBJECT_DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_SET_OBJECT_DATA* internal_default_instance() {
    return reinterpret_cast<const C_BASE_SET_OBJECT_DATA*>(
               &_C_BASE_SET_OBJECT_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_BASE_SET_OBJECT_DATA& a, C_BASE_SET_OBJECT_DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_SET_OBJECT_DATA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_SET_OBJECT_DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_SET_OBJECT_DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_SET_OBJECT_DATA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BASE_SET_OBJECT_DATA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BASE_SET_OBJECT_DATA& from) {
    C_BASE_SET_OBJECT_DATA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BASE_SET_OBJECT_DATA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_SET_OBJECT_DATA";
  }
  protected:
  explicit C_BASE_SET_OBJECT_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // string objectData = 2;
  void clear_objectdata();
  const std::string& objectdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectdata();
  PROTOBUF_NODISCARD std::string* release_objectdata();
  void set_allocated_objectdata(std::string* objectdata);
  private:
  const std::string& _internal_objectdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectdata(const std::string& value);
  std::string* _internal_mutable_objectdata();
  public:

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_SET_OBJECT_DATA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectdata_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_SET_OBJECT_DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_SET_OBJECT_DATA) */ {
 public:
  inline S_BASE_SET_OBJECT_DATA() : S_BASE_SET_OBJECT_DATA(nullptr) {}
  ~S_BASE_SET_OBJECT_DATA() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_SET_OBJECT_DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_SET_OBJECT_DATA(const S_BASE_SET_OBJECT_DATA& from);
  S_BASE_SET_OBJECT_DATA(S_BASE_SET_OBJECT_DATA&& from) noexcept
    : S_BASE_SET_OBJECT_DATA() {
    *this = ::std::move(from);
  }

  inline S_BASE_SET_OBJECT_DATA& operator=(const S_BASE_SET_OBJECT_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_SET_OBJECT_DATA& operator=(S_BASE_SET_OBJECT_DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_SET_OBJECT_DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_SET_OBJECT_DATA* internal_default_instance() {
    return reinterpret_cast<const S_BASE_SET_OBJECT_DATA*>(
               &_S_BASE_SET_OBJECT_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_BASE_SET_OBJECT_DATA& a, S_BASE_SET_OBJECT_DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_SET_OBJECT_DATA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_SET_OBJECT_DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_SET_OBJECT_DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_SET_OBJECT_DATA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_SET_OBJECT_DATA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_SET_OBJECT_DATA& from) {
    S_BASE_SET_OBJECT_DATA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_SET_OBJECT_DATA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_SET_OBJECT_DATA";
  }
  protected:
  explicit S_BASE_SET_OBJECT_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_SET_OBJECT_DATA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_SET_OBJECT_DATA_NOTICE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE) */ {
 public:
  inline S_BASE_SET_OBJECT_DATA_NOTICE() : S_BASE_SET_OBJECT_DATA_NOTICE(nullptr) {}
  ~S_BASE_SET_OBJECT_DATA_NOTICE() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_SET_OBJECT_DATA_NOTICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_SET_OBJECT_DATA_NOTICE(const S_BASE_SET_OBJECT_DATA_NOTICE& from);
  S_BASE_SET_OBJECT_DATA_NOTICE(S_BASE_SET_OBJECT_DATA_NOTICE&& from) noexcept
    : S_BASE_SET_OBJECT_DATA_NOTICE() {
    *this = ::std::move(from);
  }

  inline S_BASE_SET_OBJECT_DATA_NOTICE& operator=(const S_BASE_SET_OBJECT_DATA_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_SET_OBJECT_DATA_NOTICE& operator=(S_BASE_SET_OBJECT_DATA_NOTICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_SET_OBJECT_DATA_NOTICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_SET_OBJECT_DATA_NOTICE* internal_default_instance() {
    return reinterpret_cast<const S_BASE_SET_OBJECT_DATA_NOTICE*>(
               &_S_BASE_SET_OBJECT_DATA_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_BASE_SET_OBJECT_DATA_NOTICE& a, S_BASE_SET_OBJECT_DATA_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_SET_OBJECT_DATA_NOTICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_SET_OBJECT_DATA_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_SET_OBJECT_DATA_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_SET_OBJECT_DATA_NOTICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_SET_OBJECT_DATA_NOTICE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_SET_OBJECT_DATA_NOTICE& from) {
    S_BASE_SET_OBJECT_DATA_NOTICE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_SET_OBJECT_DATA_NOTICE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_SET_OBJECT_DATA_NOTICE";
  }
  protected:
  explicit S_BASE_SET_OBJECT_DATA_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // string objectData = 2;
  void clear_objectdata();
  const std::string& objectdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectdata();
  PROTOBUF_NODISCARD std::string* release_objectdata();
  void set_allocated_objectdata(std::string* objectdata);
  private:
  const std::string& _internal_objectdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectdata(const std::string& value);
  std::string* _internal_mutable_objectdata();
  public:

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectdata_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_SET_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_SET_TRANSFORM) */ {
 public:
  inline C_BASE_SET_TRANSFORM() : C_BASE_SET_TRANSFORM(nullptr) {}
  ~C_BASE_SET_TRANSFORM() override;
  explicit PROTOBUF_CONSTEXPR C_BASE_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_SET_TRANSFORM(const C_BASE_SET_TRANSFORM& from);
  C_BASE_SET_TRANSFORM(C_BASE_SET_TRANSFORM&& from) noexcept
    : C_BASE_SET_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline C_BASE_SET_TRANSFORM& operator=(const C_BASE_SET_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_SET_TRANSFORM& operator=(C_BASE_SET_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_SET_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_SET_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const C_BASE_SET_TRANSFORM*>(
               &_C_BASE_SET_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_BASE_SET_TRANSFORM& a, C_BASE_SET_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_SET_TRANSFORM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_SET_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_SET_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_SET_TRANSFORM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BASE_SET_TRANSFORM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BASE_SET_TRANSFORM& from) {
    C_BASE_SET_TRANSFORM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BASE_SET_TRANSFORM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_SET_TRANSFORM";
  }
  protected:
  explicit C_BASE_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_SET_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_SET_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_SET_TRANSFORM) */ {
 public:
  inline S_BASE_SET_TRANSFORM() : S_BASE_SET_TRANSFORM(nullptr) {}
  ~S_BASE_SET_TRANSFORM() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_SET_TRANSFORM(const S_BASE_SET_TRANSFORM& from);
  S_BASE_SET_TRANSFORM(S_BASE_SET_TRANSFORM&& from) noexcept
    : S_BASE_SET_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline S_BASE_SET_TRANSFORM& operator=(const S_BASE_SET_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_SET_TRANSFORM& operator=(S_BASE_SET_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_SET_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_SET_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const S_BASE_SET_TRANSFORM*>(
               &_S_BASE_SET_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_BASE_SET_TRANSFORM& a, S_BASE_SET_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_SET_TRANSFORM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_SET_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_SET_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_SET_TRANSFORM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_SET_TRANSFORM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_SET_TRANSFORM& from) {
    S_BASE_SET_TRANSFORM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_SET_TRANSFORM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_SET_TRANSFORM";
  }
  protected:
  explicit S_BASE_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_SET_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_SET_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_SET_ANIMATION) */ {
 public:
  inline C_BASE_SET_ANIMATION() : C_BASE_SET_ANIMATION(nullptr) {}
  ~C_BASE_SET_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR C_BASE_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_SET_ANIMATION(const C_BASE_SET_ANIMATION& from);
  C_BASE_SET_ANIMATION(C_BASE_SET_ANIMATION&& from) noexcept
    : C_BASE_SET_ANIMATION() {
    *this = ::std::move(from);
  }

  inline C_BASE_SET_ANIMATION& operator=(const C_BASE_SET_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_SET_ANIMATION& operator=(C_BASE_SET_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_SET_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_SET_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const C_BASE_SET_ANIMATION*>(
               &_C_BASE_SET_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_BASE_SET_ANIMATION& a, C_BASE_SET_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_SET_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_SET_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_SET_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_SET_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BASE_SET_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BASE_SET_ANIMATION& from) {
    C_BASE_SET_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BASE_SET_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_SET_ANIMATION";
  }
  protected:
  explicit C_BASE_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationIdFieldNumber = 2,
    kAnimationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
  };
  // string animationId = 2;
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  PROTOBUF_NODISCARD std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // string animation = 3;
  void clear_animation();
  const std::string& animation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animation();
  PROTOBUF_NODISCARD std::string* release_animation();
  void set_allocated_animation(std::string* animation);
  private:
  const std::string& _internal_animation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation(const std::string& value);
  std::string* _internal_mutable_animation();
  public:

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_SET_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_SET_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_SET_ANIMATION) */ {
 public:
  inline S_BASE_SET_ANIMATION() : S_BASE_SET_ANIMATION(nullptr) {}
  ~S_BASE_SET_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_SET_ANIMATION(const S_BASE_SET_ANIMATION& from);
  S_BASE_SET_ANIMATION(S_BASE_SET_ANIMATION&& from) noexcept
    : S_BASE_SET_ANIMATION() {
    *this = ::std::move(from);
  }

  inline S_BASE_SET_ANIMATION& operator=(const S_BASE_SET_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_SET_ANIMATION& operator=(S_BASE_SET_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_SET_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_SET_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const S_BASE_SET_ANIMATION*>(
               &_S_BASE_SET_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_BASE_SET_ANIMATION& a, S_BASE_SET_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_SET_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_SET_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_SET_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_SET_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_SET_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_SET_ANIMATION& from) {
    S_BASE_SET_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_SET_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_SET_ANIMATION";
  }
  protected:
  explicit S_BASE_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationIdFieldNumber = 2,
    kAnimationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
  };
  // string animationId = 2;
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  PROTOBUF_NODISCARD std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // string animation = 3;
  void clear_animation();
  const std::string& animation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animation();
  PROTOBUF_NODISCARD std::string* release_animation();
  void set_allocated_animation(std::string* animation);
  private:
  const std::string& _internal_animation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation(const std::string& value);
  std::string* _internal_mutable_animation();
  public:

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_SET_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_;
    int32_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class C_BASE_SET_ANIMATION_ONCE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BASE_SET_ANIMATION_ONCE) */ {
 public:
  inline C_BASE_SET_ANIMATION_ONCE() : C_BASE_SET_ANIMATION_ONCE(nullptr) {}
  ~C_BASE_SET_ANIMATION_ONCE() override;
  explicit PROTOBUF_CONSTEXPR C_BASE_SET_ANIMATION_ONCE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BASE_SET_ANIMATION_ONCE(const C_BASE_SET_ANIMATION_ONCE& from);
  C_BASE_SET_ANIMATION_ONCE(C_BASE_SET_ANIMATION_ONCE&& from) noexcept
    : C_BASE_SET_ANIMATION_ONCE() {
    *this = ::std::move(from);
  }

  inline C_BASE_SET_ANIMATION_ONCE& operator=(const C_BASE_SET_ANIMATION_ONCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BASE_SET_ANIMATION_ONCE& operator=(C_BASE_SET_ANIMATION_ONCE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BASE_SET_ANIMATION_ONCE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BASE_SET_ANIMATION_ONCE* internal_default_instance() {
    return reinterpret_cast<const C_BASE_SET_ANIMATION_ONCE*>(
               &_C_BASE_SET_ANIMATION_ONCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_BASE_SET_ANIMATION_ONCE& a, C_BASE_SET_ANIMATION_ONCE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BASE_SET_ANIMATION_ONCE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BASE_SET_ANIMATION_ONCE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BASE_SET_ANIMATION_ONCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BASE_SET_ANIMATION_ONCE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BASE_SET_ANIMATION_ONCE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BASE_SET_ANIMATION_ONCE& from) {
    C_BASE_SET_ANIMATION_ONCE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BASE_SET_ANIMATION_ONCE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BASE_SET_ANIMATION_ONCE";
  }
  protected:
  explicit C_BASE_SET_ANIMATION_ONCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationIdFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kIsLoopFieldNumber = 3,
    kBlendFieldNumber = 4,
  };
  // string animationId = 2;
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  PROTOBUF_NODISCARD std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // bool isLoop = 3;
  void clear_isloop();
  bool isloop() const;
  void set_isloop(bool value);
  private:
  bool _internal_isloop() const;
  void _internal_set_isloop(bool value);
  public:

  // float blend = 4;
  void clear_blend();
  float blend() const;
  void set_blend(float value);
  private:
  float _internal_blend() const;
  void _internal_set_blend(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BASE_SET_ANIMATION_ONCE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
    int32_t objectid_;
    bool isloop_;
    float blend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// -------------------------------------------------------------------

class S_BASE_SET_ANIMATION_ONCE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BASE_SET_ANIMATION_ONCE) */ {
 public:
  inline S_BASE_SET_ANIMATION_ONCE() : S_BASE_SET_ANIMATION_ONCE(nullptr) {}
  ~S_BASE_SET_ANIMATION_ONCE() override;
  explicit PROTOBUF_CONSTEXPR S_BASE_SET_ANIMATION_ONCE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BASE_SET_ANIMATION_ONCE(const S_BASE_SET_ANIMATION_ONCE& from);
  S_BASE_SET_ANIMATION_ONCE(S_BASE_SET_ANIMATION_ONCE&& from) noexcept
    : S_BASE_SET_ANIMATION_ONCE() {
    *this = ::std::move(from);
  }

  inline S_BASE_SET_ANIMATION_ONCE& operator=(const S_BASE_SET_ANIMATION_ONCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BASE_SET_ANIMATION_ONCE& operator=(S_BASE_SET_ANIMATION_ONCE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BASE_SET_ANIMATION_ONCE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BASE_SET_ANIMATION_ONCE* internal_default_instance() {
    return reinterpret_cast<const S_BASE_SET_ANIMATION_ONCE*>(
               &_S_BASE_SET_ANIMATION_ONCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_BASE_SET_ANIMATION_ONCE& a, S_BASE_SET_ANIMATION_ONCE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BASE_SET_ANIMATION_ONCE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BASE_SET_ANIMATION_ONCE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BASE_SET_ANIMATION_ONCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BASE_SET_ANIMATION_ONCE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BASE_SET_ANIMATION_ONCE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BASE_SET_ANIMATION_ONCE& from) {
    S_BASE_SET_ANIMATION_ONCE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BASE_SET_ANIMATION_ONCE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BASE_SET_ANIMATION_ONCE";
  }
  protected:
  explicit S_BASE_SET_ANIMATION_ONCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationIdFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kIsLoopFieldNumber = 3,
    kBlendFieldNumber = 4,
  };
  // string animationId = 2;
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  PROTOBUF_NODISCARD std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // int32 objectId = 1;
  void clear_objectid();
  int32_t objectid() const;
  void set_objectid(int32_t value);
  private:
  int32_t _internal_objectid() const;
  void _internal_set_objectid(int32_t value);
  public:

  // bool isLoop = 3;
  void clear_isloop();
  bool isloop() const;
  void set_isloop(bool value);
  private:
  bool _internal_isloop() const;
  void _internal_set_isloop(bool value);
  public:

  // float blend = 4;
  void clear_blend();
  float blend() const;
  void set_blend(float value);
  private:
  float _internal_blend() const;
  void _internal_set_blend(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BASE_SET_ANIMATION_ONCE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
    int32_t objectid_;
    bool isloop_;
    float blend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// C_BASE_SET_SCENE

// string sceneId = 1;
inline void C_BASE_SET_SCENE::clear_sceneid() {
  _impl_.sceneid_.ClearToEmpty();
}
inline const std::string& C_BASE_SET_SCENE::sceneid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_SCENE.sceneId)
  return _internal_sceneid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_SET_SCENE::set_sceneid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sceneid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_SCENE.sceneId)
}
inline std::string* C_BASE_SET_SCENE::mutable_sceneid() {
  std::string* _s = _internal_mutable_sceneid();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_SCENE.sceneId)
  return _s;
}
inline const std::string& C_BASE_SET_SCENE::_internal_sceneid() const {
  return _impl_.sceneid_.Get();
}
inline void C_BASE_SET_SCENE::_internal_set_sceneid(const std::string& value) {
  
  _impl_.sceneid_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_SET_SCENE::_internal_mutable_sceneid() {
  
  return _impl_.sceneid_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_SET_SCENE::release_sceneid() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_SCENE.sceneId)
  return _impl_.sceneid_.Release();
}
inline void C_BASE_SET_SCENE::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    
  } else {
    
  }
  _impl_.sceneid_.SetAllocated(sceneid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sceneid_.IsDefault()) {
    _impl_.sceneid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_SCENE.sceneId)
}

// -------------------------------------------------------------------

// S_BASE_SET_SCENE

// bool success = 1;
inline void S_BASE_SET_SCENE::clear_success() {
  _impl_.success_ = false;
}
inline bool S_BASE_SET_SCENE::_internal_success() const {
  return _impl_.success_;
}
inline bool S_BASE_SET_SCENE::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_SCENE.success)
  return _internal_success();
}
inline void S_BASE_SET_SCENE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_BASE_SET_SCENE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_SCENE.success)
}

// -------------------------------------------------------------------

// C_BASE_INSTANTIATE_OBJECT

// .Protocol.Vector3 position = 1;
inline bool C_BASE_INSTANTIATE_OBJECT::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_BASE_INSTANTIATE_OBJECT::has_position() const {
  return _internal_has_position();
}
inline void C_BASE_INSTANTIATE_OBJECT::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& C_BASE_INSTANTIATE_OBJECT::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_BASE_INSTANTIATE_OBJECT::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_INSTANTIATE_OBJECT.position)
  return _internal_position();
}
inline void C_BASE_INSTANTIATE_OBJECT::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_BASE_INSTANTIATE_OBJECT.position)
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_INSTANTIATE_OBJECT.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_INSTANTIATE_OBJECT.position)
  return _msg;
}
inline void C_BASE_INSTANTIATE_OBJECT::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_INSTANTIATE_OBJECT.position)
}

// .Protocol.Vector3 rotation = 2;
inline bool C_BASE_INSTANTIATE_OBJECT::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_BASE_INSTANTIATE_OBJECT::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_BASE_INSTANTIATE_OBJECT::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& C_BASE_INSTANTIATE_OBJECT::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_BASE_INSTANTIATE_OBJECT::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_INSTANTIATE_OBJECT.rotation)
  return _internal_rotation();
}
inline void C_BASE_INSTANTIATE_OBJECT::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_BASE_INSTANTIATE_OBJECT.rotation)
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_INSTANTIATE_OBJECT.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_BASE_INSTANTIATE_OBJECT::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_INSTANTIATE_OBJECT.rotation)
  return _msg;
}
inline void C_BASE_INSTANTIATE_OBJECT::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_INSTANTIATE_OBJECT.rotation)
}

// string prefabName = 3;
inline void C_BASE_INSTANTIATE_OBJECT::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
}
inline const std::string& C_BASE_INSTANTIATE_OBJECT::prefabname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_INSTANTIATE_OBJECT::set_prefabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName)
}
inline std::string* C_BASE_INSTANTIATE_OBJECT::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName)
  return _s;
}
inline const std::string& C_BASE_INSTANTIATE_OBJECT::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void C_BASE_INSTANTIATE_OBJECT::_internal_set_prefabname(const std::string& value) {
  
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_INSTANTIATE_OBJECT::_internal_mutable_prefabname() {
  
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_INSTANTIATE_OBJECT::release_prefabname() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName)
  return _impl_.prefabname_.Release();
}
inline void C_BASE_INSTANTIATE_OBJECT::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    
  } else {
    
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName)
}

// string objectData = 4;
inline void C_BASE_INSTANTIATE_OBJECT::clear_objectdata() {
  _impl_.objectdata_.ClearToEmpty();
}
inline const std::string& C_BASE_INSTANTIATE_OBJECT::objectdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_INSTANTIATE_OBJECT.objectData)
  return _internal_objectdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_INSTANTIATE_OBJECT::set_objectdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectdata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_INSTANTIATE_OBJECT.objectData)
}
inline std::string* C_BASE_INSTANTIATE_OBJECT::mutable_objectdata() {
  std::string* _s = _internal_mutable_objectdata();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_INSTANTIATE_OBJECT.objectData)
  return _s;
}
inline const std::string& C_BASE_INSTANTIATE_OBJECT::_internal_objectdata() const {
  return _impl_.objectdata_.Get();
}
inline void C_BASE_INSTANTIATE_OBJECT::_internal_set_objectdata(const std::string& value) {
  
  _impl_.objectdata_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_INSTANTIATE_OBJECT::_internal_mutable_objectdata() {
  
  return _impl_.objectdata_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_INSTANTIATE_OBJECT::release_objectdata() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_INSTANTIATE_OBJECT.objectData)
  return _impl_.objectdata_.Release();
}
inline void C_BASE_INSTANTIATE_OBJECT::set_allocated_objectdata(std::string* objectdata) {
  if (objectdata != nullptr) {
    
  } else {
    
  }
  _impl_.objectdata_.SetAllocated(objectdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectdata_.IsDefault()) {
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_INSTANTIATE_OBJECT.objectData)
}

// -------------------------------------------------------------------

// S_BASE_INSTANTIATE_OBJECT

// bool success = 1;
inline void S_BASE_INSTANTIATE_OBJECT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_BASE_INSTANTIATE_OBJECT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_BASE_INSTANTIATE_OBJECT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_INSTANTIATE_OBJECT.success)
  return _internal_success();
}
inline void S_BASE_INSTANTIATE_OBJECT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_BASE_INSTANTIATE_OBJECT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_INSTANTIATE_OBJECT.success)
}

// int32 objectId = 2;
inline void S_BASE_INSTANTIATE_OBJECT::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t S_BASE_INSTANTIATE_OBJECT::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t S_BASE_INSTANTIATE_OBJECT::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_INSTANTIATE_OBJECT.objectId)
  return _internal_objectid();
}
inline void S_BASE_INSTANTIATE_OBJECT::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_BASE_INSTANTIATE_OBJECT::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_INSTANTIATE_OBJECT.objectId)
}

// -------------------------------------------------------------------

// C_BASE_GET_OBJECT

// -------------------------------------------------------------------

// S_BASE_ADD_OBJECT_GameObjectInfo

// int32 objectId = 1;
inline void S_BASE_ADD_OBJECT_GameObjectInfo::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t S_BASE_ADD_OBJECT_GameObjectInfo::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t S_BASE_ADD_OBJECT_GameObjectInfo::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectId)
  return _internal_objectid();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectId)
}

// .Protocol.Vector3 position = 2;
inline bool S_BASE_ADD_OBJECT_GameObjectInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_BASE_ADD_OBJECT_GameObjectInfo::has_position() const {
  return _internal_has_position();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& S_BASE_ADD_OBJECT_GameObjectInfo::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_BASE_ADD_OBJECT_GameObjectInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.position)
  return _internal_position();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.position)
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.position)
  return _msg;
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.position)
}

// .Protocol.Vector3 rotation = 3;
inline bool S_BASE_ADD_OBJECT_GameObjectInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_BASE_ADD_OBJECT_GameObjectInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& S_BASE_ADD_OBJECT_GameObjectInfo::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_BASE_ADD_OBJECT_GameObjectInfo::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.rotation)
  return _internal_rotation();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.rotation)
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_BASE_ADD_OBJECT_GameObjectInfo::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.rotation)
  return _msg;
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.rotation)
}

// string prefabName = 4;
inline void S_BASE_ADD_OBJECT_GameObjectInfo::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
}
inline const std::string& S_BASE_ADD_OBJECT_GameObjectInfo::prefabname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_ADD_OBJECT_GameObjectInfo::set_prefabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName)
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName)
  return _s;
}
inline const std::string& S_BASE_ADD_OBJECT_GameObjectInfo::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::_internal_set_prefabname(const std::string& value) {
  
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::_internal_mutable_prefabname() {
  
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::release_prefabname() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName)
  return _impl_.prefabname_.Release();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    
  } else {
    
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName)
}

// string objectData = 5;
inline void S_BASE_ADD_OBJECT_GameObjectInfo::clear_objectdata() {
  _impl_.objectdata_.ClearToEmpty();
}
inline const std::string& S_BASE_ADD_OBJECT_GameObjectInfo::objectdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData)
  return _internal_objectdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_ADD_OBJECT_GameObjectInfo::set_objectdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectdata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData)
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::mutable_objectdata() {
  std::string* _s = _internal_mutable_objectdata();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData)
  return _s;
}
inline const std::string& S_BASE_ADD_OBJECT_GameObjectInfo::_internal_objectdata() const {
  return _impl_.objectdata_.Get();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::_internal_set_objectdata(const std::string& value) {
  
  _impl_.objectdata_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::_internal_mutable_objectdata() {
  
  return _impl_.objectdata_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::release_objectdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData)
  return _impl_.objectdata_.Release();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::set_allocated_objectdata(std::string* objectdata) {
  if (objectdata != nullptr) {
    
  } else {
    
  }
  _impl_.objectdata_.SetAllocated(objectdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectdata_.IsDefault()) {
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData)
}

// string ownerId = 6;
inline void S_BASE_ADD_OBJECT_GameObjectInfo::clear_ownerid() {
  _impl_.ownerid_.ClearToEmpty();
}
inline const std::string& S_BASE_ADD_OBJECT_GameObjectInfo::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId)
  return _internal_ownerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_ADD_OBJECT_GameObjectInfo::set_ownerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId)
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::mutable_ownerid() {
  std::string* _s = _internal_mutable_ownerid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId)
  return _s;
}
inline const std::string& S_BASE_ADD_OBJECT_GameObjectInfo::_internal_ownerid() const {
  return _impl_.ownerid_.Get();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::_internal_set_ownerid(const std::string& value) {
  
  _impl_.ownerid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::_internal_mutable_ownerid() {
  
  return _impl_.ownerid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_ADD_OBJECT_GameObjectInfo::release_ownerid() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId)
  return _impl_.ownerid_.Release();
}
inline void S_BASE_ADD_OBJECT_GameObjectInfo::set_allocated_ownerid(std::string* ownerid) {
  if (ownerid != nullptr) {
    
  } else {
    
  }
  _impl_.ownerid_.SetAllocated(ownerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownerid_.IsDefault()) {
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId)
}

// -------------------------------------------------------------------

// S_BASE_ADD_OBJECT

// repeated .Protocol.S_BASE_ADD_OBJECT.GameObjectInfo gameObjects = 1;
inline int S_BASE_ADD_OBJECT::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_BASE_ADD_OBJECT::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_BASE_ADD_OBJECT::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* S_BASE_ADD_OBJECT::mutable_gameobjects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_ADD_OBJECT.gameObjects)
  return _impl_.gameobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo >*
S_BASE_ADD_OBJECT::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_BASE_ADD_OBJECT.gameObjects)
  return &_impl_.gameobjects_;
}
inline const ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo& S_BASE_ADD_OBJECT::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline const ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo& S_BASE_ADD_OBJECT::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_ADD_OBJECT.gameObjects)
  return _internal_gameobjects(index);
}
inline ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* S_BASE_ADD_OBJECT::_internal_add_gameobjects() {
  return _impl_.gameobjects_.Add();
}
inline ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* S_BASE_ADD_OBJECT::add_gameobjects() {
  ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo* _add = _internal_add_gameobjects();
  // @@protoc_insertion_point(field_add:Protocol.S_BASE_ADD_OBJECT.gameObjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo >&
S_BASE_ADD_OBJECT::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_BASE_ADD_OBJECT.gameObjects)
  return _impl_.gameobjects_;
}

// -------------------------------------------------------------------

// S_BASE_REMOVE_OBJECT

// repeated int32 gameObjects = 1;
inline int S_BASE_REMOVE_OBJECT::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_BASE_REMOVE_OBJECT::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_BASE_REMOVE_OBJECT::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline int32_t S_BASE_REMOVE_OBJECT::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline int32_t S_BASE_REMOVE_OBJECT::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_REMOVE_OBJECT.gameObjects)
  return _internal_gameobjects(index);
}
inline void S_BASE_REMOVE_OBJECT::set_gameobjects(int index, int32_t value) {
  _impl_.gameobjects_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_REMOVE_OBJECT.gameObjects)
}
inline void S_BASE_REMOVE_OBJECT::_internal_add_gameobjects(int32_t value) {
  _impl_.gameobjects_.Add(value);
}
inline void S_BASE_REMOVE_OBJECT::add_gameobjects(int32_t value) {
  _internal_add_gameobjects(value);
  // @@protoc_insertion_point(field_add:Protocol.S_BASE_REMOVE_OBJECT.gameObjects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_BASE_REMOVE_OBJECT::_internal_gameobjects() const {
  return _impl_.gameobjects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_BASE_REMOVE_OBJECT::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_BASE_REMOVE_OBJECT.gameObjects)
  return _internal_gameobjects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_BASE_REMOVE_OBJECT::_internal_mutable_gameobjects() {
  return &_impl_.gameobjects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_BASE_REMOVE_OBJECT::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_BASE_REMOVE_OBJECT.gameObjects)
  return _internal_mutable_gameobjects();
}

// -------------------------------------------------------------------

// C_BASE_SET_OBJECT_DATA

// int32 objectId = 1;
inline void C_BASE_SET_OBJECT_DATA::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t C_BASE_SET_OBJECT_DATA::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t C_BASE_SET_OBJECT_DATA::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_OBJECT_DATA.objectId)
  return _internal_objectid();
}
inline void C_BASE_SET_OBJECT_DATA::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_BASE_SET_OBJECT_DATA::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_OBJECT_DATA.objectId)
}

// string objectData = 2;
inline void C_BASE_SET_OBJECT_DATA::clear_objectdata() {
  _impl_.objectdata_.ClearToEmpty();
}
inline const std::string& C_BASE_SET_OBJECT_DATA::objectdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_OBJECT_DATA.objectData)
  return _internal_objectdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_SET_OBJECT_DATA::set_objectdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectdata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_OBJECT_DATA.objectData)
}
inline std::string* C_BASE_SET_OBJECT_DATA::mutable_objectdata() {
  std::string* _s = _internal_mutable_objectdata();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_OBJECT_DATA.objectData)
  return _s;
}
inline const std::string& C_BASE_SET_OBJECT_DATA::_internal_objectdata() const {
  return _impl_.objectdata_.Get();
}
inline void C_BASE_SET_OBJECT_DATA::_internal_set_objectdata(const std::string& value) {
  
  _impl_.objectdata_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_SET_OBJECT_DATA::_internal_mutable_objectdata() {
  
  return _impl_.objectdata_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_SET_OBJECT_DATA::release_objectdata() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_OBJECT_DATA.objectData)
  return _impl_.objectdata_.Release();
}
inline void C_BASE_SET_OBJECT_DATA::set_allocated_objectdata(std::string* objectdata) {
  if (objectdata != nullptr) {
    
  } else {
    
  }
  _impl_.objectdata_.SetAllocated(objectdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectdata_.IsDefault()) {
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_OBJECT_DATA.objectData)
}

// -------------------------------------------------------------------

// S_BASE_SET_OBJECT_DATA

// bool success = 1;
inline void S_BASE_SET_OBJECT_DATA::clear_success() {
  _impl_.success_ = false;
}
inline bool S_BASE_SET_OBJECT_DATA::_internal_success() const {
  return _impl_.success_;
}
inline bool S_BASE_SET_OBJECT_DATA::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_OBJECT_DATA.success)
  return _internal_success();
}
inline void S_BASE_SET_OBJECT_DATA::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_BASE_SET_OBJECT_DATA::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_OBJECT_DATA.success)
}

// -------------------------------------------------------------------

// S_BASE_SET_OBJECT_DATA_NOTICE

// int32 objectId = 1;
inline void S_BASE_SET_OBJECT_DATA_NOTICE::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t S_BASE_SET_OBJECT_DATA_NOTICE::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t S_BASE_SET_OBJECT_DATA_NOTICE::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectId)
  return _internal_objectid();
}
inline void S_BASE_SET_OBJECT_DATA_NOTICE::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_BASE_SET_OBJECT_DATA_NOTICE::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectId)
}

// string objectData = 2;
inline void S_BASE_SET_OBJECT_DATA_NOTICE::clear_objectdata() {
  _impl_.objectdata_.ClearToEmpty();
}
inline const std::string& S_BASE_SET_OBJECT_DATA_NOTICE::objectdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData)
  return _internal_objectdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_SET_OBJECT_DATA_NOTICE::set_objectdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectdata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData)
}
inline std::string* S_BASE_SET_OBJECT_DATA_NOTICE::mutable_objectdata() {
  std::string* _s = _internal_mutable_objectdata();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData)
  return _s;
}
inline const std::string& S_BASE_SET_OBJECT_DATA_NOTICE::_internal_objectdata() const {
  return _impl_.objectdata_.Get();
}
inline void S_BASE_SET_OBJECT_DATA_NOTICE::_internal_set_objectdata(const std::string& value) {
  
  _impl_.objectdata_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_SET_OBJECT_DATA_NOTICE::_internal_mutable_objectdata() {
  
  return _impl_.objectdata_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_SET_OBJECT_DATA_NOTICE::release_objectdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData)
  return _impl_.objectdata_.Release();
}
inline void S_BASE_SET_OBJECT_DATA_NOTICE::set_allocated_objectdata(std::string* objectdata) {
  if (objectdata != nullptr) {
    
  } else {
    
  }
  _impl_.objectdata_.SetAllocated(objectdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectdata_.IsDefault()) {
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData)
}

// -------------------------------------------------------------------

// C_BASE_SET_TRANSFORM

// int32 objectId = 1;
inline void C_BASE_SET_TRANSFORM::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t C_BASE_SET_TRANSFORM::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t C_BASE_SET_TRANSFORM::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_TRANSFORM.objectId)
  return _internal_objectid();
}
inline void C_BASE_SET_TRANSFORM::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_BASE_SET_TRANSFORM::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_TRANSFORM.objectId)
}

// .Protocol.Vector3 position = 2;
inline bool C_BASE_SET_TRANSFORM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_BASE_SET_TRANSFORM::has_position() const {
  return _internal_has_position();
}
inline void C_BASE_SET_TRANSFORM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& C_BASE_SET_TRANSFORM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_BASE_SET_TRANSFORM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_TRANSFORM.position)
  return _internal_position();
}
inline void C_BASE_SET_TRANSFORM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_BASE_SET_TRANSFORM.position)
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_TRANSFORM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_TRANSFORM.position)
  return _msg;
}
inline void C_BASE_SET_TRANSFORM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_TRANSFORM.position)
}

// .Protocol.Vector3 rotation = 3;
inline bool C_BASE_SET_TRANSFORM::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_BASE_SET_TRANSFORM::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_BASE_SET_TRANSFORM::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& C_BASE_SET_TRANSFORM::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_BASE_SET_TRANSFORM::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_TRANSFORM.rotation)
  return _internal_rotation();
}
inline void C_BASE_SET_TRANSFORM::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_BASE_SET_TRANSFORM.rotation)
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_TRANSFORM.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_BASE_SET_TRANSFORM::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_TRANSFORM.rotation)
  return _msg;
}
inline void C_BASE_SET_TRANSFORM::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_TRANSFORM.rotation)
}

// -------------------------------------------------------------------

// S_BASE_SET_TRANSFORM

// int32 objectId = 1;
inline void S_BASE_SET_TRANSFORM::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t S_BASE_SET_TRANSFORM::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t S_BASE_SET_TRANSFORM::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_TRANSFORM.objectId)
  return _internal_objectid();
}
inline void S_BASE_SET_TRANSFORM::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_BASE_SET_TRANSFORM::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_TRANSFORM.objectId)
}

// .Protocol.Vector3 position = 2;
inline bool S_BASE_SET_TRANSFORM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_BASE_SET_TRANSFORM::has_position() const {
  return _internal_has_position();
}
inline void S_BASE_SET_TRANSFORM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& S_BASE_SET_TRANSFORM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_BASE_SET_TRANSFORM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_TRANSFORM.position)
  return _internal_position();
}
inline void S_BASE_SET_TRANSFORM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BASE_SET_TRANSFORM.position)
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_SET_TRANSFORM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_SET_TRANSFORM.position)
  return _msg;
}
inline void S_BASE_SET_TRANSFORM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_SET_TRANSFORM.position)
}

// .Protocol.Vector3 rotation = 3;
inline bool S_BASE_SET_TRANSFORM::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_BASE_SET_TRANSFORM::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_BASE_SET_TRANSFORM::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& S_BASE_SET_TRANSFORM::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_BASE_SET_TRANSFORM::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_TRANSFORM.rotation)
  return _internal_rotation();
}
inline void S_BASE_SET_TRANSFORM::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BASE_SET_TRANSFORM.rotation)
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_SET_TRANSFORM.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_BASE_SET_TRANSFORM::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_SET_TRANSFORM.rotation)
  return _msg;
}
inline void S_BASE_SET_TRANSFORM::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_SET_TRANSFORM.rotation)
}

// -------------------------------------------------------------------

// C_BASE_SET_ANIMATION

// int32 objectId = 1;
inline void C_BASE_SET_ANIMATION::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t C_BASE_SET_ANIMATION::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t C_BASE_SET_ANIMATION::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION.objectId)
  return _internal_objectid();
}
inline void C_BASE_SET_ANIMATION::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_BASE_SET_ANIMATION::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION.objectId)
}

// string animationId = 2;
inline void C_BASE_SET_ANIMATION::clear_animationid() {
  _impl_.animationid_.ClearToEmpty();
}
inline const std::string& C_BASE_SET_ANIMATION::animationid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION.animationId)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_SET_ANIMATION::set_animationid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animationid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION.animationId)
}
inline std::string* C_BASE_SET_ANIMATION::mutable_animationid() {
  std::string* _s = _internal_mutable_animationid();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_ANIMATION.animationId)
  return _s;
}
inline const std::string& C_BASE_SET_ANIMATION::_internal_animationid() const {
  return _impl_.animationid_.Get();
}
inline void C_BASE_SET_ANIMATION::_internal_set_animationid(const std::string& value) {
  
  _impl_.animationid_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_SET_ANIMATION::_internal_mutable_animationid() {
  
  return _impl_.animationid_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_SET_ANIMATION::release_animationid() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_ANIMATION.animationId)
  return _impl_.animationid_.Release();
}
inline void C_BASE_SET_ANIMATION::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    
  } else {
    
  }
  _impl_.animationid_.SetAllocated(animationid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationid_.IsDefault()) {
    _impl_.animationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_ANIMATION.animationId)
}

// string animation = 3;
inline void C_BASE_SET_ANIMATION::clear_animation() {
  _impl_.animation_.ClearToEmpty();
}
inline const std::string& C_BASE_SET_ANIMATION::animation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION.animation)
  return _internal_animation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_SET_ANIMATION::set_animation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION.animation)
}
inline std::string* C_BASE_SET_ANIMATION::mutable_animation() {
  std::string* _s = _internal_mutable_animation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_ANIMATION.animation)
  return _s;
}
inline const std::string& C_BASE_SET_ANIMATION::_internal_animation() const {
  return _impl_.animation_.Get();
}
inline void C_BASE_SET_ANIMATION::_internal_set_animation(const std::string& value) {
  
  _impl_.animation_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_SET_ANIMATION::_internal_mutable_animation() {
  
  return _impl_.animation_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_SET_ANIMATION::release_animation() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_ANIMATION.animation)
  return _impl_.animation_.Release();
}
inline void C_BASE_SET_ANIMATION::set_allocated_animation(std::string* animation) {
  if (animation != nullptr) {
    
  } else {
    
  }
  _impl_.animation_.SetAllocated(animation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animation_.IsDefault()) {
    _impl_.animation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_ANIMATION.animation)
}

// -------------------------------------------------------------------

// S_BASE_SET_ANIMATION

// int32 objectId = 1;
inline void S_BASE_SET_ANIMATION::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t S_BASE_SET_ANIMATION::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t S_BASE_SET_ANIMATION::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION.objectId)
  return _internal_objectid();
}
inline void S_BASE_SET_ANIMATION::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_BASE_SET_ANIMATION::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION.objectId)
}

// string animationId = 2;
inline void S_BASE_SET_ANIMATION::clear_animationid() {
  _impl_.animationid_.ClearToEmpty();
}
inline const std::string& S_BASE_SET_ANIMATION::animationid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION.animationId)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_SET_ANIMATION::set_animationid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animationid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION.animationId)
}
inline std::string* S_BASE_SET_ANIMATION::mutable_animationid() {
  std::string* _s = _internal_mutable_animationid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_SET_ANIMATION.animationId)
  return _s;
}
inline const std::string& S_BASE_SET_ANIMATION::_internal_animationid() const {
  return _impl_.animationid_.Get();
}
inline void S_BASE_SET_ANIMATION::_internal_set_animationid(const std::string& value) {
  
  _impl_.animationid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_SET_ANIMATION::_internal_mutable_animationid() {
  
  return _impl_.animationid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_SET_ANIMATION::release_animationid() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_SET_ANIMATION.animationId)
  return _impl_.animationid_.Release();
}
inline void S_BASE_SET_ANIMATION::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    
  } else {
    
  }
  _impl_.animationid_.SetAllocated(animationid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationid_.IsDefault()) {
    _impl_.animationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_SET_ANIMATION.animationId)
}

// string animation = 3;
inline void S_BASE_SET_ANIMATION::clear_animation() {
  _impl_.animation_.ClearToEmpty();
}
inline const std::string& S_BASE_SET_ANIMATION::animation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION.animation)
  return _internal_animation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_SET_ANIMATION::set_animation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION.animation)
}
inline std::string* S_BASE_SET_ANIMATION::mutable_animation() {
  std::string* _s = _internal_mutable_animation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_SET_ANIMATION.animation)
  return _s;
}
inline const std::string& S_BASE_SET_ANIMATION::_internal_animation() const {
  return _impl_.animation_.Get();
}
inline void S_BASE_SET_ANIMATION::_internal_set_animation(const std::string& value) {
  
  _impl_.animation_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_SET_ANIMATION::_internal_mutable_animation() {
  
  return _impl_.animation_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_SET_ANIMATION::release_animation() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_SET_ANIMATION.animation)
  return _impl_.animation_.Release();
}
inline void S_BASE_SET_ANIMATION::set_allocated_animation(std::string* animation) {
  if (animation != nullptr) {
    
  } else {
    
  }
  _impl_.animation_.SetAllocated(animation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animation_.IsDefault()) {
    _impl_.animation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_SET_ANIMATION.animation)
}

// -------------------------------------------------------------------

// C_BASE_SET_ANIMATION_ONCE

// int32 objectId = 1;
inline void C_BASE_SET_ANIMATION_ONCE::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t C_BASE_SET_ANIMATION_ONCE::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t C_BASE_SET_ANIMATION_ONCE::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION_ONCE.objectId)
  return _internal_objectid();
}
inline void C_BASE_SET_ANIMATION_ONCE::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_BASE_SET_ANIMATION_ONCE::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION_ONCE.objectId)
}

// string animationId = 2;
inline void C_BASE_SET_ANIMATION_ONCE::clear_animationid() {
  _impl_.animationid_.ClearToEmpty();
}
inline const std::string& C_BASE_SET_ANIMATION_ONCE::animationid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION_ONCE.animationId)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_BASE_SET_ANIMATION_ONCE::set_animationid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animationid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION_ONCE.animationId)
}
inline std::string* C_BASE_SET_ANIMATION_ONCE::mutable_animationid() {
  std::string* _s = _internal_mutable_animationid();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BASE_SET_ANIMATION_ONCE.animationId)
  return _s;
}
inline const std::string& C_BASE_SET_ANIMATION_ONCE::_internal_animationid() const {
  return _impl_.animationid_.Get();
}
inline void C_BASE_SET_ANIMATION_ONCE::_internal_set_animationid(const std::string& value) {
  
  _impl_.animationid_.Set(value, GetArenaForAllocation());
}
inline std::string* C_BASE_SET_ANIMATION_ONCE::_internal_mutable_animationid() {
  
  return _impl_.animationid_.Mutable(GetArenaForAllocation());
}
inline std::string* C_BASE_SET_ANIMATION_ONCE::release_animationid() {
  // @@protoc_insertion_point(field_release:Protocol.C_BASE_SET_ANIMATION_ONCE.animationId)
  return _impl_.animationid_.Release();
}
inline void C_BASE_SET_ANIMATION_ONCE::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    
  } else {
    
  }
  _impl_.animationid_.SetAllocated(animationid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationid_.IsDefault()) {
    _impl_.animationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BASE_SET_ANIMATION_ONCE.animationId)
}

// bool isLoop = 3;
inline void C_BASE_SET_ANIMATION_ONCE::clear_isloop() {
  _impl_.isloop_ = false;
}
inline bool C_BASE_SET_ANIMATION_ONCE::_internal_isloop() const {
  return _impl_.isloop_;
}
inline bool C_BASE_SET_ANIMATION_ONCE::isloop() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION_ONCE.isLoop)
  return _internal_isloop();
}
inline void C_BASE_SET_ANIMATION_ONCE::_internal_set_isloop(bool value) {
  
  _impl_.isloop_ = value;
}
inline void C_BASE_SET_ANIMATION_ONCE::set_isloop(bool value) {
  _internal_set_isloop(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION_ONCE.isLoop)
}

// float blend = 4;
inline void C_BASE_SET_ANIMATION_ONCE::clear_blend() {
  _impl_.blend_ = 0;
}
inline float C_BASE_SET_ANIMATION_ONCE::_internal_blend() const {
  return _impl_.blend_;
}
inline float C_BASE_SET_ANIMATION_ONCE::blend() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BASE_SET_ANIMATION_ONCE.blend)
  return _internal_blend();
}
inline void C_BASE_SET_ANIMATION_ONCE::_internal_set_blend(float value) {
  
  _impl_.blend_ = value;
}
inline void C_BASE_SET_ANIMATION_ONCE::set_blend(float value) {
  _internal_set_blend(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BASE_SET_ANIMATION_ONCE.blend)
}

// -------------------------------------------------------------------

// S_BASE_SET_ANIMATION_ONCE

// int32 objectId = 1;
inline void S_BASE_SET_ANIMATION_ONCE::clear_objectid() {
  _impl_.objectid_ = 0;
}
inline int32_t S_BASE_SET_ANIMATION_ONCE::_internal_objectid() const {
  return _impl_.objectid_;
}
inline int32_t S_BASE_SET_ANIMATION_ONCE::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION_ONCE.objectId)
  return _internal_objectid();
}
inline void S_BASE_SET_ANIMATION_ONCE::_internal_set_objectid(int32_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_BASE_SET_ANIMATION_ONCE::set_objectid(int32_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION_ONCE.objectId)
}

// string animationId = 2;
inline void S_BASE_SET_ANIMATION_ONCE::clear_animationid() {
  _impl_.animationid_.ClearToEmpty();
}
inline const std::string& S_BASE_SET_ANIMATION_ONCE::animationid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION_ONCE.animationId)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_BASE_SET_ANIMATION_ONCE::set_animationid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animationid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION_ONCE.animationId)
}
inline std::string* S_BASE_SET_ANIMATION_ONCE::mutable_animationid() {
  std::string* _s = _internal_mutable_animationid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BASE_SET_ANIMATION_ONCE.animationId)
  return _s;
}
inline const std::string& S_BASE_SET_ANIMATION_ONCE::_internal_animationid() const {
  return _impl_.animationid_.Get();
}
inline void S_BASE_SET_ANIMATION_ONCE::_internal_set_animationid(const std::string& value) {
  
  _impl_.animationid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_BASE_SET_ANIMATION_ONCE::_internal_mutable_animationid() {
  
  return _impl_.animationid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_BASE_SET_ANIMATION_ONCE::release_animationid() {
  // @@protoc_insertion_point(field_release:Protocol.S_BASE_SET_ANIMATION_ONCE.animationId)
  return _impl_.animationid_.Release();
}
inline void S_BASE_SET_ANIMATION_ONCE::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    
  } else {
    
  }
  _impl_.animationid_.SetAllocated(animationid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationid_.IsDefault()) {
    _impl_.animationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BASE_SET_ANIMATION_ONCE.animationId)
}

// bool isLoop = 3;
inline void S_BASE_SET_ANIMATION_ONCE::clear_isloop() {
  _impl_.isloop_ = false;
}
inline bool S_BASE_SET_ANIMATION_ONCE::_internal_isloop() const {
  return _impl_.isloop_;
}
inline bool S_BASE_SET_ANIMATION_ONCE::isloop() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION_ONCE.isLoop)
  return _internal_isloop();
}
inline void S_BASE_SET_ANIMATION_ONCE::_internal_set_isloop(bool value) {
  
  _impl_.isloop_ = value;
}
inline void S_BASE_SET_ANIMATION_ONCE::set_isloop(bool value) {
  _internal_set_isloop(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION_ONCE.isLoop)
}

// float blend = 4;
inline void S_BASE_SET_ANIMATION_ONCE::clear_blend() {
  _impl_.blend_ = 0;
}
inline float S_BASE_SET_ANIMATION_ONCE::_internal_blend() const {
  return _impl_.blend_;
}
inline float S_BASE_SET_ANIMATION_ONCE::blend() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BASE_SET_ANIMATION_ONCE.blend)
  return _internal_blend();
}
inline void S_BASE_SET_ANIMATION_ONCE::_internal_set_blend(float value) {
  
  _impl_.blend_ = value;
}
inline void S_BASE_SET_ANIMATION_ONCE::set_blend(float value) {
  _internal_set_blend(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BASE_SET_ANIMATION_ONCE.blend)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fBase_2eproto
