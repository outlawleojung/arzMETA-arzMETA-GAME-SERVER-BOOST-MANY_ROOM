// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_004_Office.proto

#include "Packet_004_Office.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_OFFICE_GET_WAITING_LIST::C_OFFICE_GET_WAITING_LIST(
    ::_pbi::ConstantInitialized) {}
struct C_OFFICE_GET_WAITING_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_GET_WAITING_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_GET_WAITING_LISTDefaultTypeInternal() {}
  union {
    C_OFFICE_GET_WAITING_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_GET_WAITING_LISTDefaultTypeInternal _C_OFFICE_GET_WAITING_LIST_default_instance_;
PROTOBUF_CONSTEXPR WaitClient::WaitClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isobserver_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WaitClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitClientDefaultTypeInternal() {}
  union {
    WaitClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitClientDefaultTypeInternal _WaitClient_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_ADD_WAITING_CLIENT::S_OFFICE_ADD_WAITING_CLIENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clients_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_ADD_WAITING_CLIENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_ADD_WAITING_CLIENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_ADD_WAITING_CLIENTDefaultTypeInternal() {}
  union {
    S_OFFICE_ADD_WAITING_CLIENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_ADD_WAITING_CLIENTDefaultTypeInternal _S_OFFICE_ADD_WAITING_CLIENT_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_REMOVE_WAITING_CLIENT::S_OFFICE_REMOVE_WAITING_CLIENT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clients_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_REMOVE_WAITING_CLIENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_REMOVE_WAITING_CLIENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_REMOVE_WAITING_CLIENTDefaultTypeInternal() {}
  union {
    S_OFFICE_REMOVE_WAITING_CLIENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_REMOVE_WAITING_CLIENTDefaultTypeInternal _S_OFFICE_REMOVE_WAITING_CLIENT_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_ACCEPT_WAIT::C_OFFICE_ACCEPT_WAIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isaccepted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_OFFICE_ACCEPT_WAITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_ACCEPT_WAITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_ACCEPT_WAITDefaultTypeInternal() {}
  union {
    C_OFFICE_ACCEPT_WAIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_ACCEPT_WAITDefaultTypeInternal _C_OFFICE_ACCEPT_WAIT_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_ACCEPT_WAIT::S_OFFICE_ACCEPT_WAIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_ACCEPT_WAITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_ACCEPT_WAITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_ACCEPT_WAITDefaultTypeInternal() {}
  union {
    S_OFFICE_ACCEPT_WAIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_ACCEPT_WAITDefaultTypeInternal _S_OFFICE_ACCEPT_WAIT_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_ACCEPT_WAIT_NOTICE::S_OFFICE_ACCEPT_WAIT_NOTICE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isaccepted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_ACCEPT_WAIT_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_ACCEPT_WAIT_NOTICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_ACCEPT_WAIT_NOTICEDefaultTypeInternal() {}
  union {
    S_OFFICE_ACCEPT_WAIT_NOTICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_ACCEPT_WAIT_NOTICEDefaultTypeInternal _S_OFFICE_ACCEPT_WAIT_NOTICE_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_GET_HOST::C_OFFICE_GET_HOST(
    ::_pbi::ConstantInitialized) {}
struct C_OFFICE_GET_HOSTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_GET_HOSTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_GET_HOSTDefaultTypeInternal() {}
  union {
    C_OFFICE_GET_HOST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_GET_HOSTDefaultTypeInternal _C_OFFICE_GET_HOST_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_GET_HOST::S_OFFICE_GET_HOST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_GET_HOSTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_GET_HOSTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_GET_HOSTDefaultTypeInternal() {}
  union {
    S_OFFICE_GET_HOST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_GET_HOSTDefaultTypeInternal _S_OFFICE_GET_HOST_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_BREAK::C_OFFICE_BREAK(
    ::_pbi::ConstantInitialized) {}
struct C_OFFICE_BREAKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_BREAKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_BREAKDefaultTypeInternal() {}
  union {
    C_OFFICE_BREAK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_BREAKDefaultTypeInternal _C_OFFICE_BREAK_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_BREAK::S_OFFICE_BREAK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_BREAKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_BREAKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_BREAKDefaultTypeInternal() {}
  union {
    S_OFFICE_BREAK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_BREAKDefaultTypeInternal _S_OFFICE_BREAK_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_KICK::C_OFFICE_KICK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_OFFICE_KICKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_KICKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_KICKDefaultTypeInternal() {}
  union {
    C_OFFICE_KICK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_KICKDefaultTypeInternal _C_OFFICE_KICK_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_KICK::S_OFFICE_KICK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_KICKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_KICKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_KICKDefaultTypeInternal() {}
  union {
    S_OFFICE_KICK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_KICKDefaultTypeInternal _S_OFFICE_KICK_default_instance_;
PROTOBUF_CONSTEXPR USER_PERMISSION::USER_PERMISSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.screenpermission_)*/false
  , /*decltype(_impl_.chatpermission_)*/false
  , /*decltype(_impl_.voicepermission_)*/false
  , /*decltype(_impl_.videopermission_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct USER_PERMISSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR USER_PERMISSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~USER_PERMISSIONDefaultTypeInternal() {}
  union {
    USER_PERMISSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 USER_PERMISSIONDefaultTypeInternal _USER_PERMISSION_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_GET_PERMISSION::C_OFFICE_GET_PERMISSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_OFFICE_GET_PERMISSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_GET_PERMISSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_GET_PERMISSIONDefaultTypeInternal() {}
  union {
    C_OFFICE_GET_PERMISSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_GET_PERMISSIONDefaultTypeInternal _C_OFFICE_GET_PERMISSION_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_GET_PERMISSION::S_OFFICE_GET_PERMISSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_GET_PERMISSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_GET_PERMISSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_GET_PERMISSIONDefaultTypeInternal() {}
  union {
    S_OFFICE_GET_PERMISSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_GET_PERMISSIONDefaultTypeInternal _S_OFFICE_GET_PERMISSION_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_SET_PERMISSION::C_OFFICE_SET_PERMISSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_OFFICE_SET_PERMISSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_SET_PERMISSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_SET_PERMISSIONDefaultTypeInternal() {}
  union {
    C_OFFICE_SET_PERMISSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_SET_PERMISSIONDefaultTypeInternal _C_OFFICE_SET_PERMISSION_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_SET_PERMISSION::S_OFFICE_SET_PERMISSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_SET_PERMISSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_SET_PERMISSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_SET_PERMISSIONDefaultTypeInternal() {}
  union {
    S_OFFICE_SET_PERMISSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_SET_PERMISSIONDefaultTypeInternal _S_OFFICE_SET_PERMISSION_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_SET_PERMISSION_NOTICE::S_OFFICE_SET_PERMISSION_NOTICE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.screenpermission_)*/false
  , /*decltype(_impl_.chatpermission_)*/false
  , /*decltype(_impl_.voicepermission_)*/false
  , /*decltype(_impl_.videopermission_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_SET_PERMISSION_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_SET_PERMISSION_NOTICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_SET_PERMISSION_NOTICEDefaultTypeInternal() {}
  union {
    S_OFFICE_SET_PERMISSION_NOTICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_SET_PERMISSION_NOTICEDefaultTypeInternal _S_OFFICE_SET_PERMISSION_NOTICE_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_SET_ROOM_INFO::C_OFFICE_SET_ROOM_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.personnel_)*/0
  , /*decltype(_impl_.isshutdown_)*/false
  , /*decltype(_impl_.isadvertising_)*/false
  , /*decltype(_impl_.iswaitingroom_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_OFFICE_SET_ROOM_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_SET_ROOM_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_SET_ROOM_INFODefaultTypeInternal() {}
  union {
    C_OFFICE_SET_ROOM_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_SET_ROOM_INFODefaultTypeInternal _C_OFFICE_SET_ROOM_INFO_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_SET_ROOM_INFO::S_OFFICE_SET_ROOM_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_SET_ROOM_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_SET_ROOM_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_SET_ROOM_INFODefaultTypeInternal() {}
  union {
    S_OFFICE_SET_ROOM_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_SET_ROOM_INFODefaultTypeInternal _S_OFFICE_SET_ROOM_INFO_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_GET_ROOM_INFO::C_OFFICE_GET_ROOM_INFO(
    ::_pbi::ConstantInitialized) {}
struct C_OFFICE_GET_ROOM_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_GET_ROOM_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_GET_ROOM_INFODefaultTypeInternal() {}
  union {
    C_OFFICE_GET_ROOM_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_GET_ROOM_INFODefaultTypeInternal _C_OFFICE_GET_ROOM_INFO_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_GET_ROOM_INFO::S_OFFICE_GET_ROOM_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spaceinfoid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roomcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostnickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topictype_)*/0
  , /*decltype(_impl_.personnel_)*/0
  , /*decltype(_impl_.currentpersonnel_)*/0
  , /*decltype(_impl_.isadvertising_)*/false
  , /*decltype(_impl_.iswaitingroom_)*/false
  , /*decltype(_impl_.isshutdown_)*/false
  , /*decltype(_impl_.runningtime_)*/0
  , /*decltype(_impl_.passedtime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_GET_ROOM_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_GET_ROOM_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_GET_ROOM_INFODefaultTypeInternal() {}
  union {
    S_OFFICE_GET_ROOM_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_GET_ROOM_INFODefaultTypeInternal _S_OFFICE_GET_ROOM_INFO_default_instance_;
PROTOBUF_CONSTEXPR C_OFFICE_VIDEO_STREAM::C_OFFICE_VIDEO_STREAM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.play_)*/false
  , /*decltype(_impl_.seek_)*/false
  , /*decltype(_impl_.mediaplayerstate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_OFFICE_VIDEO_STREAMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_OFFICE_VIDEO_STREAMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_OFFICE_VIDEO_STREAMDefaultTypeInternal() {}
  union {
    C_OFFICE_VIDEO_STREAM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_OFFICE_VIDEO_STREAMDefaultTypeInternal _C_OFFICE_VIDEO_STREAM_default_instance_;
PROTOBUF_CONSTEXPR S_OFFICE_VIDEO_STREAM::S_OFFICE_VIDEO_STREAM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.play_)*/false
  , /*decltype(_impl_.seek_)*/false
  , /*decltype(_impl_.mediaplayerstate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OFFICE_VIDEO_STREAMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OFFICE_VIDEO_STREAMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OFFICE_VIDEO_STREAMDefaultTypeInternal() {}
  union {
    S_OFFICE_VIDEO_STREAM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OFFICE_VIDEO_STREAMDefaultTypeInternal _S_OFFICE_VIDEO_STREAM_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Packet_5f004_5fOffice_2eproto[25];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_5f004_5fOffice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_5f004_5fOffice_2eproto = nullptr;

const uint32_t TableStruct_Packet_5f004_5fOffice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_GET_WAITING_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::WaitClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::WaitClient, _impl_.isobserver_),
  PROTOBUF_FIELD_OFFSET(::Protocol::WaitClient, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::WaitClient, _impl_.nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_ADD_WAITING_CLIENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_ADD_WAITING_CLIENT, _impl_.clients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_REMOVE_WAITING_CLIENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_REMOVE_WAITING_CLIENT, _impl_.clients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_ACCEPT_WAIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_ACCEPT_WAIT, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_ACCEPT_WAIT, _impl_.isaccepted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_ACCEPT_WAIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_ACCEPT_WAIT, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_ACCEPT_WAIT_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_ACCEPT_WAIT_NOTICE, _impl_.isaccepted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_GET_HOST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_HOST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_HOST, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_BREAK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_BREAK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_BREAK, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_KICK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_KICK, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_KICK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_KICK, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _impl_.screenpermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _impl_.chatpermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _impl_.voicepermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _impl_.videopermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::USER_PERMISSION, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_GET_PERMISSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_GET_PERMISSION, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_PERMISSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_PERMISSION, _impl_.permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_PERMISSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_PERMISSION, _impl_.permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE, _impl_.screenpermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE, _impl_.chatpermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE, _impl_.voicepermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE, _impl_.videopermission_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_ROOM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_ROOM_INFO, _impl_.personnel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_ROOM_INFO, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_ROOM_INFO, _impl_.isshutdown_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_ROOM_INFO, _impl_.isadvertising_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_SET_ROOM_INFO, _impl_.iswaitingroom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_ROOM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_SET_ROOM_INFO, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_GET_ROOM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.roomname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.topictype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.spaceinfoid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.personnel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.currentpersonnel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.isadvertising_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.thumbnail_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.iswaitingroom_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.isshutdown_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.runningtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.passedtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.roomcode_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_GET_ROOM_INFO, _impl_.hostnickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.play_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.seek_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_OFFICE_VIDEO_STREAM, _impl_.mediaplayerstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _impl_.play_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _impl_.seek_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OFFICE_VIDEO_STREAM, _impl_.mediaplayerstate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_OFFICE_GET_WAITING_LIST)},
  { 6, -1, -1, sizeof(::Protocol::WaitClient)},
  { 15, -1, -1, sizeof(::Protocol::S_OFFICE_ADD_WAITING_CLIENT)},
  { 22, -1, -1, sizeof(::Protocol::S_OFFICE_REMOVE_WAITING_CLIENT)},
  { 29, -1, -1, sizeof(::Protocol::C_OFFICE_ACCEPT_WAIT)},
  { 37, -1, -1, sizeof(::Protocol::S_OFFICE_ACCEPT_WAIT)},
  { 44, -1, -1, sizeof(::Protocol::S_OFFICE_ACCEPT_WAIT_NOTICE)},
  { 51, -1, -1, sizeof(::Protocol::C_OFFICE_GET_HOST)},
  { 57, -1, -1, sizeof(::Protocol::S_OFFICE_GET_HOST)},
  { 64, -1, -1, sizeof(::Protocol::C_OFFICE_BREAK)},
  { 70, -1, -1, sizeof(::Protocol::S_OFFICE_BREAK)},
  { 77, -1, -1, sizeof(::Protocol::C_OFFICE_KICK)},
  { 84, -1, -1, sizeof(::Protocol::S_OFFICE_KICK)},
  { 91, -1, -1, sizeof(::Protocol::USER_PERMISSION)},
  { 103, -1, -1, sizeof(::Protocol::C_OFFICE_GET_PERMISSION)},
  { 110, -1, -1, sizeof(::Protocol::S_OFFICE_GET_PERMISSION)},
  { 117, -1, -1, sizeof(::Protocol::C_OFFICE_SET_PERMISSION)},
  { 124, -1, -1, sizeof(::Protocol::S_OFFICE_SET_PERMISSION)},
  { 131, -1, -1, sizeof(::Protocol::S_OFFICE_SET_PERMISSION_NOTICE)},
  { 142, -1, -1, sizeof(::Protocol::C_OFFICE_SET_ROOM_INFO)},
  { 153, -1, -1, sizeof(::Protocol::S_OFFICE_SET_ROOM_INFO)},
  { 160, -1, -1, sizeof(::Protocol::C_OFFICE_GET_ROOM_INFO)},
  { 166, -1, -1, sizeof(::Protocol::S_OFFICE_GET_ROOM_INFO)},
  { 187, -1, -1, sizeof(::Protocol::C_OFFICE_VIDEO_STREAM)},
  { 200, -1, -1, sizeof(::Protocol::S_OFFICE_VIDEO_STREAM)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_OFFICE_GET_WAITING_LIST_default_instance_._instance,
  &::Protocol::_WaitClient_default_instance_._instance,
  &::Protocol::_S_OFFICE_ADD_WAITING_CLIENT_default_instance_._instance,
  &::Protocol::_S_OFFICE_REMOVE_WAITING_CLIENT_default_instance_._instance,
  &::Protocol::_C_OFFICE_ACCEPT_WAIT_default_instance_._instance,
  &::Protocol::_S_OFFICE_ACCEPT_WAIT_default_instance_._instance,
  &::Protocol::_S_OFFICE_ACCEPT_WAIT_NOTICE_default_instance_._instance,
  &::Protocol::_C_OFFICE_GET_HOST_default_instance_._instance,
  &::Protocol::_S_OFFICE_GET_HOST_default_instance_._instance,
  &::Protocol::_C_OFFICE_BREAK_default_instance_._instance,
  &::Protocol::_S_OFFICE_BREAK_default_instance_._instance,
  &::Protocol::_C_OFFICE_KICK_default_instance_._instance,
  &::Protocol::_S_OFFICE_KICK_default_instance_._instance,
  &::Protocol::_USER_PERMISSION_default_instance_._instance,
  &::Protocol::_C_OFFICE_GET_PERMISSION_default_instance_._instance,
  &::Protocol::_S_OFFICE_GET_PERMISSION_default_instance_._instance,
  &::Protocol::_C_OFFICE_SET_PERMISSION_default_instance_._instance,
  &::Protocol::_S_OFFICE_SET_PERMISSION_default_instance_._instance,
  &::Protocol::_S_OFFICE_SET_PERMISSION_NOTICE_default_instance_._instance,
  &::Protocol::_C_OFFICE_SET_ROOM_INFO_default_instance_._instance,
  &::Protocol::_S_OFFICE_SET_ROOM_INFO_default_instance_._instance,
  &::Protocol::_C_OFFICE_GET_ROOM_INFO_default_instance_._instance,
  &::Protocol::_S_OFFICE_GET_ROOM_INFO_default_instance_._instance,
  &::Protocol::_C_OFFICE_VIDEO_STREAM_default_instance_._instance,
  &::Protocol::_S_OFFICE_VIDEO_STREAM_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_5f004_5fOffice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027Packet_004_Office.proto\022\010Protocol\"\033\n\031C"
  "_OFFICE_GET_WAITING_LIST\"D\n\nWaitClient\022\022"
  "\n\nisObserver\030\001 \001(\010\022\020\n\010clientId\030\002 \001(\t\022\020\n\010"
  "nickname\030\003 \001(\t\"D\n\033S_OFFICE_ADD_WAITING_C"
  "LIENT\022%\n\007clients\030\001 \003(\0132\024.Protocol.WaitCl"
  "ient\"1\n\036S_OFFICE_REMOVE_WAITING_CLIENT\022\017"
  "\n\007clients\030\001 \003(\t\"<\n\024C_OFFICE_ACCEPT_WAIT\022"
  "\020\n\010clientId\030\001 \001(\t\022\022\n\nisAccepted\030\002 \001(\010\"\'\n"
  "\024S_OFFICE_ACCEPT_WAIT\022\017\n\007success\030\001 \001(\010\"1"
  "\n\033S_OFFICE_ACCEPT_WAIT_NOTICE\022\022\n\nisAccep"
  "ted\030\001 \001(\010\"\023\n\021C_OFFICE_GET_HOST\"%\n\021S_OFFI"
  "CE_GET_HOST\022\020\n\010clientId\030\001 \001(\t\"\020\n\016C_OFFIC"
  "E_BREAK\"!\n\016S_OFFICE_BREAK\022\017\n\007success\030\001 \001"
  "(\010\"!\n\rC_OFFICE_KICK\022\020\n\010clientId\030\001 \001(\t\" \n"
  "\rS_OFFICE_KICK\022\017\n\007success\030\001 \001(\010\"\225\001\n\017USER"
  "_PERMISSION\022\020\n\010clientId\030\001 \001(\t\022\030\n\020screenP"
  "ermission\030\002 \001(\010\022\026\n\016chatPermission\030\003 \001(\010\022"
  "\027\n\017voicePermission\030\004 \001(\010\022\027\n\017videoPermiss"
  "ion\030\005 \001(\010\022\014\n\004type\030\006 \001(\005\"+\n\027C_OFFICE_GET_"
  "PERMISSION\022\020\n\010clientId\030\001 \001(\t\"I\n\027S_OFFICE"
  "_GET_PERMISSION\022.\n\013permissions\030\001 \003(\0132\031.P"
  "rotocol.USER_PERMISSION\"I\n\027C_OFFICE_SET_"
  "PERMISSION\022.\n\013permissions\030\001 \003(\0132\031.Protoc"
  "ol.USER_PERMISSION\"*\n\027S_OFFICE_SET_PERMI"
  "SSION\022\017\n\007success\030\001 \001(\010\"\222\001\n\036S_OFFICE_SET_"
  "PERMISSION_NOTICE\022\030\n\020screenPermission\030\001 "
  "\001(\010\022\026\n\016chatPermission\030\002 \001(\010\022\027\n\017voicePerm"
  "ission\030\003 \001(\010\022\027\n\017videoPermission\030\004 \001(\010\022\014\n"
  "\004type\030\005 \001(\005\"\177\n\026C_OFFICE_SET_ROOM_INFO\022\021\n"
  "\tpersonnel\030\001 \001(\005\022\020\n\010password\030\002 \001(\t\022\022\n\nis"
  "Shutdown\030\003 \001(\010\022\025\n\risAdvertising\030\004 \001(\010\022\025\n"
  "\risWaitingRoom\030\005 \001(\010\")\n\026S_OFFICE_SET_ROO"
  "M_INFO\022\017\n\007success\030\001 \001(\010\"\030\n\026C_OFFICE_GET_"
  "ROOM_INFO\"\314\002\n\026S_OFFICE_GET_ROOM_INFO\022\020\n\010"
  "roomName\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\021\n\tt"
  "opicType\030\003 \001(\005\022\020\n\010password\030\004 \001(\t\022\023\n\013spac"
  "eInfoId\030\005 \001(\t\022\021\n\tpersonnel\030\006 \001(\005\022\030\n\020curr"
  "entPersonnel\030\007 \001(\005\022\025\n\risAdvertising\030\010 \001("
  "\010\022\021\n\tthumbnail\030\t \001(\t\022\025\n\risWaitingRoom\030\n "
  "\001(\010\022\022\n\nisShutdown\030\013 \001(\010\022\023\n\013runningTime\030\014"
  " \001(\005\022\022\n\npassedTime\030\r \001(\005\022\020\n\010roomcode\030\016 \001"
  "(\t\022\024\n\014hostNickname\030\017 \001(\t\"\212\001\n\025C_OFFICE_VI"
  "DEO_STREAM\022\020\n\010clientid\030\001 \001(\t\022\013\n\003url\030\002 \001("
  "\t\022\016\n\006volume\030\003 \001(\002\022\014\n\004time\030\004 \001(\002\022\014\n\004play\030"
  "\005 \001(\010\022\014\n\004seek\030\006 \001(\010\022\030\n\020mediaPlayerState\030"
  "\007 \001(\005\"x\n\025S_OFFICE_VIDEO_STREAM\022\013\n\003url\030\001 "
  "\001(\t\022\016\n\006volume\030\002 \001(\002\022\014\n\004time\030\003 \001(\002\022\014\n\004pla"
  "y\030\004 \001(\010\022\014\n\004seek\030\005 \001(\010\022\030\n\020mediaPlayerStat"
  "e\030\006 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Packet_5f004_5fOffice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_5f004_5fOffice_2eproto = {
    false, false, 1935, descriptor_table_protodef_Packet_5f004_5fOffice_2eproto,
    "Packet_004_Office.proto",
    &descriptor_table_Packet_5f004_5fOffice_2eproto_once, nullptr, 0, 25,
    schemas, file_default_instances, TableStruct_Packet_5f004_5fOffice_2eproto::offsets,
    file_level_metadata_Packet_5f004_5fOffice_2eproto, file_level_enum_descriptors_Packet_5f004_5fOffice_2eproto,
    file_level_service_descriptors_Packet_5f004_5fOffice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_5f004_5fOffice_2eproto_getter() {
  return &descriptor_table_Packet_5f004_5fOffice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_5f004_5fOffice_2eproto(&descriptor_table_Packet_5f004_5fOffice_2eproto);
namespace Protocol {

// ===================================================================

class C_OFFICE_GET_WAITING_LIST::_Internal {
 public:
};

C_OFFICE_GET_WAITING_LIST::C_OFFICE_GET_WAITING_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_GET_WAITING_LIST)
}
C_OFFICE_GET_WAITING_LIST::C_OFFICE_GET_WAITING_LIST(const C_OFFICE_GET_WAITING_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_OFFICE_GET_WAITING_LIST* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_GET_WAITING_LIST)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_GET_WAITING_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_GET_WAITING_LIST::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_GET_WAITING_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[0]);
}

// ===================================================================

class WaitClient::_Internal {
 public:
};

WaitClient::WaitClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.WaitClient)
}
WaitClient::WaitClient(const WaitClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WaitClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.isobserver_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.isobserver_ = from._impl_.isobserver_;
  // @@protoc_insertion_point(copy_constructor:Protocol.WaitClient)
}

inline void WaitClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.isobserver_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WaitClient::~WaitClient() {
  // @@protoc_insertion_point(destructor:Protocol.WaitClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.nickname_.Destroy();
}

void WaitClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WaitClient::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.WaitClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.isobserver_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isObserver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isobserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.WaitClient.clientId"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.WaitClient.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.WaitClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isObserver = 1;
  if (this->_internal_isobserver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isobserver(), target);
  }

  // string clientId = 2;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.WaitClient.clientId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.WaitClient.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.WaitClient)
  return target;
}

size_t WaitClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.WaitClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 2;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // bool isObserver = 1;
  if (this->_internal_isobserver() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WaitClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitClient::GetClassData() const { return &_class_data_; }


void WaitClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WaitClient*>(&to_msg);
  auto& from = static_cast<const WaitClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.WaitClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_isobserver() != 0) {
    _this->_internal_set_isobserver(from._internal_isobserver());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitClient::CopyFrom(const WaitClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.WaitClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitClient::IsInitialized() const {
  return true;
}

void WaitClient::InternalSwap(WaitClient* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  swap(_impl_.isobserver_, other->_impl_.isobserver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[1]);
}

// ===================================================================

class S_OFFICE_ADD_WAITING_CLIENT::_Internal {
 public:
};

S_OFFICE_ADD_WAITING_CLIENT::S_OFFICE_ADD_WAITING_CLIENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
}
S_OFFICE_ADD_WAITING_CLIENT::S_OFFICE_ADD_WAITING_CLIENT(const S_OFFICE_ADD_WAITING_CLIENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_ADD_WAITING_CLIENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clients_){from._impl_.clients_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
}

inline void S_OFFICE_ADD_WAITING_CLIENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clients_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_ADD_WAITING_CLIENT::~S_OFFICE_ADD_WAITING_CLIENT() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_ADD_WAITING_CLIENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clients_.~RepeatedPtrField();
}

void S_OFFICE_ADD_WAITING_CLIENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_ADD_WAITING_CLIENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clients_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_ADD_WAITING_CLIENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.WaitClient clients = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_ADD_WAITING_CLIENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.WaitClient clients = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clients_size()); i < n; i++) {
    const auto& repfield = this->_internal_clients(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  return target;
}

size_t S_OFFICE_ADD_WAITING_CLIENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.WaitClient clients = 1;
  total_size += 1UL * this->_internal_clients_size();
  for (const auto& msg : this->_impl_.clients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_ADD_WAITING_CLIENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_ADD_WAITING_CLIENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_ADD_WAITING_CLIENT::GetClassData() const { return &_class_data_; }


void S_OFFICE_ADD_WAITING_CLIENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_ADD_WAITING_CLIENT*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_ADD_WAITING_CLIENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clients_.MergeFrom(from._impl_.clients_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_ADD_WAITING_CLIENT::CopyFrom(const S_OFFICE_ADD_WAITING_CLIENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_ADD_WAITING_CLIENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_ADD_WAITING_CLIENT::IsInitialized() const {
  return true;
}

void S_OFFICE_ADD_WAITING_CLIENT::InternalSwap(S_OFFICE_ADD_WAITING_CLIENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clients_.InternalSwap(&other->_impl_.clients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_ADD_WAITING_CLIENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[2]);
}

// ===================================================================

class S_OFFICE_REMOVE_WAITING_CLIENT::_Internal {
 public:
};

S_OFFICE_REMOVE_WAITING_CLIENT::S_OFFICE_REMOVE_WAITING_CLIENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
}
S_OFFICE_REMOVE_WAITING_CLIENT::S_OFFICE_REMOVE_WAITING_CLIENT(const S_OFFICE_REMOVE_WAITING_CLIENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_REMOVE_WAITING_CLIENT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clients_){from._impl_.clients_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
}

inline void S_OFFICE_REMOVE_WAITING_CLIENT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clients_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_REMOVE_WAITING_CLIENT::~S_OFFICE_REMOVE_WAITING_CLIENT() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_REMOVE_WAITING_CLIENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clients_.~RepeatedPtrField();
}

void S_OFFICE_REMOVE_WAITING_CLIENT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_REMOVE_WAITING_CLIENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clients_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_REMOVE_WAITING_CLIENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string clients = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clients();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_REMOVE_WAITING_CLIENT.clients"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_REMOVE_WAITING_CLIENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string clients = 1;
  for (int i = 0, n = this->_internal_clients_size(); i < n; i++) {
    const auto& s = this->_internal_clients(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_REMOVE_WAITING_CLIENT.clients");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  return target;
}

size_t S_OFFICE_REMOVE_WAITING_CLIENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string clients = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.clients_.size());
  for (int i = 0, n = _impl_.clients_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.clients_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_REMOVE_WAITING_CLIENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_REMOVE_WAITING_CLIENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_REMOVE_WAITING_CLIENT::GetClassData() const { return &_class_data_; }


void S_OFFICE_REMOVE_WAITING_CLIENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_REMOVE_WAITING_CLIENT*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_REMOVE_WAITING_CLIENT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clients_.MergeFrom(from._impl_.clients_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_REMOVE_WAITING_CLIENT::CopyFrom(const S_OFFICE_REMOVE_WAITING_CLIENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_REMOVE_WAITING_CLIENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_REMOVE_WAITING_CLIENT::IsInitialized() const {
  return true;
}

void S_OFFICE_REMOVE_WAITING_CLIENT::InternalSwap(S_OFFICE_REMOVE_WAITING_CLIENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clients_.InternalSwap(&other->_impl_.clients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_REMOVE_WAITING_CLIENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[3]);
}

// ===================================================================

class C_OFFICE_ACCEPT_WAIT::_Internal {
 public:
};

C_OFFICE_ACCEPT_WAIT::C_OFFICE_ACCEPT_WAIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_ACCEPT_WAIT)
}
C_OFFICE_ACCEPT_WAIT::C_OFFICE_ACCEPT_WAIT(const C_OFFICE_ACCEPT_WAIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_OFFICE_ACCEPT_WAIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.isaccepted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.isaccepted_ = from._impl_.isaccepted_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_ACCEPT_WAIT)
}

inline void C_OFFICE_ACCEPT_WAIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.isaccepted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_OFFICE_ACCEPT_WAIT::~C_OFFICE_ACCEPT_WAIT() {
  // @@protoc_insertion_point(destructor:Protocol.C_OFFICE_ACCEPT_WAIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_OFFICE_ACCEPT_WAIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void C_OFFICE_ACCEPT_WAIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_OFFICE_ACCEPT_WAIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_OFFICE_ACCEPT_WAIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.isaccepted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_OFFICE_ACCEPT_WAIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_OFFICE_ACCEPT_WAIT.clientId"));
        } else
          goto handle_unusual;
        continue;
      // bool isAccepted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isaccepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_OFFICE_ACCEPT_WAIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_OFFICE_ACCEPT_WAIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_OFFICE_ACCEPT_WAIT.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // bool isAccepted = 2;
  if (this->_internal_isaccepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isaccepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_OFFICE_ACCEPT_WAIT)
  return target;
}

size_t C_OFFICE_ACCEPT_WAIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_OFFICE_ACCEPT_WAIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // bool isAccepted = 2;
  if (this->_internal_isaccepted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_ACCEPT_WAIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_OFFICE_ACCEPT_WAIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_ACCEPT_WAIT::GetClassData() const { return &_class_data_; }


void C_OFFICE_ACCEPT_WAIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_OFFICE_ACCEPT_WAIT*>(&to_msg);
  auto& from = static_cast<const C_OFFICE_ACCEPT_WAIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_OFFICE_ACCEPT_WAIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_isaccepted() != 0) {
    _this->_internal_set_isaccepted(from._internal_isaccepted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_OFFICE_ACCEPT_WAIT::CopyFrom(const C_OFFICE_ACCEPT_WAIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_OFFICE_ACCEPT_WAIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_OFFICE_ACCEPT_WAIT::IsInitialized() const {
  return true;
}

void C_OFFICE_ACCEPT_WAIT::InternalSwap(C_OFFICE_ACCEPT_WAIT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  swap(_impl_.isaccepted_, other->_impl_.isaccepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_ACCEPT_WAIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[4]);
}

// ===================================================================

class S_OFFICE_ACCEPT_WAIT::_Internal {
 public:
};

S_OFFICE_ACCEPT_WAIT::S_OFFICE_ACCEPT_WAIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_ACCEPT_WAIT)
}
S_OFFICE_ACCEPT_WAIT::S_OFFICE_ACCEPT_WAIT(const S_OFFICE_ACCEPT_WAIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_ACCEPT_WAIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_ACCEPT_WAIT)
}

inline void S_OFFICE_ACCEPT_WAIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_ACCEPT_WAIT::~S_OFFICE_ACCEPT_WAIT() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_ACCEPT_WAIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_ACCEPT_WAIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_ACCEPT_WAIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_ACCEPT_WAIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_ACCEPT_WAIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_ACCEPT_WAIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_ACCEPT_WAIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_ACCEPT_WAIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_ACCEPT_WAIT)
  return target;
}

size_t S_OFFICE_ACCEPT_WAIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_ACCEPT_WAIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_ACCEPT_WAIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_ACCEPT_WAIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_ACCEPT_WAIT::GetClassData() const { return &_class_data_; }


void S_OFFICE_ACCEPT_WAIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_ACCEPT_WAIT*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_ACCEPT_WAIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_ACCEPT_WAIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_ACCEPT_WAIT::CopyFrom(const S_OFFICE_ACCEPT_WAIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_ACCEPT_WAIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_ACCEPT_WAIT::IsInitialized() const {
  return true;
}

void S_OFFICE_ACCEPT_WAIT::InternalSwap(S_OFFICE_ACCEPT_WAIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_ACCEPT_WAIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[5]);
}

// ===================================================================

class S_OFFICE_ACCEPT_WAIT_NOTICE::_Internal {
 public:
};

S_OFFICE_ACCEPT_WAIT_NOTICE::S_OFFICE_ACCEPT_WAIT_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
}
S_OFFICE_ACCEPT_WAIT_NOTICE::S_OFFICE_ACCEPT_WAIT_NOTICE(const S_OFFICE_ACCEPT_WAIT_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_ACCEPT_WAIT_NOTICE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isaccepted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isaccepted_ = from._impl_.isaccepted_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
}

inline void S_OFFICE_ACCEPT_WAIT_NOTICE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isaccepted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_ACCEPT_WAIT_NOTICE::~S_OFFICE_ACCEPT_WAIT_NOTICE() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_ACCEPT_WAIT_NOTICE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_ACCEPT_WAIT_NOTICE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_ACCEPT_WAIT_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isaccepted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_ACCEPT_WAIT_NOTICE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAccepted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isaccepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_ACCEPT_WAIT_NOTICE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAccepted = 1;
  if (this->_internal_isaccepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isaccepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  return target;
}

size_t S_OFFICE_ACCEPT_WAIT_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAccepted = 1;
  if (this->_internal_isaccepted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_ACCEPT_WAIT_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_ACCEPT_WAIT_NOTICE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_ACCEPT_WAIT_NOTICE::GetClassData() const { return &_class_data_; }


void S_OFFICE_ACCEPT_WAIT_NOTICE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_ACCEPT_WAIT_NOTICE*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_ACCEPT_WAIT_NOTICE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isaccepted() != 0) {
    _this->_internal_set_isaccepted(from._internal_isaccepted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_ACCEPT_WAIT_NOTICE::CopyFrom(const S_OFFICE_ACCEPT_WAIT_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_ACCEPT_WAIT_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_ACCEPT_WAIT_NOTICE::IsInitialized() const {
  return true;
}

void S_OFFICE_ACCEPT_WAIT_NOTICE::InternalSwap(S_OFFICE_ACCEPT_WAIT_NOTICE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.isaccepted_, other->_impl_.isaccepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_ACCEPT_WAIT_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[6]);
}

// ===================================================================

class C_OFFICE_GET_HOST::_Internal {
 public:
};

C_OFFICE_GET_HOST::C_OFFICE_GET_HOST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_GET_HOST)
}
C_OFFICE_GET_HOST::C_OFFICE_GET_HOST(const C_OFFICE_GET_HOST& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_OFFICE_GET_HOST* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_GET_HOST)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_GET_HOST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_GET_HOST::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_GET_HOST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[7]);
}

// ===================================================================

class S_OFFICE_GET_HOST::_Internal {
 public:
};

S_OFFICE_GET_HOST::S_OFFICE_GET_HOST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_GET_HOST)
}
S_OFFICE_GET_HOST::S_OFFICE_GET_HOST(const S_OFFICE_GET_HOST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_GET_HOST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_GET_HOST)
}

inline void S_OFFICE_GET_HOST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_OFFICE_GET_HOST::~S_OFFICE_GET_HOST() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_GET_HOST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_GET_HOST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void S_OFFICE_GET_HOST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_GET_HOST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_GET_HOST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_GET_HOST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_HOST.clientId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_GET_HOST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_GET_HOST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_HOST.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_GET_HOST)
  return target;
}

size_t S_OFFICE_GET_HOST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_GET_HOST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_GET_HOST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_GET_HOST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_GET_HOST::GetClassData() const { return &_class_data_; }


void S_OFFICE_GET_HOST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_GET_HOST*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_GET_HOST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_GET_HOST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_GET_HOST::CopyFrom(const S_OFFICE_GET_HOST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_GET_HOST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_GET_HOST::IsInitialized() const {
  return true;
}

void S_OFFICE_GET_HOST::InternalSwap(S_OFFICE_GET_HOST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_GET_HOST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[8]);
}

// ===================================================================

class C_OFFICE_BREAK::_Internal {
 public:
};

C_OFFICE_BREAK::C_OFFICE_BREAK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_BREAK)
}
C_OFFICE_BREAK::C_OFFICE_BREAK(const C_OFFICE_BREAK& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_OFFICE_BREAK* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_BREAK)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_BREAK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_BREAK::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_BREAK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[9]);
}

// ===================================================================

class S_OFFICE_BREAK::_Internal {
 public:
};

S_OFFICE_BREAK::S_OFFICE_BREAK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_BREAK)
}
S_OFFICE_BREAK::S_OFFICE_BREAK(const S_OFFICE_BREAK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_BREAK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_BREAK)
}

inline void S_OFFICE_BREAK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_BREAK::~S_OFFICE_BREAK() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_BREAK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_BREAK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_BREAK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_BREAK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_BREAK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_BREAK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_BREAK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_BREAK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_BREAK)
  return target;
}

size_t S_OFFICE_BREAK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_BREAK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_BREAK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_BREAK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_BREAK::GetClassData() const { return &_class_data_; }


void S_OFFICE_BREAK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_BREAK*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_BREAK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_BREAK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_BREAK::CopyFrom(const S_OFFICE_BREAK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_BREAK::IsInitialized() const {
  return true;
}

void S_OFFICE_BREAK::InternalSwap(S_OFFICE_BREAK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_BREAK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[10]);
}

// ===================================================================

class C_OFFICE_KICK::_Internal {
 public:
};

C_OFFICE_KICK::C_OFFICE_KICK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_KICK)
}
C_OFFICE_KICK::C_OFFICE_KICK(const C_OFFICE_KICK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_OFFICE_KICK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_KICK)
}

inline void C_OFFICE_KICK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_OFFICE_KICK::~C_OFFICE_KICK() {
  // @@protoc_insertion_point(destructor:Protocol.C_OFFICE_KICK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_OFFICE_KICK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void C_OFFICE_KICK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_OFFICE_KICK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_OFFICE_KICK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_OFFICE_KICK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_OFFICE_KICK.clientId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_OFFICE_KICK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_OFFICE_KICK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_OFFICE_KICK.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_OFFICE_KICK)
  return target;
}

size_t C_OFFICE_KICK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_OFFICE_KICK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_KICK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_OFFICE_KICK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_KICK::GetClassData() const { return &_class_data_; }


void C_OFFICE_KICK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_OFFICE_KICK*>(&to_msg);
  auto& from = static_cast<const C_OFFICE_KICK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_OFFICE_KICK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_OFFICE_KICK::CopyFrom(const C_OFFICE_KICK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_OFFICE_KICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_OFFICE_KICK::IsInitialized() const {
  return true;
}

void C_OFFICE_KICK::InternalSwap(C_OFFICE_KICK* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_KICK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[11]);
}

// ===================================================================

class S_OFFICE_KICK::_Internal {
 public:
};

S_OFFICE_KICK::S_OFFICE_KICK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_KICK)
}
S_OFFICE_KICK::S_OFFICE_KICK(const S_OFFICE_KICK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_KICK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_KICK)
}

inline void S_OFFICE_KICK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_KICK::~S_OFFICE_KICK() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_KICK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_KICK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_KICK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_KICK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_KICK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_KICK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_KICK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_KICK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_KICK)
  return target;
}

size_t S_OFFICE_KICK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_KICK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_KICK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_KICK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_KICK::GetClassData() const { return &_class_data_; }


void S_OFFICE_KICK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_KICK*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_KICK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_KICK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_KICK::CopyFrom(const S_OFFICE_KICK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_KICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_KICK::IsInitialized() const {
  return true;
}

void S_OFFICE_KICK::InternalSwap(S_OFFICE_KICK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_KICK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[12]);
}

// ===================================================================

class USER_PERMISSION::_Internal {
 public:
};

USER_PERMISSION::USER_PERMISSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.USER_PERMISSION)
}
USER_PERMISSION::USER_PERMISSION(const USER_PERMISSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  USER_PERMISSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.screenpermission_){}
    , decltype(_impl_.chatpermission_){}
    , decltype(_impl_.voicepermission_){}
    , decltype(_impl_.videopermission_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.screenpermission_, &from._impl_.screenpermission_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.screenpermission_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.USER_PERMISSION)
}

inline void USER_PERMISSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.screenpermission_){false}
    , decltype(_impl_.chatpermission_){false}
    , decltype(_impl_.voicepermission_){false}
    , decltype(_impl_.videopermission_){false}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

USER_PERMISSION::~USER_PERMISSION() {
  // @@protoc_insertion_point(destructor:Protocol.USER_PERMISSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void USER_PERMISSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void USER_PERMISSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void USER_PERMISSION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.USER_PERMISSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  ::memset(&_impl_.screenpermission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.screenpermission_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USER_PERMISSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.USER_PERMISSION.clientId"));
        } else
          goto handle_unusual;
        continue;
      // bool screenPermission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.screenpermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool chatPermission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chatpermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool voicePermission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.voicepermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool videoPermission = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.videopermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* USER_PERMISSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.USER_PERMISSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.USER_PERMISSION.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // bool screenPermission = 2;
  if (this->_internal_screenpermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_screenpermission(), target);
  }

  // bool chatPermission = 3;
  if (this->_internal_chatpermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_chatpermission(), target);
  }

  // bool voicePermission = 4;
  if (this->_internal_voicepermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_voicepermission(), target);
  }

  // bool videoPermission = 5;
  if (this->_internal_videopermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_videopermission(), target);
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.USER_PERMISSION)
  return target;
}

size_t USER_PERMISSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.USER_PERMISSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // bool screenPermission = 2;
  if (this->_internal_screenpermission() != 0) {
    total_size += 1 + 1;
  }

  // bool chatPermission = 3;
  if (this->_internal_chatpermission() != 0) {
    total_size += 1 + 1;
  }

  // bool voicePermission = 4;
  if (this->_internal_voicepermission() != 0) {
    total_size += 1 + 1;
  }

  // bool videoPermission = 5;
  if (this->_internal_videopermission() != 0) {
    total_size += 1 + 1;
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData USER_PERMISSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    USER_PERMISSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*USER_PERMISSION::GetClassData() const { return &_class_data_; }


void USER_PERMISSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<USER_PERMISSION*>(&to_msg);
  auto& from = static_cast<const USER_PERMISSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.USER_PERMISSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_screenpermission() != 0) {
    _this->_internal_set_screenpermission(from._internal_screenpermission());
  }
  if (from._internal_chatpermission() != 0) {
    _this->_internal_set_chatpermission(from._internal_chatpermission());
  }
  if (from._internal_voicepermission() != 0) {
    _this->_internal_set_voicepermission(from._internal_voicepermission());
  }
  if (from._internal_videopermission() != 0) {
    _this->_internal_set_videopermission(from._internal_videopermission());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void USER_PERMISSION::CopyFrom(const USER_PERMISSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.USER_PERMISSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER_PERMISSION::IsInitialized() const {
  return true;
}

void USER_PERMISSION::InternalSwap(USER_PERMISSION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USER_PERMISSION, _impl_.type_)
      + sizeof(USER_PERMISSION::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(USER_PERMISSION, _impl_.screenpermission_)>(
          reinterpret_cast<char*>(&_impl_.screenpermission_),
          reinterpret_cast<char*>(&other->_impl_.screenpermission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USER_PERMISSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[13]);
}

// ===================================================================

class C_OFFICE_GET_PERMISSION::_Internal {
 public:
};

C_OFFICE_GET_PERMISSION::C_OFFICE_GET_PERMISSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_GET_PERMISSION)
}
C_OFFICE_GET_PERMISSION::C_OFFICE_GET_PERMISSION(const C_OFFICE_GET_PERMISSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_OFFICE_GET_PERMISSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_GET_PERMISSION)
}

inline void C_OFFICE_GET_PERMISSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_OFFICE_GET_PERMISSION::~C_OFFICE_GET_PERMISSION() {
  // @@protoc_insertion_point(destructor:Protocol.C_OFFICE_GET_PERMISSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_OFFICE_GET_PERMISSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
}

void C_OFFICE_GET_PERMISSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_OFFICE_GET_PERMISSION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_OFFICE_GET_PERMISSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_OFFICE_GET_PERMISSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_OFFICE_GET_PERMISSION.clientId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_OFFICE_GET_PERMISSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_OFFICE_GET_PERMISSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_OFFICE_GET_PERMISSION.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_OFFICE_GET_PERMISSION)
  return target;
}

size_t C_OFFICE_GET_PERMISSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_OFFICE_GET_PERMISSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_GET_PERMISSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_OFFICE_GET_PERMISSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_GET_PERMISSION::GetClassData() const { return &_class_data_; }


void C_OFFICE_GET_PERMISSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_OFFICE_GET_PERMISSION*>(&to_msg);
  auto& from = static_cast<const C_OFFICE_GET_PERMISSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_OFFICE_GET_PERMISSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_OFFICE_GET_PERMISSION::CopyFrom(const C_OFFICE_GET_PERMISSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_OFFICE_GET_PERMISSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_OFFICE_GET_PERMISSION::IsInitialized() const {
  return true;
}

void C_OFFICE_GET_PERMISSION::InternalSwap(C_OFFICE_GET_PERMISSION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_GET_PERMISSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[14]);
}

// ===================================================================

class S_OFFICE_GET_PERMISSION::_Internal {
 public:
};

S_OFFICE_GET_PERMISSION::S_OFFICE_GET_PERMISSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_GET_PERMISSION)
}
S_OFFICE_GET_PERMISSION::S_OFFICE_GET_PERMISSION(const S_OFFICE_GET_PERMISSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_GET_PERMISSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){from._impl_.permissions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_GET_PERMISSION)
}

inline void S_OFFICE_GET_PERMISSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_GET_PERMISSION::~S_OFFICE_GET_PERMISSION() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_GET_PERMISSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_GET_PERMISSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permissions_.~RepeatedPtrField();
}

void S_OFFICE_GET_PERMISSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_GET_PERMISSION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_GET_PERMISSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permissions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_GET_PERMISSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.USER_PERMISSION permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_GET_PERMISSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_GET_PERMISSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.USER_PERMISSION permissions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_GET_PERMISSION)
  return target;
}

size_t S_OFFICE_GET_PERMISSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_GET_PERMISSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.USER_PERMISSION permissions = 1;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_GET_PERMISSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_GET_PERMISSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_GET_PERMISSION::GetClassData() const { return &_class_data_; }


void S_OFFICE_GET_PERMISSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_GET_PERMISSION*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_GET_PERMISSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_GET_PERMISSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_GET_PERMISSION::CopyFrom(const S_OFFICE_GET_PERMISSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_GET_PERMISSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_GET_PERMISSION::IsInitialized() const {
  return true;
}

void S_OFFICE_GET_PERMISSION::InternalSwap(S_OFFICE_GET_PERMISSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_GET_PERMISSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[15]);
}

// ===================================================================

class C_OFFICE_SET_PERMISSION::_Internal {
 public:
};

C_OFFICE_SET_PERMISSION::C_OFFICE_SET_PERMISSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_SET_PERMISSION)
}
C_OFFICE_SET_PERMISSION::C_OFFICE_SET_PERMISSION(const C_OFFICE_SET_PERMISSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_OFFICE_SET_PERMISSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){from._impl_.permissions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_SET_PERMISSION)
}

inline void C_OFFICE_SET_PERMISSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_OFFICE_SET_PERMISSION::~C_OFFICE_SET_PERMISSION() {
  // @@protoc_insertion_point(destructor:Protocol.C_OFFICE_SET_PERMISSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_OFFICE_SET_PERMISSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permissions_.~RepeatedPtrField();
}

void C_OFFICE_SET_PERMISSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_OFFICE_SET_PERMISSION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_OFFICE_SET_PERMISSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permissions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_OFFICE_SET_PERMISSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.USER_PERMISSION permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_OFFICE_SET_PERMISSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_OFFICE_SET_PERMISSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.USER_PERMISSION permissions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_OFFICE_SET_PERMISSION)
  return target;
}

size_t C_OFFICE_SET_PERMISSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_OFFICE_SET_PERMISSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.USER_PERMISSION permissions = 1;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_SET_PERMISSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_OFFICE_SET_PERMISSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_SET_PERMISSION::GetClassData() const { return &_class_data_; }


void C_OFFICE_SET_PERMISSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_OFFICE_SET_PERMISSION*>(&to_msg);
  auto& from = static_cast<const C_OFFICE_SET_PERMISSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_OFFICE_SET_PERMISSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_OFFICE_SET_PERMISSION::CopyFrom(const C_OFFICE_SET_PERMISSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_OFFICE_SET_PERMISSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_OFFICE_SET_PERMISSION::IsInitialized() const {
  return true;
}

void C_OFFICE_SET_PERMISSION::InternalSwap(C_OFFICE_SET_PERMISSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_SET_PERMISSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[16]);
}

// ===================================================================

class S_OFFICE_SET_PERMISSION::_Internal {
 public:
};

S_OFFICE_SET_PERMISSION::S_OFFICE_SET_PERMISSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_SET_PERMISSION)
}
S_OFFICE_SET_PERMISSION::S_OFFICE_SET_PERMISSION(const S_OFFICE_SET_PERMISSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_SET_PERMISSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_SET_PERMISSION)
}

inline void S_OFFICE_SET_PERMISSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_SET_PERMISSION::~S_OFFICE_SET_PERMISSION() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_SET_PERMISSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_SET_PERMISSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_SET_PERMISSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_SET_PERMISSION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_SET_PERMISSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_SET_PERMISSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_SET_PERMISSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_SET_PERMISSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_SET_PERMISSION)
  return target;
}

size_t S_OFFICE_SET_PERMISSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_SET_PERMISSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_SET_PERMISSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_SET_PERMISSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_SET_PERMISSION::GetClassData() const { return &_class_data_; }


void S_OFFICE_SET_PERMISSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_SET_PERMISSION*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_SET_PERMISSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_SET_PERMISSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_SET_PERMISSION::CopyFrom(const S_OFFICE_SET_PERMISSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_SET_PERMISSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_SET_PERMISSION::IsInitialized() const {
  return true;
}

void S_OFFICE_SET_PERMISSION::InternalSwap(S_OFFICE_SET_PERMISSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_SET_PERMISSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[17]);
}

// ===================================================================

class S_OFFICE_SET_PERMISSION_NOTICE::_Internal {
 public:
};

S_OFFICE_SET_PERMISSION_NOTICE::S_OFFICE_SET_PERMISSION_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
}
S_OFFICE_SET_PERMISSION_NOTICE::S_OFFICE_SET_PERMISSION_NOTICE(const S_OFFICE_SET_PERMISSION_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_SET_PERMISSION_NOTICE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.screenpermission_){}
    , decltype(_impl_.chatpermission_){}
    , decltype(_impl_.voicepermission_){}
    , decltype(_impl_.videopermission_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.screenpermission_, &from._impl_.screenpermission_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.screenpermission_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
}

inline void S_OFFICE_SET_PERMISSION_NOTICE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.screenpermission_){false}
    , decltype(_impl_.chatpermission_){false}
    , decltype(_impl_.voicepermission_){false}
    , decltype(_impl_.videopermission_){false}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_SET_PERMISSION_NOTICE::~S_OFFICE_SET_PERMISSION_NOTICE() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_SET_PERMISSION_NOTICE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_SET_PERMISSION_NOTICE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_SET_PERMISSION_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.screenpermission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.screenpermission_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_SET_PERMISSION_NOTICE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool screenPermission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.screenpermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool chatPermission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chatpermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool voicePermission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.voicepermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool videoPermission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.videopermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_SET_PERMISSION_NOTICE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool screenPermission = 1;
  if (this->_internal_screenpermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_screenpermission(), target);
  }

  // bool chatPermission = 2;
  if (this->_internal_chatpermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_chatpermission(), target);
  }

  // bool voicePermission = 3;
  if (this->_internal_voicepermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_voicepermission(), target);
  }

  // bool videoPermission = 4;
  if (this->_internal_videopermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_videopermission(), target);
  }

  // int32 type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  return target;
}

size_t S_OFFICE_SET_PERMISSION_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool screenPermission = 1;
  if (this->_internal_screenpermission() != 0) {
    total_size += 1 + 1;
  }

  // bool chatPermission = 2;
  if (this->_internal_chatpermission() != 0) {
    total_size += 1 + 1;
  }

  // bool voicePermission = 3;
  if (this->_internal_voicepermission() != 0) {
    total_size += 1 + 1;
  }

  // bool videoPermission = 4;
  if (this->_internal_videopermission() != 0) {
    total_size += 1 + 1;
  }

  // int32 type = 5;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_SET_PERMISSION_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_SET_PERMISSION_NOTICE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_SET_PERMISSION_NOTICE::GetClassData() const { return &_class_data_; }


void S_OFFICE_SET_PERMISSION_NOTICE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_SET_PERMISSION_NOTICE*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_SET_PERMISSION_NOTICE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_screenpermission() != 0) {
    _this->_internal_set_screenpermission(from._internal_screenpermission());
  }
  if (from._internal_chatpermission() != 0) {
    _this->_internal_set_chatpermission(from._internal_chatpermission());
  }
  if (from._internal_voicepermission() != 0) {
    _this->_internal_set_voicepermission(from._internal_voicepermission());
  }
  if (from._internal_videopermission() != 0) {
    _this->_internal_set_videopermission(from._internal_videopermission());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_SET_PERMISSION_NOTICE::CopyFrom(const S_OFFICE_SET_PERMISSION_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_SET_PERMISSION_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_SET_PERMISSION_NOTICE::IsInitialized() const {
  return true;
}

void S_OFFICE_SET_PERMISSION_NOTICE::InternalSwap(S_OFFICE_SET_PERMISSION_NOTICE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_OFFICE_SET_PERMISSION_NOTICE, _impl_.type_)
      + sizeof(S_OFFICE_SET_PERMISSION_NOTICE::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(S_OFFICE_SET_PERMISSION_NOTICE, _impl_.screenpermission_)>(
          reinterpret_cast<char*>(&_impl_.screenpermission_),
          reinterpret_cast<char*>(&other->_impl_.screenpermission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_SET_PERMISSION_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[18]);
}

// ===================================================================

class C_OFFICE_SET_ROOM_INFO::_Internal {
 public:
};

C_OFFICE_SET_ROOM_INFO::C_OFFICE_SET_ROOM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_SET_ROOM_INFO)
}
C_OFFICE_SET_ROOM_INFO::C_OFFICE_SET_ROOM_INFO(const C_OFFICE_SET_ROOM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_OFFICE_SET_ROOM_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.personnel_){}
    , decltype(_impl_.isshutdown_){}
    , decltype(_impl_.isadvertising_){}
    , decltype(_impl_.iswaitingroom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.personnel_, &from._impl_.personnel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.iswaitingroom_) -
    reinterpret_cast<char*>(&_impl_.personnel_)) + sizeof(_impl_.iswaitingroom_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_SET_ROOM_INFO)
}

inline void C_OFFICE_SET_ROOM_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.personnel_){0}
    , decltype(_impl_.isshutdown_){false}
    , decltype(_impl_.isadvertising_){false}
    , decltype(_impl_.iswaitingroom_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_OFFICE_SET_ROOM_INFO::~C_OFFICE_SET_ROOM_INFO() {
  // @@protoc_insertion_point(destructor:Protocol.C_OFFICE_SET_ROOM_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_OFFICE_SET_ROOM_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void C_OFFICE_SET_ROOM_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_OFFICE_SET_ROOM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_OFFICE_SET_ROOM_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  ::memset(&_impl_.personnel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.iswaitingroom_) -
      reinterpret_cast<char*>(&_impl_.personnel_)) + sizeof(_impl_.iswaitingroom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_OFFICE_SET_ROOM_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 personnel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.personnel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_OFFICE_SET_ROOM_INFO.password"));
        } else
          goto handle_unusual;
        continue;
      // bool isShutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isshutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isAdvertising = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isadvertising_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isWaitingRoom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.iswaitingroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_OFFICE_SET_ROOM_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_OFFICE_SET_ROOM_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 personnel = 1;
  if (this->_internal_personnel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_personnel(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_OFFICE_SET_ROOM_INFO.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // bool isShutdown = 3;
  if (this->_internal_isshutdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isshutdown(), target);
  }

  // bool isAdvertising = 4;
  if (this->_internal_isadvertising() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isadvertising(), target);
  }

  // bool isWaitingRoom = 5;
  if (this->_internal_iswaitingroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_iswaitingroom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_OFFICE_SET_ROOM_INFO)
  return target;
}

size_t C_OFFICE_SET_ROOM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_OFFICE_SET_ROOM_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 personnel = 1;
  if (this->_internal_personnel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_personnel());
  }

  // bool isShutdown = 3;
  if (this->_internal_isshutdown() != 0) {
    total_size += 1 + 1;
  }

  // bool isAdvertising = 4;
  if (this->_internal_isadvertising() != 0) {
    total_size += 1 + 1;
  }

  // bool isWaitingRoom = 5;
  if (this->_internal_iswaitingroom() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_SET_ROOM_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_OFFICE_SET_ROOM_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_SET_ROOM_INFO::GetClassData() const { return &_class_data_; }


void C_OFFICE_SET_ROOM_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_OFFICE_SET_ROOM_INFO*>(&to_msg);
  auto& from = static_cast<const C_OFFICE_SET_ROOM_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_OFFICE_SET_ROOM_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_personnel() != 0) {
    _this->_internal_set_personnel(from._internal_personnel());
  }
  if (from._internal_isshutdown() != 0) {
    _this->_internal_set_isshutdown(from._internal_isshutdown());
  }
  if (from._internal_isadvertising() != 0) {
    _this->_internal_set_isadvertising(from._internal_isadvertising());
  }
  if (from._internal_iswaitingroom() != 0) {
    _this->_internal_set_iswaitingroom(from._internal_iswaitingroom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_OFFICE_SET_ROOM_INFO::CopyFrom(const C_OFFICE_SET_ROOM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_OFFICE_SET_ROOM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_OFFICE_SET_ROOM_INFO::IsInitialized() const {
  return true;
}

void C_OFFICE_SET_ROOM_INFO::InternalSwap(C_OFFICE_SET_ROOM_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_OFFICE_SET_ROOM_INFO, _impl_.iswaitingroom_)
      + sizeof(C_OFFICE_SET_ROOM_INFO::_impl_.iswaitingroom_)
      - PROTOBUF_FIELD_OFFSET(C_OFFICE_SET_ROOM_INFO, _impl_.personnel_)>(
          reinterpret_cast<char*>(&_impl_.personnel_),
          reinterpret_cast<char*>(&other->_impl_.personnel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_SET_ROOM_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[19]);
}

// ===================================================================

class S_OFFICE_SET_ROOM_INFO::_Internal {
 public:
};

S_OFFICE_SET_ROOM_INFO::S_OFFICE_SET_ROOM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_SET_ROOM_INFO)
}
S_OFFICE_SET_ROOM_INFO::S_OFFICE_SET_ROOM_INFO(const S_OFFICE_SET_ROOM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_SET_ROOM_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_SET_ROOM_INFO)
}

inline void S_OFFICE_SET_ROOM_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OFFICE_SET_ROOM_INFO::~S_OFFICE_SET_ROOM_INFO() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_SET_ROOM_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_SET_ROOM_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OFFICE_SET_ROOM_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_SET_ROOM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_SET_ROOM_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_SET_ROOM_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_SET_ROOM_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_SET_ROOM_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_SET_ROOM_INFO)
  return target;
}

size_t S_OFFICE_SET_ROOM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_SET_ROOM_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_SET_ROOM_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_SET_ROOM_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_SET_ROOM_INFO::GetClassData() const { return &_class_data_; }


void S_OFFICE_SET_ROOM_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_SET_ROOM_INFO*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_SET_ROOM_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_SET_ROOM_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_SET_ROOM_INFO::CopyFrom(const S_OFFICE_SET_ROOM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_SET_ROOM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_SET_ROOM_INFO::IsInitialized() const {
  return true;
}

void S_OFFICE_SET_ROOM_INFO::InternalSwap(S_OFFICE_SET_ROOM_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_SET_ROOM_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[20]);
}

// ===================================================================

class C_OFFICE_GET_ROOM_INFO::_Internal {
 public:
};

C_OFFICE_GET_ROOM_INFO::C_OFFICE_GET_ROOM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_GET_ROOM_INFO)
}
C_OFFICE_GET_ROOM_INFO::C_OFFICE_GET_ROOM_INFO(const C_OFFICE_GET_ROOM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_OFFICE_GET_ROOM_INFO* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_GET_ROOM_INFO)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_GET_ROOM_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_GET_ROOM_INFO::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_GET_ROOM_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[21]);
}

// ===================================================================

class S_OFFICE_GET_ROOM_INFO::_Internal {
 public:
};

S_OFFICE_GET_ROOM_INFO::S_OFFICE_GET_ROOM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_GET_ROOM_INFO)
}
S_OFFICE_GET_ROOM_INFO::S_OFFICE_GET_ROOM_INFO(const S_OFFICE_GET_ROOM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_GET_ROOM_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomname_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.spaceinfoid_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.roomcode_){}
    , decltype(_impl_.hostnickname_){}
    , decltype(_impl_.topictype_){}
    , decltype(_impl_.personnel_){}
    , decltype(_impl_.currentpersonnel_){}
    , decltype(_impl_.isadvertising_){}
    , decltype(_impl_.iswaitingroom_){}
    , decltype(_impl_.isshutdown_){}
    , decltype(_impl_.runningtime_){}
    , decltype(_impl_.passedtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    _this->_impl_.roomname_.Set(from._internal_roomname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.spaceinfoid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spaceinfoid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spaceinfoid().empty()) {
    _this->_impl_.spaceinfoid_.Set(from._internal_spaceinfoid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail().empty()) {
    _this->_impl_.thumbnail_.Set(from._internal_thumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.roomcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomcode().empty()) {
    _this->_impl_.roomcode_.Set(from._internal_roomcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostnickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostnickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostnickname().empty()) {
    _this->_impl_.hostnickname_.Set(from._internal_hostnickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.topictype_, &from._impl_.topictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.passedtime_) -
    reinterpret_cast<char*>(&_impl_.topictype_)) + sizeof(_impl_.passedtime_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_GET_ROOM_INFO)
}

inline void S_OFFICE_GET_ROOM_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomname_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.spaceinfoid_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.roomcode_){}
    , decltype(_impl_.hostnickname_){}
    , decltype(_impl_.topictype_){0}
    , decltype(_impl_.personnel_){0}
    , decltype(_impl_.currentpersonnel_){0}
    , decltype(_impl_.isadvertising_){false}
    , decltype(_impl_.iswaitingroom_){false}
    , decltype(_impl_.isshutdown_){false}
    , decltype(_impl_.runningtime_){0}
    , decltype(_impl_.passedtime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.spaceinfoid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spaceinfoid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.roomcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostnickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostnickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_OFFICE_GET_ROOM_INFO::~S_OFFICE_GET_ROOM_INFO() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_GET_ROOM_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_GET_ROOM_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roomname_.Destroy();
  _impl_.description_.Destroy();
  _impl_.password_.Destroy();
  _impl_.spaceinfoid_.Destroy();
  _impl_.thumbnail_.Destroy();
  _impl_.roomcode_.Destroy();
  _impl_.hostnickname_.Destroy();
}

void S_OFFICE_GET_ROOM_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_GET_ROOM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_GET_ROOM_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomname_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.spaceinfoid_.ClearToEmpty();
  _impl_.thumbnail_.ClearToEmpty();
  _impl_.roomcode_.ClearToEmpty();
  _impl_.hostnickname_.ClearToEmpty();
  ::memset(&_impl_.topictype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.passedtime_) -
      reinterpret_cast<char*>(&_impl_.topictype_)) + sizeof(_impl_.passedtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_GET_ROOM_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.roomName"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.description"));
        } else
          goto handle_unusual;
        continue;
      // int32 topicType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.topictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.password"));
        } else
          goto handle_unusual;
        continue;
      // string spaceInfoId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_spaceinfoid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.spaceInfoId"));
        } else
          goto handle_unusual;
        continue;
      // int32 personnel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.personnel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentPersonnel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.currentpersonnel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isAdvertising = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.isadvertising_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string thumbnail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.thumbnail"));
        } else
          goto handle_unusual;
        continue;
      // bool isWaitingRoom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.iswaitingroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isShutdown = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.isshutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 runningTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.runningtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 passedTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.passedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomcode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_roomcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.roomcode"));
        } else
          goto handle_unusual;
        continue;
      // string hostNickname = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_hostnickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_GET_ROOM_INFO.hostNickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_GET_ROOM_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_GET_ROOM_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // int32 topicType = 3;
  if (this->_internal_topictype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_topictype(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string spaceInfoId = 5;
  if (!this->_internal_spaceinfoid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spaceinfoid().data(), static_cast<int>(this->_internal_spaceinfoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.spaceInfoId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_spaceinfoid(), target);
  }

  // int32 personnel = 6;
  if (this->_internal_personnel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_personnel(), target);
  }

  // int32 currentPersonnel = 7;
  if (this->_internal_currentpersonnel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_currentpersonnel(), target);
  }

  // bool isAdvertising = 8;
  if (this->_internal_isadvertising() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_isadvertising(), target);
  }

  // string thumbnail = 9;
  if (!this->_internal_thumbnail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail().data(), static_cast<int>(this->_internal_thumbnail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.thumbnail");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_thumbnail(), target);
  }

  // bool isWaitingRoom = 10;
  if (this->_internal_iswaitingroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_iswaitingroom(), target);
  }

  // bool isShutdown = 11;
  if (this->_internal_isshutdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_isshutdown(), target);
  }

  // int32 runningTime = 12;
  if (this->_internal_runningtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_runningtime(), target);
  }

  // int32 passedTime = 13;
  if (this->_internal_passedtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_passedtime(), target);
  }

  // string roomcode = 14;
  if (!this->_internal_roomcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomcode().data(), static_cast<int>(this->_internal_roomcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.roomcode");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_roomcode(), target);
  }

  // string hostNickname = 15;
  if (!this->_internal_hostnickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostnickname().data(), static_cast<int>(this->_internal_hostnickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_GET_ROOM_INFO.hostNickname");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_hostnickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_GET_ROOM_INFO)
  return target;
}

size_t S_OFFICE_GET_ROOM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_GET_ROOM_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string spaceInfoId = 5;
  if (!this->_internal_spaceinfoid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spaceinfoid());
  }

  // string thumbnail = 9;
  if (!this->_internal_thumbnail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail());
  }

  // string roomcode = 14;
  if (!this->_internal_roomcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomcode());
  }

  // string hostNickname = 15;
  if (!this->_internal_hostnickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostnickname());
  }

  // int32 topicType = 3;
  if (this->_internal_topictype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_topictype());
  }

  // int32 personnel = 6;
  if (this->_internal_personnel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_personnel());
  }

  // int32 currentPersonnel = 7;
  if (this->_internal_currentpersonnel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentpersonnel());
  }

  // bool isAdvertising = 8;
  if (this->_internal_isadvertising() != 0) {
    total_size += 1 + 1;
  }

  // bool isWaitingRoom = 10;
  if (this->_internal_iswaitingroom() != 0) {
    total_size += 1 + 1;
  }

  // bool isShutdown = 11;
  if (this->_internal_isshutdown() != 0) {
    total_size += 1 + 1;
  }

  // int32 runningTime = 12;
  if (this->_internal_runningtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_runningtime());
  }

  // int32 passedTime = 13;
  if (this->_internal_passedtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_passedtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_GET_ROOM_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_GET_ROOM_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_GET_ROOM_INFO::GetClassData() const { return &_class_data_; }


void S_OFFICE_GET_ROOM_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_GET_ROOM_INFO*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_GET_ROOM_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_GET_ROOM_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _this->_internal_set_roomname(from._internal_roomname());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_spaceinfoid().empty()) {
    _this->_internal_set_spaceinfoid(from._internal_spaceinfoid());
  }
  if (!from._internal_thumbnail().empty()) {
    _this->_internal_set_thumbnail(from._internal_thumbnail());
  }
  if (!from._internal_roomcode().empty()) {
    _this->_internal_set_roomcode(from._internal_roomcode());
  }
  if (!from._internal_hostnickname().empty()) {
    _this->_internal_set_hostnickname(from._internal_hostnickname());
  }
  if (from._internal_topictype() != 0) {
    _this->_internal_set_topictype(from._internal_topictype());
  }
  if (from._internal_personnel() != 0) {
    _this->_internal_set_personnel(from._internal_personnel());
  }
  if (from._internal_currentpersonnel() != 0) {
    _this->_internal_set_currentpersonnel(from._internal_currentpersonnel());
  }
  if (from._internal_isadvertising() != 0) {
    _this->_internal_set_isadvertising(from._internal_isadvertising());
  }
  if (from._internal_iswaitingroom() != 0) {
    _this->_internal_set_iswaitingroom(from._internal_iswaitingroom());
  }
  if (from._internal_isshutdown() != 0) {
    _this->_internal_set_isshutdown(from._internal_isshutdown());
  }
  if (from._internal_runningtime() != 0) {
    _this->_internal_set_runningtime(from._internal_runningtime());
  }
  if (from._internal_passedtime() != 0) {
    _this->_internal_set_passedtime(from._internal_passedtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_GET_ROOM_INFO::CopyFrom(const S_OFFICE_GET_ROOM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_GET_ROOM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_GET_ROOM_INFO::IsInitialized() const {
  return true;
}

void S_OFFICE_GET_ROOM_INFO::InternalSwap(S_OFFICE_GET_ROOM_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomname_, lhs_arena,
      &other->_impl_.roomname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spaceinfoid_, lhs_arena,
      &other->_impl_.spaceinfoid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_, lhs_arena,
      &other->_impl_.thumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomcode_, lhs_arena,
      &other->_impl_.roomcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostnickname_, lhs_arena,
      &other->_impl_.hostnickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_OFFICE_GET_ROOM_INFO, _impl_.passedtime_)
      + sizeof(S_OFFICE_GET_ROOM_INFO::_impl_.passedtime_)
      - PROTOBUF_FIELD_OFFSET(S_OFFICE_GET_ROOM_INFO, _impl_.topictype_)>(
          reinterpret_cast<char*>(&_impl_.topictype_),
          reinterpret_cast<char*>(&other->_impl_.topictype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_GET_ROOM_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[22]);
}

// ===================================================================

class C_OFFICE_VIDEO_STREAM::_Internal {
 public:
};

C_OFFICE_VIDEO_STREAM::C_OFFICE_VIDEO_STREAM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_OFFICE_VIDEO_STREAM)
}
C_OFFICE_VIDEO_STREAM::C_OFFICE_VIDEO_STREAM(const C_OFFICE_VIDEO_STREAM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_OFFICE_VIDEO_STREAM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.play_){}
    , decltype(_impl_.seek_){}
    , decltype(_impl_.mediaplayerstate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mediaplayerstate_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mediaplayerstate_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_OFFICE_VIDEO_STREAM)
}

inline void C_OFFICE_VIDEO_STREAM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.play_){false}
    , decltype(_impl_.seek_){false}
    , decltype(_impl_.mediaplayerstate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_OFFICE_VIDEO_STREAM::~C_OFFICE_VIDEO_STREAM() {
  // @@protoc_insertion_point(destructor:Protocol.C_OFFICE_VIDEO_STREAM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_OFFICE_VIDEO_STREAM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.url_.Destroy();
}

void C_OFFICE_VIDEO_STREAM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_OFFICE_VIDEO_STREAM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_OFFICE_VIDEO_STREAM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  ::memset(&_impl_.volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mediaplayerstate_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mediaplayerstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_OFFICE_VIDEO_STREAM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_OFFICE_VIDEO_STREAM.clientid"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_OFFICE_VIDEO_STREAM.url"));
        } else
          goto handle_unusual;
        continue;
      // float volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool play = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool seek = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.seek_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mediaPlayerState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mediaplayerstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_OFFICE_VIDEO_STREAM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_OFFICE_VIDEO_STREAM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientid = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_OFFICE_VIDEO_STREAM.clientid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_OFFICE_VIDEO_STREAM.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // float volume = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume = this->_internal_volume();
  uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_volume(), target);
  }

  // float time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_time(), target);
  }

  // bool play = 5;
  if (this->_internal_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_play(), target);
  }

  // bool seek = 6;
  if (this->_internal_seek() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_seek(), target);
  }

  // int32 mediaPlayerState = 7;
  if (this->_internal_mediaplayerstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_mediaplayerstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_OFFICE_VIDEO_STREAM)
  return target;
}

size_t C_OFFICE_VIDEO_STREAM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_OFFICE_VIDEO_STREAM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientid = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // float volume = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume = this->_internal_volume();
  uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    total_size += 1 + 4;
  }

  // float time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 4;
  }

  // bool play = 5;
  if (this->_internal_play() != 0) {
    total_size += 1 + 1;
  }

  // bool seek = 6;
  if (this->_internal_seek() != 0) {
    total_size += 1 + 1;
  }

  // int32 mediaPlayerState = 7;
  if (this->_internal_mediaplayerstate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mediaplayerstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_OFFICE_VIDEO_STREAM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_OFFICE_VIDEO_STREAM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_OFFICE_VIDEO_STREAM::GetClassData() const { return &_class_data_; }


void C_OFFICE_VIDEO_STREAM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_OFFICE_VIDEO_STREAM*>(&to_msg);
  auto& from = static_cast<const C_OFFICE_VIDEO_STREAM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_OFFICE_VIDEO_STREAM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume = from._internal_volume();
  uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_play() != 0) {
    _this->_internal_set_play(from._internal_play());
  }
  if (from._internal_seek() != 0) {
    _this->_internal_set_seek(from._internal_seek());
  }
  if (from._internal_mediaplayerstate() != 0) {
    _this->_internal_set_mediaplayerstate(from._internal_mediaplayerstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_OFFICE_VIDEO_STREAM::CopyFrom(const C_OFFICE_VIDEO_STREAM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_OFFICE_VIDEO_STREAM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_OFFICE_VIDEO_STREAM::IsInitialized() const {
  return true;
}

void C_OFFICE_VIDEO_STREAM::InternalSwap(C_OFFICE_VIDEO_STREAM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_OFFICE_VIDEO_STREAM, _impl_.mediaplayerstate_)
      + sizeof(C_OFFICE_VIDEO_STREAM::_impl_.mediaplayerstate_)
      - PROTOBUF_FIELD_OFFSET(C_OFFICE_VIDEO_STREAM, _impl_.volume_)>(
          reinterpret_cast<char*>(&_impl_.volume_),
          reinterpret_cast<char*>(&other->_impl_.volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_OFFICE_VIDEO_STREAM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[23]);
}

// ===================================================================

class S_OFFICE_VIDEO_STREAM::_Internal {
 public:
};

S_OFFICE_VIDEO_STREAM::S_OFFICE_VIDEO_STREAM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OFFICE_VIDEO_STREAM)
}
S_OFFICE_VIDEO_STREAM::S_OFFICE_VIDEO_STREAM(const S_OFFICE_VIDEO_STREAM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OFFICE_VIDEO_STREAM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.play_){}
    , decltype(_impl_.seek_){}
    , decltype(_impl_.mediaplayerstate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mediaplayerstate_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mediaplayerstate_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OFFICE_VIDEO_STREAM)
}

inline void S_OFFICE_VIDEO_STREAM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.play_){false}
    , decltype(_impl_.seek_){false}
    , decltype(_impl_.mediaplayerstate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_OFFICE_VIDEO_STREAM::~S_OFFICE_VIDEO_STREAM() {
  // @@protoc_insertion_point(destructor:Protocol.S_OFFICE_VIDEO_STREAM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OFFICE_VIDEO_STREAM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void S_OFFICE_VIDEO_STREAM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OFFICE_VIDEO_STREAM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OFFICE_VIDEO_STREAM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  ::memset(&_impl_.volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mediaplayerstate_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mediaplayerstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OFFICE_VIDEO_STREAM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_OFFICE_VIDEO_STREAM.url"));
        } else
          goto handle_unusual;
        continue;
      // float volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool play = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool seek = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.seek_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mediaPlayerState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mediaplayerstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OFFICE_VIDEO_STREAM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OFFICE_VIDEO_STREAM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_OFFICE_VIDEO_STREAM.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // float volume = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume = this->_internal_volume();
  uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_volume(), target);
  }

  // float time = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_time(), target);
  }

  // bool play = 4;
  if (this->_internal_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_play(), target);
  }

  // bool seek = 5;
  if (this->_internal_seek() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_seek(), target);
  }

  // int32 mediaPlayerState = 6;
  if (this->_internal_mediaplayerstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mediaplayerstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OFFICE_VIDEO_STREAM)
  return target;
}

size_t S_OFFICE_VIDEO_STREAM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OFFICE_VIDEO_STREAM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // float volume = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume = this->_internal_volume();
  uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    total_size += 1 + 4;
  }

  // float time = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 4;
  }

  // bool play = 4;
  if (this->_internal_play() != 0) {
    total_size += 1 + 1;
  }

  // bool seek = 5;
  if (this->_internal_seek() != 0) {
    total_size += 1 + 1;
  }

  // int32 mediaPlayerState = 6;
  if (this->_internal_mediaplayerstate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mediaplayerstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OFFICE_VIDEO_STREAM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OFFICE_VIDEO_STREAM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OFFICE_VIDEO_STREAM::GetClassData() const { return &_class_data_; }


void S_OFFICE_VIDEO_STREAM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OFFICE_VIDEO_STREAM*>(&to_msg);
  auto& from = static_cast<const S_OFFICE_VIDEO_STREAM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OFFICE_VIDEO_STREAM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume = from._internal_volume();
  uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_play() != 0) {
    _this->_internal_set_play(from._internal_play());
  }
  if (from._internal_seek() != 0) {
    _this->_internal_set_seek(from._internal_seek());
  }
  if (from._internal_mediaplayerstate() != 0) {
    _this->_internal_set_mediaplayerstate(from._internal_mediaplayerstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OFFICE_VIDEO_STREAM::CopyFrom(const S_OFFICE_VIDEO_STREAM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OFFICE_VIDEO_STREAM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OFFICE_VIDEO_STREAM::IsInitialized() const {
  return true;
}

void S_OFFICE_VIDEO_STREAM::InternalSwap(S_OFFICE_VIDEO_STREAM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_OFFICE_VIDEO_STREAM, _impl_.mediaplayerstate_)
      + sizeof(S_OFFICE_VIDEO_STREAM::_impl_.mediaplayerstate_)
      - PROTOBUF_FIELD_OFFSET(S_OFFICE_VIDEO_STREAM, _impl_.volume_)>(
          reinterpret_cast<char*>(&_impl_.volume_),
          reinterpret_cast<char*>(&other->_impl_.volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OFFICE_VIDEO_STREAM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f004_5fOffice_2eproto_getter, &descriptor_table_Packet_5f004_5fOffice_2eproto_once,
      file_level_metadata_Packet_5f004_5fOffice_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_GET_WAITING_LIST*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_GET_WAITING_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_GET_WAITING_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::WaitClient*
Arena::CreateMaybeMessage< ::Protocol::WaitClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::WaitClient >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_ADD_WAITING_CLIENT*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_ADD_WAITING_CLIENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_ADD_WAITING_CLIENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_REMOVE_WAITING_CLIENT*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_REMOVE_WAITING_CLIENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_REMOVE_WAITING_CLIENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_ACCEPT_WAIT*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_ACCEPT_WAIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_ACCEPT_WAIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_ACCEPT_WAIT*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_ACCEPT_WAIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_ACCEPT_WAIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_ACCEPT_WAIT_NOTICE*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_ACCEPT_WAIT_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_ACCEPT_WAIT_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_GET_HOST*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_GET_HOST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_GET_HOST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_GET_HOST*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_GET_HOST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_GET_HOST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_BREAK*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_BREAK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_BREAK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_BREAK*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_BREAK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_BREAK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_KICK*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_KICK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_KICK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_KICK*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_KICK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_KICK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::USER_PERMISSION*
Arena::CreateMaybeMessage< ::Protocol::USER_PERMISSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::USER_PERMISSION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_GET_PERMISSION*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_GET_PERMISSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_GET_PERMISSION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_GET_PERMISSION*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_GET_PERMISSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_GET_PERMISSION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_SET_PERMISSION*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_SET_PERMISSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_SET_PERMISSION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_SET_PERMISSION*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_SET_PERMISSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_SET_PERMISSION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_SET_PERMISSION_NOTICE*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_SET_PERMISSION_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_SET_PERMISSION_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_SET_ROOM_INFO*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_SET_ROOM_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_SET_ROOM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_SET_ROOM_INFO*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_SET_ROOM_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_SET_ROOM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_GET_ROOM_INFO*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_GET_ROOM_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_GET_ROOM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_GET_ROOM_INFO*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_GET_ROOM_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_GET_ROOM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_OFFICE_VIDEO_STREAM*
Arena::CreateMaybeMessage< ::Protocol::C_OFFICE_VIDEO_STREAM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_OFFICE_VIDEO_STREAM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OFFICE_VIDEO_STREAM*
Arena::CreateMaybeMessage< ::Protocol::S_OFFICE_VIDEO_STREAM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OFFICE_VIDEO_STREAM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
