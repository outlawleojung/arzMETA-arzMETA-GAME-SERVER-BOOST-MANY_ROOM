// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_001_Base.proto

#include "Packet_001_Base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_INSTANTIATE_OBJECT::C_BASE_INSTANTIATE_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prefabname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BASE_INSTANTIATE_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_INSTANTIATE_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_INSTANTIATE_OBJECTDefaultTypeInternal() {}
  union {
    C_BASE_INSTANTIATE_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_INSTANTIATE_OBJECTDefaultTypeInternal _C_BASE_INSTANTIATE_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_INSTANTIATE_OBJECT::S_BASE_INSTANTIATE_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_INSTANTIATE_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_INSTANTIATE_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_INSTANTIATE_OBJECTDefaultTypeInternal() {}
  union {
    S_BASE_INSTANTIATE_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_INSTANTIATE_OBJECTDefaultTypeInternal _S_BASE_INSTANTIATE_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_REMOVE_OBJECT::C_BASE_REMOVE_OBJECT(
    ::_pbi::ConstantInitialized) {}
struct C_BASE_REMOVE_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_REMOVE_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_REMOVE_OBJECTDefaultTypeInternal() {}
  union {
    C_BASE_REMOVE_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_REMOVE_OBJECTDefaultTypeInternal _C_BASE_REMOVE_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_GET_OBJECT::C_BASE_GET_OBJECT(
    ::_pbi::ConstantInitialized) {}
struct C_BASE_GET_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_GET_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_GET_OBJECTDefaultTypeInternal() {}
  union {
    C_BASE_GET_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_GET_OBJECTDefaultTypeInternal _C_BASE_GET_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_ADD_OBJECT_GameObjectInfo::S_BASE_ADD_OBJECT_GameObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prefabname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ownerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_ADD_OBJECT_GameObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_ADD_OBJECT_GameObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_ADD_OBJECT_GameObjectInfoDefaultTypeInternal() {}
  union {
    S_BASE_ADD_OBJECT_GameObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_ADD_OBJECT_GameObjectInfoDefaultTypeInternal _S_BASE_ADD_OBJECT_GameObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_ADD_OBJECT::S_BASE_ADD_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameobjects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_ADD_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_ADD_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_ADD_OBJECTDefaultTypeInternal() {}
  union {
    S_BASE_ADD_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_ADD_OBJECTDefaultTypeInternal _S_BASE_ADD_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_REMOVE_OBJECT::S_BASE_REMOVE_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameobjects_)*/{}
  , /*decltype(_impl_._gameobjects_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_REMOVE_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_REMOVE_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_REMOVE_OBJECTDefaultTypeInternal() {}
  union {
    S_BASE_REMOVE_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_REMOVE_OBJECTDefaultTypeInternal _S_BASE_REMOVE_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_SET_OBJECT_DATA::C_BASE_SET_OBJECT_DATA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BASE_SET_OBJECT_DATADefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_SET_OBJECT_DATADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_SET_OBJECT_DATADefaultTypeInternal() {}
  union {
    C_BASE_SET_OBJECT_DATA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_SET_OBJECT_DATADefaultTypeInternal _C_BASE_SET_OBJECT_DATA_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_SET_OBJECT_DATA::S_BASE_SET_OBJECT_DATA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_SET_OBJECT_DATADefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_SET_OBJECT_DATADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_SET_OBJECT_DATADefaultTypeInternal() {}
  union {
    S_BASE_SET_OBJECT_DATA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_SET_OBJECT_DATADefaultTypeInternal _S_BASE_SET_OBJECT_DATA_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_SET_OBJECT_DATA_NOTICE::S_BASE_SET_OBJECT_DATA_NOTICE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_SET_OBJECT_DATA_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_SET_OBJECT_DATA_NOTICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_SET_OBJECT_DATA_NOTICEDefaultTypeInternal() {}
  union {
    S_BASE_SET_OBJECT_DATA_NOTICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_SET_OBJECT_DATA_NOTICEDefaultTypeInternal _S_BASE_SET_OBJECT_DATA_NOTICE_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_SET_TRANSFORM::C_BASE_SET_TRANSFORM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BASE_SET_TRANSFORMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_SET_TRANSFORMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_SET_TRANSFORMDefaultTypeInternal() {}
  union {
    C_BASE_SET_TRANSFORM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_SET_TRANSFORMDefaultTypeInternal _C_BASE_SET_TRANSFORM_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_SET_TRANSFORM::S_BASE_SET_TRANSFORM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_SET_TRANSFORMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_SET_TRANSFORMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_SET_TRANSFORMDefaultTypeInternal() {}
  union {
    S_BASE_SET_TRANSFORM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_SET_TRANSFORMDefaultTypeInternal _S_BASE_SET_TRANSFORM_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_SET_ANIMATION::C_BASE_SET_ANIMATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.animationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.animation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BASE_SET_ANIMATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_SET_ANIMATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_SET_ANIMATIONDefaultTypeInternal() {}
  union {
    C_BASE_SET_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_SET_ANIMATIONDefaultTypeInternal _C_BASE_SET_ANIMATION_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_SET_ANIMATION::S_BASE_SET_ANIMATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.animationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.animation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_SET_ANIMATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_SET_ANIMATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_SET_ANIMATIONDefaultTypeInternal() {}
  union {
    S_BASE_SET_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_SET_ANIMATIONDefaultTypeInternal _S_BASE_SET_ANIMATION_default_instance_;
PROTOBUF_CONSTEXPR C_BASE_SET_ANIMATION_ONCE::C_BASE_SET_ANIMATION_ONCE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.animationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_.isloop_)*/false
  , /*decltype(_impl_.blend_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BASE_SET_ANIMATION_ONCEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BASE_SET_ANIMATION_ONCEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BASE_SET_ANIMATION_ONCEDefaultTypeInternal() {}
  union {
    C_BASE_SET_ANIMATION_ONCE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BASE_SET_ANIMATION_ONCEDefaultTypeInternal _C_BASE_SET_ANIMATION_ONCE_default_instance_;
PROTOBUF_CONSTEXPR S_BASE_SET_ANIMATION_ONCE::S_BASE_SET_ANIMATION_ONCE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.animationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_.isloop_)*/false
  , /*decltype(_impl_.blend_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BASE_SET_ANIMATION_ONCEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BASE_SET_ANIMATION_ONCEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BASE_SET_ANIMATION_ONCEDefaultTypeInternal() {}
  union {
    S_BASE_SET_ANIMATION_ONCE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BASE_SET_ANIMATION_ONCEDefaultTypeInternal _S_BASE_SET_ANIMATION_ONCE_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Packet_5f001_5fBase_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_5f001_5fBase_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_5f001_5fBase_2eproto = nullptr;

const uint32_t TableStruct_Packet_5f001_5fBase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_INSTANTIATE_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_INSTANTIATE_OBJECT, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_INSTANTIATE_OBJECT, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_INSTANTIATE_OBJECT, _impl_.prefabname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_INSTANTIATE_OBJECT, _impl_.objectdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_INSTANTIATE_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_INSTANTIATE_OBJECT, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_INSTANTIATE_OBJECT, _impl_.objectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_REMOVE_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_GET_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.prefabname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.objectdata_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.ownerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_ADD_OBJECT, _impl_.gameobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_REMOVE_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_REMOVE_OBJECT, _impl_.gameobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_OBJECT_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_OBJECT_DATA, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_OBJECT_DATA, _impl_.objectdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_OBJECT_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_OBJECT_DATA, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE, _impl_.objectdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_TRANSFORM, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_TRANSFORM, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_TRANSFORM, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_TRANSFORM, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_TRANSFORM, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_TRANSFORM, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION, _impl_.animationid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION, _impl_.animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION, _impl_.animationid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION, _impl_.animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION_ONCE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION_ONCE, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION_ONCE, _impl_.animationid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION_ONCE, _impl_.isloop_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BASE_SET_ANIMATION_ONCE, _impl_.blend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION_ONCE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION_ONCE, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION_ONCE, _impl_.animationid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION_ONCE, _impl_.isloop_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BASE_SET_ANIMATION_ONCE, _impl_.blend_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::Vector3)},
  { 9, -1, -1, sizeof(::Protocol::C_BASE_INSTANTIATE_OBJECT)},
  { 19, -1, -1, sizeof(::Protocol::S_BASE_INSTANTIATE_OBJECT)},
  { 27, -1, -1, sizeof(::Protocol::C_BASE_REMOVE_OBJECT)},
  { 33, -1, -1, sizeof(::Protocol::C_BASE_GET_OBJECT)},
  { 39, -1, -1, sizeof(::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo)},
  { 51, -1, -1, sizeof(::Protocol::S_BASE_ADD_OBJECT)},
  { 58, -1, -1, sizeof(::Protocol::S_BASE_REMOVE_OBJECT)},
  { 65, -1, -1, sizeof(::Protocol::C_BASE_SET_OBJECT_DATA)},
  { 73, -1, -1, sizeof(::Protocol::S_BASE_SET_OBJECT_DATA)},
  { 80, -1, -1, sizeof(::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE)},
  { 88, -1, -1, sizeof(::Protocol::C_BASE_SET_TRANSFORM)},
  { 97, -1, -1, sizeof(::Protocol::S_BASE_SET_TRANSFORM)},
  { 106, -1, -1, sizeof(::Protocol::C_BASE_SET_ANIMATION)},
  { 115, -1, -1, sizeof(::Protocol::S_BASE_SET_ANIMATION)},
  { 124, -1, -1, sizeof(::Protocol::C_BASE_SET_ANIMATION_ONCE)},
  { 134, -1, -1, sizeof(::Protocol::S_BASE_SET_ANIMATION_ONCE)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_Vector3_default_instance_._instance,
  &::Protocol::_C_BASE_INSTANTIATE_OBJECT_default_instance_._instance,
  &::Protocol::_S_BASE_INSTANTIATE_OBJECT_default_instance_._instance,
  &::Protocol::_C_BASE_REMOVE_OBJECT_default_instance_._instance,
  &::Protocol::_C_BASE_GET_OBJECT_default_instance_._instance,
  &::Protocol::_S_BASE_ADD_OBJECT_GameObjectInfo_default_instance_._instance,
  &::Protocol::_S_BASE_ADD_OBJECT_default_instance_._instance,
  &::Protocol::_S_BASE_REMOVE_OBJECT_default_instance_._instance,
  &::Protocol::_C_BASE_SET_OBJECT_DATA_default_instance_._instance,
  &::Protocol::_S_BASE_SET_OBJECT_DATA_default_instance_._instance,
  &::Protocol::_S_BASE_SET_OBJECT_DATA_NOTICE_default_instance_._instance,
  &::Protocol::_C_BASE_SET_TRANSFORM_default_instance_._instance,
  &::Protocol::_S_BASE_SET_TRANSFORM_default_instance_._instance,
  &::Protocol::_C_BASE_SET_ANIMATION_default_instance_._instance,
  &::Protocol::_S_BASE_SET_ANIMATION_default_instance_._instance,
  &::Protocol::_C_BASE_SET_ANIMATION_ONCE_default_instance_._instance,
  &::Protocol::_S_BASE_SET_ANIMATION_ONCE_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_5f001_5fBase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Packet_001_Base.proto\022\010Protocol\"*\n\007Vec"
  "tor3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\215\001"
  "\n\031C_BASE_INSTANTIATE_OBJECT\022#\n\010position\030"
  "\001 \001(\0132\021.Protocol.Vector3\022#\n\010rotation\030\002 \001"
  "(\0132\021.Protocol.Vector3\022\022\n\nprefabName\030\003 \001("
  "\t\022\022\n\nobjectData\030\004 \001(\t\">\n\031S_BASE_INSTANTI"
  "ATE_OBJECT\022\017\n\007success\030\001 \001(\010\022\020\n\010objectId\030"
  "\002 \001(\005\"\026\n\024C_BASE_REMOVE_OBJECT\"\023\n\021C_BASE_"
  "GET_OBJECT\"\374\001\n\021S_BASE_ADD_OBJECT\022\?\n\013game"
  "Objects\030\001 \003(\0132*.Protocol.S_BASE_ADD_OBJE"
  "CT.GameObjectInfo\032\245\001\n\016GameObjectInfo\022\020\n\010"
  "objectId\030\001 \001(\005\022#\n\010position\030\002 \001(\0132\021.Proto"
  "col.Vector3\022#\n\010rotation\030\003 \001(\0132\021.Protocol"
  ".Vector3\022\022\n\nprefabName\030\004 \001(\t\022\022\n\nobjectDa"
  "ta\030\005 \001(\t\022\017\n\007ownerId\030\006 \001(\t\"+\n\024S_BASE_REMO"
  "VE_OBJECT\022\023\n\013gameObjects\030\001 \003(\005\">\n\026C_BASE"
  "_SET_OBJECT_DATA\022\020\n\010objectId\030\001 \001(\005\022\022\n\nob"
  "jectData\030\002 \001(\t\")\n\026S_BASE_SET_OBJECT_DATA"
  "\022\017\n\007success\030\001 \001(\010\"E\n\035S_BASE_SET_OBJECT_D"
  "ATA_NOTICE\022\020\n\010objectId\030\001 \001(\005\022\022\n\nobjectDa"
  "ta\030\002 \001(\t\"r\n\024C_BASE_SET_TRANSFORM\022\020\n\010obje"
  "ctId\030\001 \001(\005\022#\n\010position\030\002 \001(\0132\021.Protocol."
  "Vector3\022#\n\010rotation\030\003 \001(\0132\021.Protocol.Vec"
  "tor3\"r\n\024S_BASE_SET_TRANSFORM\022\020\n\010objectId"
  "\030\001 \001(\005\022#\n\010position\030\002 \001(\0132\021.Protocol.Vect"
  "or3\022#\n\010rotation\030\003 \001(\0132\021.Protocol.Vector3"
  "\"P\n\024C_BASE_SET_ANIMATION\022\020\n\010objectId\030\001 \001"
  "(\005\022\023\n\013animationId\030\002 \001(\t\022\021\n\tanimation\030\003 \001"
  "(\t\"P\n\024S_BASE_SET_ANIMATION\022\020\n\010objectId\030\001"
  " \001(\005\022\023\n\013animationId\030\002 \001(\t\022\021\n\tanimation\030\003"
  " \001(\t\"a\n\031C_BASE_SET_ANIMATION_ONCE\022\020\n\010obj"
  "ectId\030\001 \001(\005\022\023\n\013animationId\030\002 \001(\t\022\016\n\006isLo"
  "op\030\003 \001(\010\022\r\n\005blend\030\004 \001(\002\"a\n\031S_BASE_SET_AN"
  "IMATION_ONCE\022\020\n\010objectId\030\001 \001(\005\022\023\n\013animat"
  "ionId\030\002 \001(\t\022\016\n\006isLoop\030\003 \001(\010\022\r\n\005blend\030\004 \001"
  "(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Packet_5f001_5fBase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_5f001_5fBase_2eproto = {
    false, false, 1410, descriptor_table_protodef_Packet_5f001_5fBase_2eproto,
    "Packet_001_Base.proto",
    &descriptor_table_Packet_5f001_5fBase_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_Packet_5f001_5fBase_2eproto::offsets,
    file_level_metadata_Packet_5f001_5fBase_2eproto, file_level_enum_descriptors_Packet_5f001_5fBase_2eproto,
    file_level_service_descriptors_Packet_5f001_5fBase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_5f001_5fBase_2eproto_getter() {
  return &descriptor_table_Packet_5f001_5fBase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_5f001_5fBase_2eproto(&descriptor_table_Packet_5f001_5fBase_2eproto);
namespace Protocol {

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Protocol.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[0]);
}

// ===================================================================

class C_BASE_INSTANTIATE_OBJECT::_Internal {
 public:
  static const ::Protocol::Vector3& position(const C_BASE_INSTANTIATE_OBJECT* msg);
  static const ::Protocol::Vector3& rotation(const C_BASE_INSTANTIATE_OBJECT* msg);
};

const ::Protocol::Vector3&
C_BASE_INSTANTIATE_OBJECT::_Internal::position(const C_BASE_INSTANTIATE_OBJECT* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
C_BASE_INSTANTIATE_OBJECT::_Internal::rotation(const C_BASE_INSTANTIATE_OBJECT* msg) {
  return *msg->_impl_.rotation_;
}
C_BASE_INSTANTIATE_OBJECT::C_BASE_INSTANTIATE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_INSTANTIATE_OBJECT)
}
C_BASE_INSTANTIATE_OBJECT::C_BASE_INSTANTIATE_OBJECT(const C_BASE_INSTANTIATE_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BASE_INSTANTIATE_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabname_){}
    , decltype(_impl_.objectdata_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefabname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefabname().empty()) {
    _this->_impl_.prefabname_.Set(from._internal_prefabname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objectdata().empty()) {
    _this->_impl_.objectdata_.Set(from._internal_objectdata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_INSTANTIATE_OBJECT)
}

inline void C_BASE_INSTANTIATE_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabname_){}
    , decltype(_impl_.objectdata_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prefabname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_BASE_INSTANTIATE_OBJECT::~C_BASE_INSTANTIATE_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.C_BASE_INSTANTIATE_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BASE_INSTANTIATE_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefabname_.Destroy();
  _impl_.objectdata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void C_BASE_INSTANTIATE_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BASE_INSTANTIATE_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BASE_INSTANTIATE_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefabname_.ClearToEmpty();
  _impl_.objectdata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BASE_INSTANTIATE_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefabName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prefabname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName"));
        } else
          goto handle_unusual;
        continue;
      // string objectData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_objectdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BASE_INSTANTIATE_OBJECT.objectData"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BASE_INSTANTIATE_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BASE_INSTANTIATE_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // string prefabName = 3;
  if (!this->_internal_prefabname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefabname().data(), static_cast<int>(this->_internal_prefabname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BASE_INSTANTIATE_OBJECT.prefabName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefabname(), target);
  }

  // string objectData = 4;
  if (!this->_internal_objectdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objectdata().data(), static_cast<int>(this->_internal_objectdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BASE_INSTANTIATE_OBJECT.objectData");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_objectdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BASE_INSTANTIATE_OBJECT)
  return target;
}

size_t C_BASE_INSTANTIATE_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BASE_INSTANTIATE_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefabName = 3;
  if (!this->_internal_prefabname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefabname());
  }

  // string objectData = 4;
  if (!this->_internal_objectdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objectdata());
  }

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_INSTANTIATE_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BASE_INSTANTIATE_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_INSTANTIATE_OBJECT::GetClassData() const { return &_class_data_; }


void C_BASE_INSTANTIATE_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BASE_INSTANTIATE_OBJECT*>(&to_msg);
  auto& from = static_cast<const C_BASE_INSTANTIATE_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BASE_INSTANTIATE_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefabname().empty()) {
    _this->_internal_set_prefabname(from._internal_prefabname());
  }
  if (!from._internal_objectdata().empty()) {
    _this->_internal_set_objectdata(from._internal_objectdata());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BASE_INSTANTIATE_OBJECT::CopyFrom(const C_BASE_INSTANTIATE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BASE_INSTANTIATE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BASE_INSTANTIATE_OBJECT::IsInitialized() const {
  return true;
}

void C_BASE_INSTANTIATE_OBJECT::InternalSwap(C_BASE_INSTANTIATE_OBJECT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefabname_, lhs_arena,
      &other->_impl_.prefabname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objectdata_, lhs_arena,
      &other->_impl_.objectdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_BASE_INSTANTIATE_OBJECT, _impl_.rotation_)
      + sizeof(C_BASE_INSTANTIATE_OBJECT::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(C_BASE_INSTANTIATE_OBJECT, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_INSTANTIATE_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[1]);
}

// ===================================================================

class S_BASE_INSTANTIATE_OBJECT::_Internal {
 public:
};

S_BASE_INSTANTIATE_OBJECT::S_BASE_INSTANTIATE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_INSTANTIATE_OBJECT)
}
S_BASE_INSTANTIATE_OBJECT::S_BASE_INSTANTIATE_OBJECT(const S_BASE_INSTANTIATE_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_INSTANTIATE_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objectid_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.objectid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_INSTANTIATE_OBJECT)
}

inline void S_BASE_INSTANTIATE_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BASE_INSTANTIATE_OBJECT::~S_BASE_INSTANTIATE_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_INSTANTIATE_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_INSTANTIATE_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BASE_INSTANTIATE_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_INSTANTIATE_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_INSTANTIATE_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objectid_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.objectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_INSTANTIATE_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objectId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_INSTANTIATE_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_INSTANTIATE_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 objectId = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_objectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_INSTANTIATE_OBJECT)
  return target;
}

size_t S_BASE_INSTANTIATE_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_INSTANTIATE_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 objectId = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_INSTANTIATE_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_INSTANTIATE_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_INSTANTIATE_OBJECT::GetClassData() const { return &_class_data_; }


void S_BASE_INSTANTIATE_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_INSTANTIATE_OBJECT*>(&to_msg);
  auto& from = static_cast<const S_BASE_INSTANTIATE_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_INSTANTIATE_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_INSTANTIATE_OBJECT::CopyFrom(const S_BASE_INSTANTIATE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_INSTANTIATE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_INSTANTIATE_OBJECT::IsInitialized() const {
  return true;
}

void S_BASE_INSTANTIATE_OBJECT::InternalSwap(S_BASE_INSTANTIATE_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BASE_INSTANTIATE_OBJECT, _impl_.objectid_)
      + sizeof(S_BASE_INSTANTIATE_OBJECT::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(S_BASE_INSTANTIATE_OBJECT, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_INSTANTIATE_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[2]);
}

// ===================================================================

class C_BASE_REMOVE_OBJECT::_Internal {
 public:
};

C_BASE_REMOVE_OBJECT::C_BASE_REMOVE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_REMOVE_OBJECT)
}
C_BASE_REMOVE_OBJECT::C_BASE_REMOVE_OBJECT(const C_BASE_REMOVE_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_BASE_REMOVE_OBJECT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_REMOVE_OBJECT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_REMOVE_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_REMOVE_OBJECT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_REMOVE_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[3]);
}

// ===================================================================

class C_BASE_GET_OBJECT::_Internal {
 public:
};

C_BASE_GET_OBJECT::C_BASE_GET_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_GET_OBJECT)
}
C_BASE_GET_OBJECT::C_BASE_GET_OBJECT(const C_BASE_GET_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_BASE_GET_OBJECT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_GET_OBJECT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_GET_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_GET_OBJECT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_GET_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[4]);
}

// ===================================================================

class S_BASE_ADD_OBJECT_GameObjectInfo::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_BASE_ADD_OBJECT_GameObjectInfo* msg);
  static const ::Protocol::Vector3& rotation(const S_BASE_ADD_OBJECT_GameObjectInfo* msg);
};

const ::Protocol::Vector3&
S_BASE_ADD_OBJECT_GameObjectInfo::_Internal::position(const S_BASE_ADD_OBJECT_GameObjectInfo* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
S_BASE_ADD_OBJECT_GameObjectInfo::_Internal::rotation(const S_BASE_ADD_OBJECT_GameObjectInfo* msg) {
  return *msg->_impl_.rotation_;
}
S_BASE_ADD_OBJECT_GameObjectInfo::S_BASE_ADD_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
}
S_BASE_ADD_OBJECT_GameObjectInfo::S_BASE_ADD_OBJECT_GameObjectInfo(const S_BASE_ADD_OBJECT_GameObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_ADD_OBJECT_GameObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabname_){}
    , decltype(_impl_.objectdata_){}
    , decltype(_impl_.ownerid_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefabname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefabname().empty()) {
    _this->_impl_.prefabname_.Set(from._internal_prefabname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objectdata().empty()) {
    _this->_impl_.objectdata_.Set(from._internal_objectdata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ownerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ownerid().empty()) {
    _this->_impl_.ownerid_.Set(from._internal_ownerid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
}

inline void S_BASE_ADD_OBJECT_GameObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabname_){}
    , decltype(_impl_.objectdata_){}
    , decltype(_impl_.ownerid_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prefabname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ownerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_BASE_ADD_OBJECT_GameObjectInfo::~S_BASE_ADD_OBJECT_GameObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_ADD_OBJECT_GameObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefabname_.Destroy();
  _impl_.objectdata_.Destroy();
  _impl_.ownerid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S_BASE_ADD_OBJECT_GameObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_ADD_OBJECT_GameObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefabname_.ClearToEmpty();
  _impl_.objectdata_.ClearToEmpty();
  _impl_.ownerid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_ADD_OBJECT_GameObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefabName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prefabname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName"));
        } else
          goto handle_unusual;
        continue;
      // string objectData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_objectdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData"));
        } else
          goto handle_unusual;
        continue;
      // string ownerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ownerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_ADD_OBJECT_GameObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // string prefabName = 4;
  if (!this->_internal_prefabname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefabname().data(), static_cast<int>(this->_internal_prefabname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.prefabName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prefabname(), target);
  }

  // string objectData = 5;
  if (!this->_internal_objectdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objectdata().data(), static_cast<int>(this->_internal_objectdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.objectData");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_objectdata(), target);
  }

  // string ownerId = 6;
  if (!this->_internal_ownerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ownerid().data(), static_cast<int>(this->_internal_ownerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_ADD_OBJECT.GameObjectInfo.ownerId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ownerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  return target;
}

size_t S_BASE_ADD_OBJECT_GameObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefabName = 4;
  if (!this->_internal_prefabname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefabname());
  }

  // string objectData = 5;
  if (!this->_internal_objectdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objectdata());
  }

  // string ownerId = 6;
  if (!this->_internal_ownerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ownerid());
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_ADD_OBJECT_GameObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_ADD_OBJECT_GameObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_ADD_OBJECT_GameObjectInfo::GetClassData() const { return &_class_data_; }


void S_BASE_ADD_OBJECT_GameObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_ADD_OBJECT_GameObjectInfo*>(&to_msg);
  auto& from = static_cast<const S_BASE_ADD_OBJECT_GameObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefabname().empty()) {
    _this->_internal_set_prefabname(from._internal_prefabname());
  }
  if (!from._internal_objectdata().empty()) {
    _this->_internal_set_objectdata(from._internal_objectdata());
  }
  if (!from._internal_ownerid().empty()) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_ADD_OBJECT_GameObjectInfo::CopyFrom(const S_BASE_ADD_OBJECT_GameObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_ADD_OBJECT.GameObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_ADD_OBJECT_GameObjectInfo::IsInitialized() const {
  return true;
}

void S_BASE_ADD_OBJECT_GameObjectInfo::InternalSwap(S_BASE_ADD_OBJECT_GameObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefabname_, lhs_arena,
      &other->_impl_.prefabname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objectdata_, lhs_arena,
      &other->_impl_.objectdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ownerid_, lhs_arena,
      &other->_impl_.ownerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.objectid_)
      + sizeof(S_BASE_ADD_OBJECT_GameObjectInfo::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(S_BASE_ADD_OBJECT_GameObjectInfo, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_ADD_OBJECT_GameObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[5]);
}

// ===================================================================

class S_BASE_ADD_OBJECT::_Internal {
 public:
};

S_BASE_ADD_OBJECT::S_BASE_ADD_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_ADD_OBJECT)
}
S_BASE_ADD_OBJECT::S_BASE_ADD_OBJECT(const S_BASE_ADD_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_ADD_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){from._impl_.gameobjects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_ADD_OBJECT)
}

inline void S_BASE_ADD_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BASE_ADD_OBJECT::~S_BASE_ADD_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_ADD_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_ADD_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameobjects_.~RepeatedPtrField();
}

void S_BASE_ADD_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_ADD_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_ADD_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameobjects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_ADD_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.S_BASE_ADD_OBJECT.GameObjectInfo gameObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_ADD_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_ADD_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.S_BASE_ADD_OBJECT.GameObjectInfo gameObjects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gameobjects_size()); i < n; i++) {
    const auto& repfield = this->_internal_gameobjects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_ADD_OBJECT)
  return target;
}

size_t S_BASE_ADD_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_ADD_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.S_BASE_ADD_OBJECT.GameObjectInfo gameObjects = 1;
  total_size += 1UL * this->_internal_gameobjects_size();
  for (const auto& msg : this->_impl_.gameobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_ADD_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_ADD_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_ADD_OBJECT::GetClassData() const { return &_class_data_; }


void S_BASE_ADD_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_ADD_OBJECT*>(&to_msg);
  auto& from = static_cast<const S_BASE_ADD_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_ADD_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameobjects_.MergeFrom(from._impl_.gameobjects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_ADD_OBJECT::CopyFrom(const S_BASE_ADD_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_ADD_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_ADD_OBJECT::IsInitialized() const {
  return true;
}

void S_BASE_ADD_OBJECT::InternalSwap(S_BASE_ADD_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gameobjects_.InternalSwap(&other->_impl_.gameobjects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_ADD_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[6]);
}

// ===================================================================

class S_BASE_REMOVE_OBJECT::_Internal {
 public:
};

S_BASE_REMOVE_OBJECT::S_BASE_REMOVE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_REMOVE_OBJECT)
}
S_BASE_REMOVE_OBJECT::S_BASE_REMOVE_OBJECT(const S_BASE_REMOVE_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_REMOVE_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){from._impl_.gameobjects_}
    , /*decltype(_impl_._gameobjects_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_REMOVE_OBJECT)
}

inline void S_BASE_REMOVE_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){arena}
    , /*decltype(_impl_._gameobjects_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BASE_REMOVE_OBJECT::~S_BASE_REMOVE_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_REMOVE_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_REMOVE_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameobjects_.~RepeatedField();
}

void S_BASE_REMOVE_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_REMOVE_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_REMOVE_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameobjects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_REMOVE_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 gameObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gameobjects(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_gameobjects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_REMOVE_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_REMOVE_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gameObjects = 1;
  {
    int byte_size = _impl_._gameobjects_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gameobjects(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_REMOVE_OBJECT)
  return target;
}

size_t S_BASE_REMOVE_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_REMOVE_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gameObjects = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.gameobjects_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._gameobjects_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_REMOVE_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_REMOVE_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_REMOVE_OBJECT::GetClassData() const { return &_class_data_; }


void S_BASE_REMOVE_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_REMOVE_OBJECT*>(&to_msg);
  auto& from = static_cast<const S_BASE_REMOVE_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_REMOVE_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameobjects_.MergeFrom(from._impl_.gameobjects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_REMOVE_OBJECT::CopyFrom(const S_BASE_REMOVE_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_REMOVE_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_REMOVE_OBJECT::IsInitialized() const {
  return true;
}

void S_BASE_REMOVE_OBJECT::InternalSwap(S_BASE_REMOVE_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gameobjects_.InternalSwap(&other->_impl_.gameobjects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_REMOVE_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[7]);
}

// ===================================================================

class C_BASE_SET_OBJECT_DATA::_Internal {
 public:
};

C_BASE_SET_OBJECT_DATA::C_BASE_SET_OBJECT_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_SET_OBJECT_DATA)
}
C_BASE_SET_OBJECT_DATA::C_BASE_SET_OBJECT_DATA(const C_BASE_SET_OBJECT_DATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BASE_SET_OBJECT_DATA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectdata_){}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objectdata().empty()) {
    _this->_impl_.objectdata_.Set(from._internal_objectdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_SET_OBJECT_DATA)
}

inline void C_BASE_SET_OBJECT_DATA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectdata_){}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_BASE_SET_OBJECT_DATA::~C_BASE_SET_OBJECT_DATA() {
  // @@protoc_insertion_point(destructor:Protocol.C_BASE_SET_OBJECT_DATA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BASE_SET_OBJECT_DATA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objectdata_.Destroy();
}

void C_BASE_SET_OBJECT_DATA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BASE_SET_OBJECT_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BASE_SET_OBJECT_DATA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectdata_.ClearToEmpty();
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BASE_SET_OBJECT_DATA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string objectData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_objectdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BASE_SET_OBJECT_DATA.objectData"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BASE_SET_OBJECT_DATA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BASE_SET_OBJECT_DATA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string objectData = 2;
  if (!this->_internal_objectdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objectdata().data(), static_cast<int>(this->_internal_objectdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BASE_SET_OBJECT_DATA.objectData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_objectdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BASE_SET_OBJECT_DATA)
  return target;
}

size_t C_BASE_SET_OBJECT_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BASE_SET_OBJECT_DATA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objectData = 2;
  if (!this->_internal_objectdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objectdata());
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_SET_OBJECT_DATA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BASE_SET_OBJECT_DATA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_SET_OBJECT_DATA::GetClassData() const { return &_class_data_; }


void C_BASE_SET_OBJECT_DATA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BASE_SET_OBJECT_DATA*>(&to_msg);
  auto& from = static_cast<const C_BASE_SET_OBJECT_DATA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BASE_SET_OBJECT_DATA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objectdata().empty()) {
    _this->_internal_set_objectdata(from._internal_objectdata());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BASE_SET_OBJECT_DATA::CopyFrom(const C_BASE_SET_OBJECT_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BASE_SET_OBJECT_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BASE_SET_OBJECT_DATA::IsInitialized() const {
  return true;
}

void C_BASE_SET_OBJECT_DATA::InternalSwap(C_BASE_SET_OBJECT_DATA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objectdata_, lhs_arena,
      &other->_impl_.objectdata_, rhs_arena
  );
  swap(_impl_.objectid_, other->_impl_.objectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_SET_OBJECT_DATA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[8]);
}

// ===================================================================

class S_BASE_SET_OBJECT_DATA::_Internal {
 public:
};

S_BASE_SET_OBJECT_DATA::S_BASE_SET_OBJECT_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_SET_OBJECT_DATA)
}
S_BASE_SET_OBJECT_DATA::S_BASE_SET_OBJECT_DATA(const S_BASE_SET_OBJECT_DATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_SET_OBJECT_DATA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_SET_OBJECT_DATA)
}

inline void S_BASE_SET_OBJECT_DATA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BASE_SET_OBJECT_DATA::~S_BASE_SET_OBJECT_DATA() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_SET_OBJECT_DATA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_SET_OBJECT_DATA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_BASE_SET_OBJECT_DATA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_SET_OBJECT_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_SET_OBJECT_DATA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_SET_OBJECT_DATA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_SET_OBJECT_DATA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_SET_OBJECT_DATA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_SET_OBJECT_DATA)
  return target;
}

size_t S_BASE_SET_OBJECT_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_SET_OBJECT_DATA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_SET_OBJECT_DATA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_SET_OBJECT_DATA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_SET_OBJECT_DATA::GetClassData() const { return &_class_data_; }


void S_BASE_SET_OBJECT_DATA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_SET_OBJECT_DATA*>(&to_msg);
  auto& from = static_cast<const S_BASE_SET_OBJECT_DATA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_SET_OBJECT_DATA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_SET_OBJECT_DATA::CopyFrom(const S_BASE_SET_OBJECT_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_SET_OBJECT_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_SET_OBJECT_DATA::IsInitialized() const {
  return true;
}

void S_BASE_SET_OBJECT_DATA::InternalSwap(S_BASE_SET_OBJECT_DATA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_SET_OBJECT_DATA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[9]);
}

// ===================================================================

class S_BASE_SET_OBJECT_DATA_NOTICE::_Internal {
 public:
};

S_BASE_SET_OBJECT_DATA_NOTICE::S_BASE_SET_OBJECT_DATA_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
}
S_BASE_SET_OBJECT_DATA_NOTICE::S_BASE_SET_OBJECT_DATA_NOTICE(const S_BASE_SET_OBJECT_DATA_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_SET_OBJECT_DATA_NOTICE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectdata_){}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objectdata().empty()) {
    _this->_impl_.objectdata_.Set(from._internal_objectdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
}

inline void S_BASE_SET_OBJECT_DATA_NOTICE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectdata_){}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objectdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_BASE_SET_OBJECT_DATA_NOTICE::~S_BASE_SET_OBJECT_DATA_NOTICE() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_SET_OBJECT_DATA_NOTICE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objectdata_.Destroy();
}

void S_BASE_SET_OBJECT_DATA_NOTICE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_SET_OBJECT_DATA_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectdata_.ClearToEmpty();
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_SET_OBJECT_DATA_NOTICE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string objectData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_objectdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_SET_OBJECT_DATA_NOTICE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string objectData = 2;
  if (!this->_internal_objectdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objectdata().data(), static_cast<int>(this->_internal_objectdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_SET_OBJECT_DATA_NOTICE.objectData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_objectdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  return target;
}

size_t S_BASE_SET_OBJECT_DATA_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objectData = 2;
  if (!this->_internal_objectdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objectdata());
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_SET_OBJECT_DATA_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_SET_OBJECT_DATA_NOTICE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_SET_OBJECT_DATA_NOTICE::GetClassData() const { return &_class_data_; }


void S_BASE_SET_OBJECT_DATA_NOTICE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_SET_OBJECT_DATA_NOTICE*>(&to_msg);
  auto& from = static_cast<const S_BASE_SET_OBJECT_DATA_NOTICE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objectdata().empty()) {
    _this->_internal_set_objectdata(from._internal_objectdata());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_SET_OBJECT_DATA_NOTICE::CopyFrom(const S_BASE_SET_OBJECT_DATA_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_SET_OBJECT_DATA_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_SET_OBJECT_DATA_NOTICE::IsInitialized() const {
  return true;
}

void S_BASE_SET_OBJECT_DATA_NOTICE::InternalSwap(S_BASE_SET_OBJECT_DATA_NOTICE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objectdata_, lhs_arena,
      &other->_impl_.objectdata_, rhs_arena
  );
  swap(_impl_.objectid_, other->_impl_.objectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_SET_OBJECT_DATA_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[10]);
}

// ===================================================================

class C_BASE_SET_TRANSFORM::_Internal {
 public:
  static const ::Protocol::Vector3& position(const C_BASE_SET_TRANSFORM* msg);
  static const ::Protocol::Vector3& rotation(const C_BASE_SET_TRANSFORM* msg);
};

const ::Protocol::Vector3&
C_BASE_SET_TRANSFORM::_Internal::position(const C_BASE_SET_TRANSFORM* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
C_BASE_SET_TRANSFORM::_Internal::rotation(const C_BASE_SET_TRANSFORM* msg) {
  return *msg->_impl_.rotation_;
}
C_BASE_SET_TRANSFORM::C_BASE_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_SET_TRANSFORM)
}
C_BASE_SET_TRANSFORM::C_BASE_SET_TRANSFORM(const C_BASE_SET_TRANSFORM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BASE_SET_TRANSFORM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_SET_TRANSFORM)
}

inline void C_BASE_SET_TRANSFORM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_BASE_SET_TRANSFORM::~C_BASE_SET_TRANSFORM() {
  // @@protoc_insertion_point(destructor:Protocol.C_BASE_SET_TRANSFORM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BASE_SET_TRANSFORM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void C_BASE_SET_TRANSFORM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BASE_SET_TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BASE_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BASE_SET_TRANSFORM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BASE_SET_TRANSFORM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BASE_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BASE_SET_TRANSFORM)
  return target;
}

size_t C_BASE_SET_TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BASE_SET_TRANSFORM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_SET_TRANSFORM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BASE_SET_TRANSFORM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_SET_TRANSFORM::GetClassData() const { return &_class_data_; }


void C_BASE_SET_TRANSFORM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BASE_SET_TRANSFORM*>(&to_msg);
  auto& from = static_cast<const C_BASE_SET_TRANSFORM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BASE_SET_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BASE_SET_TRANSFORM::CopyFrom(const C_BASE_SET_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BASE_SET_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BASE_SET_TRANSFORM::IsInitialized() const {
  return true;
}

void C_BASE_SET_TRANSFORM::InternalSwap(C_BASE_SET_TRANSFORM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_BASE_SET_TRANSFORM, _impl_.objectid_)
      + sizeof(C_BASE_SET_TRANSFORM::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(C_BASE_SET_TRANSFORM, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_SET_TRANSFORM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[11]);
}

// ===================================================================

class S_BASE_SET_TRANSFORM::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_BASE_SET_TRANSFORM* msg);
  static const ::Protocol::Vector3& rotation(const S_BASE_SET_TRANSFORM* msg);
};

const ::Protocol::Vector3&
S_BASE_SET_TRANSFORM::_Internal::position(const S_BASE_SET_TRANSFORM* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
S_BASE_SET_TRANSFORM::_Internal::rotation(const S_BASE_SET_TRANSFORM* msg) {
  return *msg->_impl_.rotation_;
}
S_BASE_SET_TRANSFORM::S_BASE_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_SET_TRANSFORM)
}
S_BASE_SET_TRANSFORM::S_BASE_SET_TRANSFORM(const S_BASE_SET_TRANSFORM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_SET_TRANSFORM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_SET_TRANSFORM)
}

inline void S_BASE_SET_TRANSFORM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BASE_SET_TRANSFORM::~S_BASE_SET_TRANSFORM() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_SET_TRANSFORM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_SET_TRANSFORM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S_BASE_SET_TRANSFORM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_SET_TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_SET_TRANSFORM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_SET_TRANSFORM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_SET_TRANSFORM)
  return target;
}

size_t S_BASE_SET_TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_SET_TRANSFORM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_SET_TRANSFORM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_SET_TRANSFORM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_SET_TRANSFORM::GetClassData() const { return &_class_data_; }


void S_BASE_SET_TRANSFORM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_SET_TRANSFORM*>(&to_msg);
  auto& from = static_cast<const S_BASE_SET_TRANSFORM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_SET_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_SET_TRANSFORM::CopyFrom(const S_BASE_SET_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_SET_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_SET_TRANSFORM::IsInitialized() const {
  return true;
}

void S_BASE_SET_TRANSFORM::InternalSwap(S_BASE_SET_TRANSFORM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BASE_SET_TRANSFORM, _impl_.objectid_)
      + sizeof(S_BASE_SET_TRANSFORM::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(S_BASE_SET_TRANSFORM, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_SET_TRANSFORM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[12]);
}

// ===================================================================

class C_BASE_SET_ANIMATION::_Internal {
 public:
};

C_BASE_SET_ANIMATION::C_BASE_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_SET_ANIMATION)
}
C_BASE_SET_ANIMATION::C_BASE_SET_ANIMATION(const C_BASE_SET_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BASE_SET_ANIMATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.animation_){}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animationid().empty()) {
    _this->_impl_.animationid_.Set(from._internal_animationid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animation().empty()) {
    _this->_impl_.animation_.Set(from._internal_animation(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_SET_ANIMATION)
}

inline void C_BASE_SET_ANIMATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.animation_){}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_BASE_SET_ANIMATION::~C_BASE_SET_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.C_BASE_SET_ANIMATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BASE_SET_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.animationid_.Destroy();
  _impl_.animation_.Destroy();
}

void C_BASE_SET_ANIMATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BASE_SET_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BASE_SET_ANIMATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.animationid_.ClearToEmpty();
  _impl_.animation_.ClearToEmpty();
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BASE_SET_ANIMATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string animationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_animationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BASE_SET_ANIMATION.animationId"));
        } else
          goto handle_unusual;
        continue;
      // string animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_animation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BASE_SET_ANIMATION.animation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BASE_SET_ANIMATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BASE_SET_ANIMATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BASE_SET_ANIMATION.animationId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animationid(), target);
  }

  // string animation = 3;
  if (!this->_internal_animation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animation().data(), static_cast<int>(this->_internal_animation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BASE_SET_ANIMATION.animation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BASE_SET_ANIMATION)
  return target;
}

size_t C_BASE_SET_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BASE_SET_ANIMATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animationid());
  }

  // string animation = 3;
  if (!this->_internal_animation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animation());
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_SET_ANIMATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BASE_SET_ANIMATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_SET_ANIMATION::GetClassData() const { return &_class_data_; }


void C_BASE_SET_ANIMATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BASE_SET_ANIMATION*>(&to_msg);
  auto& from = static_cast<const C_BASE_SET_ANIMATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BASE_SET_ANIMATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_animationid().empty()) {
    _this->_internal_set_animationid(from._internal_animationid());
  }
  if (!from._internal_animation().empty()) {
    _this->_internal_set_animation(from._internal_animation());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BASE_SET_ANIMATION::CopyFrom(const C_BASE_SET_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BASE_SET_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BASE_SET_ANIMATION::IsInitialized() const {
  return true;
}

void C_BASE_SET_ANIMATION::InternalSwap(C_BASE_SET_ANIMATION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationid_, lhs_arena,
      &other->_impl_.animationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animation_, lhs_arena,
      &other->_impl_.animation_, rhs_arena
  );
  swap(_impl_.objectid_, other->_impl_.objectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_SET_ANIMATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[13]);
}

// ===================================================================

class S_BASE_SET_ANIMATION::_Internal {
 public:
};

S_BASE_SET_ANIMATION::S_BASE_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_SET_ANIMATION)
}
S_BASE_SET_ANIMATION::S_BASE_SET_ANIMATION(const S_BASE_SET_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_SET_ANIMATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.animation_){}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animationid().empty()) {
    _this->_impl_.animationid_.Set(from._internal_animationid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animation().empty()) {
    _this->_impl_.animation_.Set(from._internal_animation(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_SET_ANIMATION)
}

inline void S_BASE_SET_ANIMATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.animation_){}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_BASE_SET_ANIMATION::~S_BASE_SET_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_SET_ANIMATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_SET_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.animationid_.Destroy();
  _impl_.animation_.Destroy();
}

void S_BASE_SET_ANIMATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_SET_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_SET_ANIMATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.animationid_.ClearToEmpty();
  _impl_.animation_.ClearToEmpty();
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_SET_ANIMATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string animationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_animationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_SET_ANIMATION.animationId"));
        } else
          goto handle_unusual;
        continue;
      // string animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_animation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_SET_ANIMATION.animation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_SET_ANIMATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_SET_ANIMATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_SET_ANIMATION.animationId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animationid(), target);
  }

  // string animation = 3;
  if (!this->_internal_animation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animation().data(), static_cast<int>(this->_internal_animation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_SET_ANIMATION.animation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_SET_ANIMATION)
  return target;
}

size_t S_BASE_SET_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_SET_ANIMATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animationid());
  }

  // string animation = 3;
  if (!this->_internal_animation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animation());
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_SET_ANIMATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_SET_ANIMATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_SET_ANIMATION::GetClassData() const { return &_class_data_; }


void S_BASE_SET_ANIMATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_SET_ANIMATION*>(&to_msg);
  auto& from = static_cast<const S_BASE_SET_ANIMATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_SET_ANIMATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_animationid().empty()) {
    _this->_internal_set_animationid(from._internal_animationid());
  }
  if (!from._internal_animation().empty()) {
    _this->_internal_set_animation(from._internal_animation());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_SET_ANIMATION::CopyFrom(const S_BASE_SET_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_SET_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_SET_ANIMATION::IsInitialized() const {
  return true;
}

void S_BASE_SET_ANIMATION::InternalSwap(S_BASE_SET_ANIMATION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationid_, lhs_arena,
      &other->_impl_.animationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animation_, lhs_arena,
      &other->_impl_.animation_, rhs_arena
  );
  swap(_impl_.objectid_, other->_impl_.objectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_SET_ANIMATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[14]);
}

// ===================================================================

class C_BASE_SET_ANIMATION_ONCE::_Internal {
 public:
};

C_BASE_SET_ANIMATION_ONCE::C_BASE_SET_ANIMATION_ONCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BASE_SET_ANIMATION_ONCE)
}
C_BASE_SET_ANIMATION_ONCE::C_BASE_SET_ANIMATION_ONCE(const C_BASE_SET_ANIMATION_ONCE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BASE_SET_ANIMATION_ONCE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.objectid_){}
    , decltype(_impl_.isloop_){}
    , decltype(_impl_.blend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animationid().empty()) {
    _this->_impl_.animationid_.Set(from._internal_animationid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blend_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.blend_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BASE_SET_ANIMATION_ONCE)
}

inline void C_BASE_SET_ANIMATION_ONCE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.objectid_){0}
    , decltype(_impl_.isloop_){false}
    , decltype(_impl_.blend_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_BASE_SET_ANIMATION_ONCE::~C_BASE_SET_ANIMATION_ONCE() {
  // @@protoc_insertion_point(destructor:Protocol.C_BASE_SET_ANIMATION_ONCE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BASE_SET_ANIMATION_ONCE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.animationid_.Destroy();
}

void C_BASE_SET_ANIMATION_ONCE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BASE_SET_ANIMATION_ONCE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BASE_SET_ANIMATION_ONCE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.animationid_.ClearToEmpty();
  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blend_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.blend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BASE_SET_ANIMATION_ONCE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string animationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_animationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BASE_SET_ANIMATION_ONCE.animationId"));
        } else
          goto handle_unusual;
        continue;
      // bool isLoop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isloop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float blend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BASE_SET_ANIMATION_ONCE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BASE_SET_ANIMATION_ONCE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BASE_SET_ANIMATION_ONCE.animationId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animationid(), target);
  }

  // bool isLoop = 3;
  if (this->_internal_isloop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isloop(), target);
  }

  // float blend = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blend = this->_internal_blend();
  uint32_t raw_blend;
  memcpy(&raw_blend, &tmp_blend, sizeof(tmp_blend));
  if (raw_blend != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_blend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BASE_SET_ANIMATION_ONCE)
  return target;
}

size_t C_BASE_SET_ANIMATION_ONCE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BASE_SET_ANIMATION_ONCE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animationid());
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  // bool isLoop = 3;
  if (this->_internal_isloop() != 0) {
    total_size += 1 + 1;
  }

  // float blend = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blend = this->_internal_blend();
  uint32_t raw_blend;
  memcpy(&raw_blend, &tmp_blend, sizeof(tmp_blend));
  if (raw_blend != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BASE_SET_ANIMATION_ONCE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BASE_SET_ANIMATION_ONCE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BASE_SET_ANIMATION_ONCE::GetClassData() const { return &_class_data_; }


void C_BASE_SET_ANIMATION_ONCE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BASE_SET_ANIMATION_ONCE*>(&to_msg);
  auto& from = static_cast<const C_BASE_SET_ANIMATION_ONCE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BASE_SET_ANIMATION_ONCE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_animationid().empty()) {
    _this->_internal_set_animationid(from._internal_animationid());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_isloop() != 0) {
    _this->_internal_set_isloop(from._internal_isloop());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blend = from._internal_blend();
  uint32_t raw_blend;
  memcpy(&raw_blend, &tmp_blend, sizeof(tmp_blend));
  if (raw_blend != 0) {
    _this->_internal_set_blend(from._internal_blend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BASE_SET_ANIMATION_ONCE::CopyFrom(const C_BASE_SET_ANIMATION_ONCE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BASE_SET_ANIMATION_ONCE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BASE_SET_ANIMATION_ONCE::IsInitialized() const {
  return true;
}

void C_BASE_SET_ANIMATION_ONCE::InternalSwap(C_BASE_SET_ANIMATION_ONCE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationid_, lhs_arena,
      &other->_impl_.animationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_BASE_SET_ANIMATION_ONCE, _impl_.blend_)
      + sizeof(C_BASE_SET_ANIMATION_ONCE::_impl_.blend_)
      - PROTOBUF_FIELD_OFFSET(C_BASE_SET_ANIMATION_ONCE, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BASE_SET_ANIMATION_ONCE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[15]);
}

// ===================================================================

class S_BASE_SET_ANIMATION_ONCE::_Internal {
 public:
};

S_BASE_SET_ANIMATION_ONCE::S_BASE_SET_ANIMATION_ONCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BASE_SET_ANIMATION_ONCE)
}
S_BASE_SET_ANIMATION_ONCE::S_BASE_SET_ANIMATION_ONCE(const S_BASE_SET_ANIMATION_ONCE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BASE_SET_ANIMATION_ONCE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.objectid_){}
    , decltype(_impl_.isloop_){}
    , decltype(_impl_.blend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animationid().empty()) {
    _this->_impl_.animationid_.Set(from._internal_animationid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blend_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.blend_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BASE_SET_ANIMATION_ONCE)
}

inline void S_BASE_SET_ANIMATION_ONCE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.animationid_){}
    , decltype(_impl_.objectid_){0}
    , decltype(_impl_.isloop_){false}
    , decltype(_impl_.blend_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.animationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_BASE_SET_ANIMATION_ONCE::~S_BASE_SET_ANIMATION_ONCE() {
  // @@protoc_insertion_point(destructor:Protocol.S_BASE_SET_ANIMATION_ONCE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BASE_SET_ANIMATION_ONCE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.animationid_.Destroy();
}

void S_BASE_SET_ANIMATION_ONCE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BASE_SET_ANIMATION_ONCE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BASE_SET_ANIMATION_ONCE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.animationid_.ClearToEmpty();
  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blend_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.blend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BASE_SET_ANIMATION_ONCE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string animationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_animationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BASE_SET_ANIMATION_ONCE.animationId"));
        } else
          goto handle_unusual;
        continue;
      // bool isLoop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isloop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float blend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BASE_SET_ANIMATION_ONCE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BASE_SET_ANIMATION_ONCE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BASE_SET_ANIMATION_ONCE.animationId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animationid(), target);
  }

  // bool isLoop = 3;
  if (this->_internal_isloop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isloop(), target);
  }

  // float blend = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blend = this->_internal_blend();
  uint32_t raw_blend;
  memcpy(&raw_blend, &tmp_blend, sizeof(tmp_blend));
  if (raw_blend != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_blend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BASE_SET_ANIMATION_ONCE)
  return target;
}

size_t S_BASE_SET_ANIMATION_ONCE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BASE_SET_ANIMATION_ONCE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string animationId = 2;
  if (!this->_internal_animationid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animationid());
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  // bool isLoop = 3;
  if (this->_internal_isloop() != 0) {
    total_size += 1 + 1;
  }

  // float blend = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blend = this->_internal_blend();
  uint32_t raw_blend;
  memcpy(&raw_blend, &tmp_blend, sizeof(tmp_blend));
  if (raw_blend != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BASE_SET_ANIMATION_ONCE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BASE_SET_ANIMATION_ONCE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BASE_SET_ANIMATION_ONCE::GetClassData() const { return &_class_data_; }


void S_BASE_SET_ANIMATION_ONCE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BASE_SET_ANIMATION_ONCE*>(&to_msg);
  auto& from = static_cast<const S_BASE_SET_ANIMATION_ONCE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BASE_SET_ANIMATION_ONCE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_animationid().empty()) {
    _this->_internal_set_animationid(from._internal_animationid());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_isloop() != 0) {
    _this->_internal_set_isloop(from._internal_isloop());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blend = from._internal_blend();
  uint32_t raw_blend;
  memcpy(&raw_blend, &tmp_blend, sizeof(tmp_blend));
  if (raw_blend != 0) {
    _this->_internal_set_blend(from._internal_blend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BASE_SET_ANIMATION_ONCE::CopyFrom(const S_BASE_SET_ANIMATION_ONCE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BASE_SET_ANIMATION_ONCE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BASE_SET_ANIMATION_ONCE::IsInitialized() const {
  return true;
}

void S_BASE_SET_ANIMATION_ONCE::InternalSwap(S_BASE_SET_ANIMATION_ONCE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationid_, lhs_arena,
      &other->_impl_.animationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BASE_SET_ANIMATION_ONCE, _impl_.blend_)
      + sizeof(S_BASE_SET_ANIMATION_ONCE::_impl_.blend_)
      - PROTOBUF_FIELD_OFFSET(S_BASE_SET_ANIMATION_ONCE, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BASE_SET_ANIMATION_ONCE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fBase_2eproto_getter, &descriptor_table_Packet_5f001_5fBase_2eproto_once,
      file_level_metadata_Packet_5f001_5fBase_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::Vector3*
Arena::CreateMaybeMessage< ::Protocol::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_INSTANTIATE_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_INSTANTIATE_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_INSTANTIATE_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_INSTANTIATE_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_INSTANTIATE_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_INSTANTIATE_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_REMOVE_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_REMOVE_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_REMOVE_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_GET_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_GET_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_GET_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_ADD_OBJECT_GameObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_ADD_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_ADD_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_ADD_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_REMOVE_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_REMOVE_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_REMOVE_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_SET_OBJECT_DATA*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_SET_OBJECT_DATA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_SET_OBJECT_DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_SET_OBJECT_DATA*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_SET_OBJECT_DATA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_SET_OBJECT_DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_SET_OBJECT_DATA_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_SET_TRANSFORM*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_SET_TRANSFORM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_SET_TRANSFORM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_SET_TRANSFORM*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_SET_TRANSFORM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_SET_TRANSFORM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_SET_ANIMATION*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_SET_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_SET_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_SET_ANIMATION*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_SET_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_SET_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BASE_SET_ANIMATION_ONCE*
Arena::CreateMaybeMessage< ::Protocol::C_BASE_SET_ANIMATION_ONCE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BASE_SET_ANIMATION_ONCE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BASE_SET_ANIMATION_ONCE*
Arena::CreateMaybeMessage< ::Protocol::S_BASE_SET_ANIMATION_ONCE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BASE_SET_ANIMATION_ONCE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
