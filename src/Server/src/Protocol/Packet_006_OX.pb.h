// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_006_OX.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f006_5fOX_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f006_5fOX_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f006_5fOX_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f006_5fOX_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f006_5fOX_2eproto;
namespace Protocol {
class C_OX_DIE;
struct C_OX_DIEDefaultTypeInternal;
extern C_OX_DIEDefaultTypeInternal _C_OX_DIE_default_instance_;
class C_OX_GET_HOST;
struct C_OX_GET_HOSTDefaultTypeInternal;
extern C_OX_GET_HOSTDefaultTypeInternal _C_OX_GET_HOST_default_instance_;
class C_OX_START;
struct C_OX_STARTDefaultTypeInternal;
extern C_OX_STARTDefaultTypeInternal _C_OX_START_default_instance_;
class S_OX_AWARD;
struct S_OX_AWARDDefaultTypeInternal;
extern S_OX_AWARDDefaultTypeInternal _S_OX_AWARD_default_instance_;
class S_OX_DESTROY;
struct S_OX_DESTROYDefaultTypeInternal;
extern S_OX_DESTROYDefaultTypeInternal _S_OX_DESTROY_default_instance_;
class S_OX_FINISH;
struct S_OX_FINISHDefaultTypeInternal;
extern S_OX_FINISHDefaultTypeInternal _S_OX_FINISH_default_instance_;
class S_OX_HOST;
struct S_OX_HOSTDefaultTypeInternal;
extern S_OX_HOSTDefaultTypeInternal _S_OX_HOST_default_instance_;
class S_OX_QUIZ;
struct S_OX_QUIZDefaultTypeInternal;
extern S_OX_QUIZDefaultTypeInternal _S_OX_QUIZ_default_instance_;
class S_OX_ROUND_FINISH;
struct S_OX_ROUND_FINISHDefaultTypeInternal;
extern S_OX_ROUND_FINISHDefaultTypeInternal _S_OX_ROUND_FINISH_default_instance_;
class S_OX_ROUND_START;
struct S_OX_ROUND_STARTDefaultTypeInternal;
extern S_OX_ROUND_STARTDefaultTypeInternal _S_OX_ROUND_START_default_instance_;
class S_OX_START;
struct S_OX_STARTDefaultTypeInternal;
extern S_OX_STARTDefaultTypeInternal _S_OX_START_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_OX_DIE* Arena::CreateMaybeMessage<::Protocol::C_OX_DIE>(Arena*);
template<> ::Protocol::C_OX_GET_HOST* Arena::CreateMaybeMessage<::Protocol::C_OX_GET_HOST>(Arena*);
template<> ::Protocol::C_OX_START* Arena::CreateMaybeMessage<::Protocol::C_OX_START>(Arena*);
template<> ::Protocol::S_OX_AWARD* Arena::CreateMaybeMessage<::Protocol::S_OX_AWARD>(Arena*);
template<> ::Protocol::S_OX_DESTROY* Arena::CreateMaybeMessage<::Protocol::S_OX_DESTROY>(Arena*);
template<> ::Protocol::S_OX_FINISH* Arena::CreateMaybeMessage<::Protocol::S_OX_FINISH>(Arena*);
template<> ::Protocol::S_OX_HOST* Arena::CreateMaybeMessage<::Protocol::S_OX_HOST>(Arena*);
template<> ::Protocol::S_OX_QUIZ* Arena::CreateMaybeMessage<::Protocol::S_OX_QUIZ>(Arena*);
template<> ::Protocol::S_OX_ROUND_FINISH* Arena::CreateMaybeMessage<::Protocol::S_OX_ROUND_FINISH>(Arena*);
template<> ::Protocol::S_OX_ROUND_START* Arena::CreateMaybeMessage<::Protocol::S_OX_ROUND_START>(Arena*);
template<> ::Protocol::S_OX_START* Arena::CreateMaybeMessage<::Protocol::S_OX_START>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_OX_START final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_OX_START) */ {
 public:
  inline C_OX_START() : C_OX_START(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_OX_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OX_START(const C_OX_START& from);
  C_OX_START(C_OX_START&& from) noexcept
    : C_OX_START() {
    *this = ::std::move(from);
  }

  inline C_OX_START& operator=(const C_OX_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OX_START& operator=(C_OX_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OX_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OX_START* internal_default_instance() {
    return reinterpret_cast<const C_OX_START*>(
               &_C_OX_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_OX_START& a, C_OX_START& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OX_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OX_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_OX_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_OX_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_OX_START& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_OX_START& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_OX_START";
  }
  protected:
  explicit C_OX_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_OX_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_START final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_OX_START) */ {
 public:
  inline S_OX_START() : S_OX_START(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_OX_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_START(const S_OX_START& from);
  S_OX_START(S_OX_START&& from) noexcept
    : S_OX_START() {
    *this = ::std::move(from);
  }

  inline S_OX_START& operator=(const S_OX_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_START& operator=(S_OX_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_START* internal_default_instance() {
    return reinterpret_cast<const S_OX_START*>(
               &_S_OX_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_OX_START& a, S_OX_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_OX_START& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_OX_START& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_START";
  }
  protected:
  explicit S_OX_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_FINISH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_OX_FINISH) */ {
 public:
  inline S_OX_FINISH() : S_OX_FINISH(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_OX_FINISH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_FINISH(const S_OX_FINISH& from);
  S_OX_FINISH(S_OX_FINISH&& from) noexcept
    : S_OX_FINISH() {
    *this = ::std::move(from);
  }

  inline S_OX_FINISH& operator=(const S_OX_FINISH& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_FINISH& operator=(S_OX_FINISH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_FINISH& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_FINISH* internal_default_instance() {
    return reinterpret_cast<const S_OX_FINISH*>(
               &_S_OX_FINISH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_OX_FINISH& a, S_OX_FINISH& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_FINISH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_FINISH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_FINISH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_FINISH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_OX_FINISH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_OX_FINISH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_FINISH";
  }
  protected:
  explicit S_OX_FINISH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_FINISH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class C_OX_GET_HOST final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_OX_GET_HOST) */ {
 public:
  inline C_OX_GET_HOST() : C_OX_GET_HOST(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_OX_GET_HOST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OX_GET_HOST(const C_OX_GET_HOST& from);
  C_OX_GET_HOST(C_OX_GET_HOST&& from) noexcept
    : C_OX_GET_HOST() {
    *this = ::std::move(from);
  }

  inline C_OX_GET_HOST& operator=(const C_OX_GET_HOST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OX_GET_HOST& operator=(C_OX_GET_HOST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OX_GET_HOST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OX_GET_HOST* internal_default_instance() {
    return reinterpret_cast<const C_OX_GET_HOST*>(
               &_C_OX_GET_HOST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_OX_GET_HOST& a, C_OX_GET_HOST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OX_GET_HOST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OX_GET_HOST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_OX_GET_HOST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_OX_GET_HOST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_OX_GET_HOST& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_OX_GET_HOST& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_OX_GET_HOST";
  }
  protected:
  explicit C_OX_GET_HOST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_OX_GET_HOST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_HOST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OX_HOST) */ {
 public:
  inline S_OX_HOST() : S_OX_HOST(nullptr) {}
  ~S_OX_HOST() override;
  explicit PROTOBUF_CONSTEXPR S_OX_HOST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_HOST(const S_OX_HOST& from);
  S_OX_HOST(S_OX_HOST&& from) noexcept
    : S_OX_HOST() {
    *this = ::std::move(from);
  }

  inline S_OX_HOST& operator=(const S_OX_HOST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_HOST& operator=(S_OX_HOST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_HOST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_HOST* internal_default_instance() {
    return reinterpret_cast<const S_OX_HOST*>(
               &_S_OX_HOST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_OX_HOST& a, S_OX_HOST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_HOST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_HOST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_HOST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_HOST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OX_HOST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_OX_HOST& from) {
    S_OX_HOST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OX_HOST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_HOST";
  }
  protected:
  explicit S_OX_HOST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string clientId = 1;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_HOST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_ROUND_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OX_ROUND_START) */ {
 public:
  inline S_OX_ROUND_START() : S_OX_ROUND_START(nullptr) {}
  ~S_OX_ROUND_START() override;
  explicit PROTOBUF_CONSTEXPR S_OX_ROUND_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_ROUND_START(const S_OX_ROUND_START& from);
  S_OX_ROUND_START(S_OX_ROUND_START&& from) noexcept
    : S_OX_ROUND_START() {
    *this = ::std::move(from);
  }

  inline S_OX_ROUND_START& operator=(const S_OX_ROUND_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_ROUND_START& operator=(S_OX_ROUND_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_ROUND_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_ROUND_START* internal_default_instance() {
    return reinterpret_cast<const S_OX_ROUND_START*>(
               &_S_OX_ROUND_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_OX_ROUND_START& a, S_OX_ROUND_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_ROUND_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_ROUND_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_ROUND_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_ROUND_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OX_ROUND_START& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_OX_ROUND_START& from) {
    S_OX_ROUND_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OX_ROUND_START* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_ROUND_START";
  }
  protected:
  explicit S_OX_ROUND_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // string mode = 1;
  void clear_mode();
  const std::string& mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_ROUND_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_ROUND_FINISH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_OX_ROUND_FINISH) */ {
 public:
  inline S_OX_ROUND_FINISH() : S_OX_ROUND_FINISH(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_OX_ROUND_FINISH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_ROUND_FINISH(const S_OX_ROUND_FINISH& from);
  S_OX_ROUND_FINISH(S_OX_ROUND_FINISH&& from) noexcept
    : S_OX_ROUND_FINISH() {
    *this = ::std::move(from);
  }

  inline S_OX_ROUND_FINISH& operator=(const S_OX_ROUND_FINISH& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_ROUND_FINISH& operator=(S_OX_ROUND_FINISH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_ROUND_FINISH& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_ROUND_FINISH* internal_default_instance() {
    return reinterpret_cast<const S_OX_ROUND_FINISH*>(
               &_S_OX_ROUND_FINISH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_OX_ROUND_FINISH& a, S_OX_ROUND_FINISH& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_ROUND_FINISH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_ROUND_FINISH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_ROUND_FINISH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_ROUND_FINISH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_OX_ROUND_FINISH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_OX_ROUND_FINISH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_ROUND_FINISH";
  }
  protected:
  explicit S_OX_ROUND_FINISH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_ROUND_FINISH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_QUIZ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OX_QUIZ) */ {
 public:
  inline S_OX_QUIZ() : S_OX_QUIZ(nullptr) {}
  ~S_OX_QUIZ() override;
  explicit PROTOBUF_CONSTEXPR S_OX_QUIZ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_QUIZ(const S_OX_QUIZ& from);
  S_OX_QUIZ(S_OX_QUIZ&& from) noexcept
    : S_OX_QUIZ() {
    *this = ::std::move(from);
  }

  inline S_OX_QUIZ& operator=(const S_OX_QUIZ& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_QUIZ& operator=(S_OX_QUIZ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_QUIZ& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_QUIZ* internal_default_instance() {
    return reinterpret_cast<const S_OX_QUIZ*>(
               &_S_OX_QUIZ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_OX_QUIZ& a, S_OX_QUIZ& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_QUIZ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_QUIZ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_QUIZ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_QUIZ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OX_QUIZ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_OX_QUIZ& from) {
    S_OX_QUIZ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OX_QUIZ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_QUIZ";
  }
  protected:
  explicit S_OX_QUIZ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPanelFieldNumber = 4,
    kQuizFieldNumber = 1,
    kTimeToDestoryFieldNumber = 3,
  };
  // repeated int32 panel = 4;
  int panel_size() const;
  private:
  int _internal_panel_size() const;
  public:
  void clear_panel();
  private:
  int32_t _internal_panel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_panel() const;
  void _internal_add_panel(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_panel();
  public:
  int32_t panel(int index) const;
  void set_panel(int index, int32_t value);
  void add_panel(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      panel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_panel();

  // int32 quiz = 1;
  void clear_quiz();
  int32_t quiz() const;
  void set_quiz(int32_t value);
  private:
  int32_t _internal_quiz() const;
  void _internal_set_quiz(int32_t value);
  public:

  // int32 timeToDestory = 3;
  void clear_timetodestory();
  int32_t timetodestory() const;
  void set_timetodestory(int32_t value);
  private:
  int32_t _internal_timetodestory() const;
  void _internal_set_timetodestory(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_QUIZ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > panel_;
    mutable std::atomic<int> _panel_cached_byte_size_;
    int32_t quiz_;
    int32_t timetodestory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_DESTROY final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_OX_DESTROY) */ {
 public:
  inline S_OX_DESTROY() : S_OX_DESTROY(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_OX_DESTROY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_DESTROY(const S_OX_DESTROY& from);
  S_OX_DESTROY(S_OX_DESTROY&& from) noexcept
    : S_OX_DESTROY() {
    *this = ::std::move(from);
  }

  inline S_OX_DESTROY& operator=(const S_OX_DESTROY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_DESTROY& operator=(S_OX_DESTROY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_DESTROY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_DESTROY* internal_default_instance() {
    return reinterpret_cast<const S_OX_DESTROY*>(
               &_S_OX_DESTROY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_OX_DESTROY& a, S_OX_DESTROY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_DESTROY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_DESTROY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_DESTROY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_DESTROY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_OX_DESTROY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_OX_DESTROY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_DESTROY";
  }
  protected:
  explicit S_OX_DESTROY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_DESTROY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class S_OX_AWARD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OX_AWARD) */ {
 public:
  inline S_OX_AWARD() : S_OX_AWARD(nullptr) {}
  ~S_OX_AWARD() override;
  explicit PROTOBUF_CONSTEXPR S_OX_AWARD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OX_AWARD(const S_OX_AWARD& from);
  S_OX_AWARD(S_OX_AWARD&& from) noexcept
    : S_OX_AWARD() {
    *this = ::std::move(from);
  }

  inline S_OX_AWARD& operator=(const S_OX_AWARD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OX_AWARD& operator=(S_OX_AWARD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OX_AWARD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OX_AWARD* internal_default_instance() {
    return reinterpret_cast<const S_OX_AWARD*>(
               &_S_OX_AWARD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_OX_AWARD& a, S_OX_AWARD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OX_AWARD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OX_AWARD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OX_AWARD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OX_AWARD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OX_AWARD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_OX_AWARD& from) {
    S_OX_AWARD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OX_AWARD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OX_AWARD";
  }
  protected:
  explicit S_OX_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnersFieldNumber = 1,
  };
  // repeated string winners = 1;
  int winners_size() const;
  private:
  int _internal_winners_size() const;
  public:
  void clear_winners();
  const std::string& winners(int index) const;
  std::string* mutable_winners(int index);
  void set_winners(int index, const std::string& value);
  void set_winners(int index, std::string&& value);
  void set_winners(int index, const char* value);
  void set_winners(int index, const char* value, size_t size);
  std::string* add_winners();
  void add_winners(const std::string& value);
  void add_winners(std::string&& value);
  void add_winners(const char* value);
  void add_winners(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& winners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_winners();
  private:
  const std::string& _internal_winners(int index) const;
  std::string* _internal_add_winners();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OX_AWARD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> winners_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// -------------------------------------------------------------------

class C_OX_DIE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_OX_DIE) */ {
 public:
  inline C_OX_DIE() : C_OX_DIE(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_OX_DIE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OX_DIE(const C_OX_DIE& from);
  C_OX_DIE(C_OX_DIE&& from) noexcept
    : C_OX_DIE() {
    *this = ::std::move(from);
  }

  inline C_OX_DIE& operator=(const C_OX_DIE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OX_DIE& operator=(C_OX_DIE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OX_DIE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OX_DIE* internal_default_instance() {
    return reinterpret_cast<const C_OX_DIE*>(
               &_C_OX_DIE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_OX_DIE& a, C_OX_DIE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OX_DIE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OX_DIE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_OX_DIE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_OX_DIE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_OX_DIE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_OX_DIE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_OX_DIE";
  }
  protected:
  explicit C_OX_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_OX_DIE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f006_5fOX_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_OX_START

// -------------------------------------------------------------------

// S_OX_START

// -------------------------------------------------------------------

// S_OX_FINISH

// -------------------------------------------------------------------

// C_OX_GET_HOST

// -------------------------------------------------------------------

// S_OX_HOST

// string clientId = 1;
inline void S_OX_HOST::clear_clientid() {
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& S_OX_HOST::clientid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OX_HOST.clientId)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_OX_HOST::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_OX_HOST.clientId)
}
inline std::string* S_OX_HOST::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_OX_HOST.clientId)
  return _s;
}
inline const std::string& S_OX_HOST::_internal_clientid() const {
  return _impl_.clientid_.Get();
}
inline void S_OX_HOST::_internal_set_clientid(const std::string& value) {
  
  _impl_.clientid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_OX_HOST::_internal_mutable_clientid() {
  
  return _impl_.clientid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_OX_HOST::release_clientid() {
  // @@protoc_insertion_point(field_release:Protocol.S_OX_HOST.clientId)
  return _impl_.clientid_.Release();
}
inline void S_OX_HOST::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  _impl_.clientid_.SetAllocated(clientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_OX_HOST.clientId)
}

// -------------------------------------------------------------------

// S_OX_ROUND_START

// string mode = 1;
inline void S_OX_ROUND_START::clear_mode() {
  _impl_.mode_.ClearToEmpty();
}
inline const std::string& S_OX_ROUND_START::mode() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OX_ROUND_START.mode)
  return _internal_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_OX_ROUND_START::set_mode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_OX_ROUND_START.mode)
}
inline std::string* S_OX_ROUND_START::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:Protocol.S_OX_ROUND_START.mode)
  return _s;
}
inline const std::string& S_OX_ROUND_START::_internal_mode() const {
  return _impl_.mode_.Get();
}
inline void S_OX_ROUND_START::_internal_set_mode(const std::string& value) {
  
  _impl_.mode_.Set(value, GetArenaForAllocation());
}
inline std::string* S_OX_ROUND_START::_internal_mutable_mode() {
  
  return _impl_.mode_.Mutable(GetArenaForAllocation());
}
inline std::string* S_OX_ROUND_START::release_mode() {
  // @@protoc_insertion_point(field_release:Protocol.S_OX_ROUND_START.mode)
  return _impl_.mode_.Release();
}
inline void S_OX_ROUND_START::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  _impl_.mode_.SetAllocated(mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mode_.IsDefault()) {
    _impl_.mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_OX_ROUND_START.mode)
}

// -------------------------------------------------------------------

// S_OX_ROUND_FINISH

// -------------------------------------------------------------------

// S_OX_QUIZ

// int32 quiz = 1;
inline void S_OX_QUIZ::clear_quiz() {
  _impl_.quiz_ = 0;
}
inline int32_t S_OX_QUIZ::_internal_quiz() const {
  return _impl_.quiz_;
}
inline int32_t S_OX_QUIZ::quiz() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OX_QUIZ.quiz)
  return _internal_quiz();
}
inline void S_OX_QUIZ::_internal_set_quiz(int32_t value) {
  
  _impl_.quiz_ = value;
}
inline void S_OX_QUIZ::set_quiz(int32_t value) {
  _internal_set_quiz(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OX_QUIZ.quiz)
}

// int32 timeToDestory = 3;
inline void S_OX_QUIZ::clear_timetodestory() {
  _impl_.timetodestory_ = 0;
}
inline int32_t S_OX_QUIZ::_internal_timetodestory() const {
  return _impl_.timetodestory_;
}
inline int32_t S_OX_QUIZ::timetodestory() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OX_QUIZ.timeToDestory)
  return _internal_timetodestory();
}
inline void S_OX_QUIZ::_internal_set_timetodestory(int32_t value) {
  
  _impl_.timetodestory_ = value;
}
inline void S_OX_QUIZ::set_timetodestory(int32_t value) {
  _internal_set_timetodestory(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OX_QUIZ.timeToDestory)
}

// repeated int32 panel = 4;
inline int S_OX_QUIZ::_internal_panel_size() const {
  return _impl_.panel_.size();
}
inline int S_OX_QUIZ::panel_size() const {
  return _internal_panel_size();
}
inline void S_OX_QUIZ::clear_panel() {
  _impl_.panel_.Clear();
}
inline int32_t S_OX_QUIZ::_internal_panel(int index) const {
  return _impl_.panel_.Get(index);
}
inline int32_t S_OX_QUIZ::panel(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OX_QUIZ.panel)
  return _internal_panel(index);
}
inline void S_OX_QUIZ::set_panel(int index, int32_t value) {
  _impl_.panel_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_OX_QUIZ.panel)
}
inline void S_OX_QUIZ::_internal_add_panel(int32_t value) {
  _impl_.panel_.Add(value);
}
inline void S_OX_QUIZ::add_panel(int32_t value) {
  _internal_add_panel(value);
  // @@protoc_insertion_point(field_add:Protocol.S_OX_QUIZ.panel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_OX_QUIZ::_internal_panel() const {
  return _impl_.panel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_OX_QUIZ::panel() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OX_QUIZ.panel)
  return _internal_panel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_OX_QUIZ::_internal_mutable_panel() {
  return &_impl_.panel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_OX_QUIZ::mutable_panel() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OX_QUIZ.panel)
  return _internal_mutable_panel();
}

// -------------------------------------------------------------------

// S_OX_DESTROY

// -------------------------------------------------------------------

// S_OX_AWARD

// repeated string winners = 1;
inline int S_OX_AWARD::_internal_winners_size() const {
  return _impl_.winners_.size();
}
inline int S_OX_AWARD::winners_size() const {
  return _internal_winners_size();
}
inline void S_OX_AWARD::clear_winners() {
  _impl_.winners_.Clear();
}
inline std::string* S_OX_AWARD::add_winners() {
  std::string* _s = _internal_add_winners();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S_OX_AWARD.winners)
  return _s;
}
inline const std::string& S_OX_AWARD::_internal_winners(int index) const {
  return _impl_.winners_.Get(index);
}
inline const std::string& S_OX_AWARD::winners(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OX_AWARD.winners)
  return _internal_winners(index);
}
inline std::string* S_OX_AWARD::mutable_winners(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_OX_AWARD.winners)
  return _impl_.winners_.Mutable(index);
}
inline void S_OX_AWARD::set_winners(int index, const std::string& value) {
  _impl_.winners_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OX_AWARD.winners)
}
inline void S_OX_AWARD::set_winners(int index, std::string&& value) {
  _impl_.winners_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S_OX_AWARD.winners)
}
inline void S_OX_AWARD::set_winners(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.winners_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S_OX_AWARD.winners)
}
inline void S_OX_AWARD::set_winners(int index, const char* value, size_t size) {
  _impl_.winners_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S_OX_AWARD.winners)
}
inline std::string* S_OX_AWARD::_internal_add_winners() {
  return _impl_.winners_.Add();
}
inline void S_OX_AWARD::add_winners(const std::string& value) {
  _impl_.winners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S_OX_AWARD.winners)
}
inline void S_OX_AWARD::add_winners(std::string&& value) {
  _impl_.winners_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S_OX_AWARD.winners)
}
inline void S_OX_AWARD::add_winners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.winners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S_OX_AWARD.winners)
}
inline void S_OX_AWARD::add_winners(const char* value, size_t size) {
  _impl_.winners_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S_OX_AWARD.winners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S_OX_AWARD::winners() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OX_AWARD.winners)
  return _impl_.winners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S_OX_AWARD::mutable_winners() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OX_AWARD.winners)
  return &_impl_.winners_;
}

// -------------------------------------------------------------------

// C_OX_DIE

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f006_5fOX_2eproto
